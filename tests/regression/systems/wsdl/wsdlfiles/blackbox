<?xml version='1.0' encoding='UTF-8'?><!-- Published by JAX-WS RI at http://jax-ws.dev.java.net. RI's version is JAX-WS RI 2.1.5-hudson-$BUILD_NUMBER-. --><!--
Delphi WSDL Importer restrictions for the schema:
- all elements having the same names must have the same types
- if a type contains element with maxOccurs > 1 then it must be the only nested element within this type, no more elements are allowed
- optional elements of primitive types (float, int) must be wrapped with complex types, because delphi does not provide way to distinct zero from null
--><definitions xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:bb="http://topdog.uk.net/BlackBox" xmlns:bbs="http://topdog.uk.net/BlackBox" xmlns="http://schemas.xmlsoap.org/wsdl/" targetNamespace="http://topdog.uk.net/BlackBox">
  <types>
    <xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://topdog.uk.net/BlackBox" targetNamespace="http://topdog.uk.net/BlackBox" elementFormDefault="qualified" attributeFormDefault="unqualified">
      <xsd:element name="StartSessionRequest" type="tns:StartSessionRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/StartSessionRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="StartSessionResponse" type="tns:StartSessionResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
					    Success response
						/blackbox/StartSessionResponse-1.xml
					example#2:
					    Failed response
						/blackbox/StartSessionResponse-2.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="EndSessionRequest" type="tns:EndSessionRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/EndSessionRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="EndSessionResponse" type="tns:EndSessionResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/EndSessionResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="FlightAvailabilityRequest" type="tns:FlightAvailabilityRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/FlightAvailabilityRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="FlightAvailabilityResponse" type="tns:FlightAvailabilityResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/FlightAvailabilityResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="FlightFaresListRequest" type="tns:FlightFaresListRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/FlightFaresListRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="FlightFaresListResponse" type="tns:FlightFaresListResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/FlightFaresListResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="FlightSeatsAvailabilityRequest" type="tns:FlightSeatsAvailabilityRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/FlightSeatsAvailabilityRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="FlightSeatsAvailabilityResponse" type="tns:FlightSeatsAvailabilityResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/FlightSeatsAvailabilityResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="NextFlightSeatsAvlPortionRequest" type="tns:NextFlightSeatsAvlPortionRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/NextFlightSeatsAvlPortionRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="NextFlightPortionRequest" type="tns:NextFlightPortionRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/NextFlightPortionRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="FlightReservationRequest" type="tns:FlightReservationRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/FlightReservationRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="FlightReservationResponse" type="tns:FlightReservationResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/FlightReservationResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="FlightInfoRequest" type="tns:FlightInfoRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/FlightInfoRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="FlightInfoResponse" type="tns:FlightInfoResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/FlightInfoResponse-1.xml
					example#2:
            			Response contains information about credit card fees
						/blackbox/FlightInfoResponse-2.xml	
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="HotelAvailabilityRequest" type="tns:HotelAvailabilityRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/HotelAvailabilityRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="HotelAvailabilityResponse" type="tns:HotelAvailabilityResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/HotelAvailabilityResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="NextHotelPortionRequest" type="tns:NextHotelPortionRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/NextHotelPortionRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="HotelReservationRequest" type="tns:HotelReservationRequest">
        <xsd:annotation>
          <xsd:documentation>Each room must be reserved separately from the others e.g. if the client wants to book 3 rooms, then 3 separate reservation requests must be issued.
					example#1:
						/blackbox/HotelReservationRequest.xml					
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="HotelReservationResponse" type="tns:HotelReservationResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/HotelReservationResponse-1.xml
					example#2:
					    Response contains information about hotel supplements and discounts
						/blackbox/HotelReservationResponse-2.xml	
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="ConfirmationRequest" type="tns:ConfirmationRequest">
        <xsd:annotation>
          <xsd:documentation>
					Each room, each seat was earlier reserved separately. To finalize the booking and confirm the reservation altogether, the ConfirmationRequest has to be issued. It should contain all the book codes of previously reserved rooms and seats. One earlier sent reservation RQ corresponds to one ReservedGroup in the confirmation RQ. So if the client reserved 2 rooms and a return flight, then the confirmation RQ should contain 3 ReservedGroups. One group should contain the book code of one reserved room. Another group should contain the book code of another reserved room. Third group should contain (usually 2) book codes of the reserved return flights.
					example#1:
						/blackbox/ConfirmationRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="ConfirmationResponse" type="tns:ConfirmationResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/ConfirmationResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="BookingStatusRequest" type="tns:BookingStatusRequest">
        <xsd:annotation>
          <xsd:documentation>This RQ can be used to find out the status of the booking. One of its applications is when the client sends the confirmation RQ to the BlackBox and they do not receive a response the client can send the status RQ specifying the book codes, which previously used in the confirmation RQ. Individual RQs should be sent to receive status of individual ReservedGroup. For example, if the confirmation RQ contained 2 ReservedGroups (one for a reserved flight and another one for a reserved room), then one status RQ should be used to get the status of the flight booking and the other RQ should be used to get the status of the room booking. 

Another application of this RQ is to find out the status of the booking, which was accomplished long time ago. In this case client may not know the book codes used for the reservation and confirmation. In this case the client can send the booking reference returned by the supplier in the successful confirmation RS.
					example#1:
						/blackbox/ConfirmationResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="BookingStatusResponse" type="tns:BookingStatusResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/BookingStatusResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="CancellationRequest" type="tns:CancellationRequest">
        <xsd:annotation>
          <xsd:documentation>
					If operator supports programmatic booking cancellation, this RQ can be used to accomplish such task.
					example#1:
						/blackbox/CancellationRequest.xml					
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="CancellationResponse" type="tns:CancellationResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/CancellationResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="HotelInfoRequest" type="tns:HotelInfoRequest">
        <xsd:annotation>
          <xsd:documentation>
					This request is used to receive detailed information about a hotel which was included in the availability response.
					example#1:
						Get hotel info by bookcode
						/blackbox/HotelInfoRequest-1.xml	
					example#2:
						Get hotel info by oper hotel code and booking ref
						/blackbox/HotelInfoRequest-2.xml							
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="HotelInfoResponse" type="tns:HotelInfoResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/HotelInfoResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="CardClearanceRequest" type="tns:CardClearanceRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						ENETT specific card clearance
						/blackbox/CardClearanceRequest-1.xml
					example#2:						
						COMMIDEA specific card clearance
						/blackbox/CardClearanceRequest-2.xml						
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="CardClearanceResponse" type="tns:CardClearanceResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						ENETT specific card clearamce					
						/blackbox/CardClearanceResponse-1.xml
					example#2:						
						COMMIDEA specific card clearamce
						/blackbox/CardClearanceResponse-2.xml							
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="ClearanceConfirmationRequest" type="tns:ClearanceConfirmationRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/ClearanceConfirmationRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="ClearanceConfirmationResponse" type="tns:ClearanceConfirmationResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/ClearanceConfirmationResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="EnrollmentCheckRequest" type="tns:EnrollmentCheckRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/EnrollmentCheckRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="EnrollmentCheckResponse" type="tns:EnrollmentCheckResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
					Card is not enrolled and PayerAuth can't be performed					
						/blackbox/EnrollmentCheckResponse-1.xml
					example#2:
						/blackbox/EnrollmentCheckResponse-2.xml						
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="AuthCheckRequest" type="tns:AuthCheckRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/AuthCheckRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="AuthCheckResponse" type="tns:AuthCheckResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/AuthCheckResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="AsyncAuthCheckStatusRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/AsyncAuthCheckStatusRequest.xml
					</xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="SessionId" type="xsd:string" />
            <xsd:element name="EnrollmentCode" type="xsd:string" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="AsyncAuthCheckStatusResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						AuthCheck status is available					
						/blackbox/AsyncAuthCheckStatusResponse-1.xml
					example#2:
						AuthCheck status is not available at the time of call					
						/blackbox/AsyncAuthCheckStatusResponse-2.xml						
					</xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="SessionId" type="xsd:string" />
            <xsd:element name="AuthCheckStatus" type="tns:AuthCheckResponse" minOccurs="0" />
            <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
            <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="InsuranceQuoteRequest" type="tns:InsuranceQuoteRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/InsuranceQuoteRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="InsuranceQuoteResponse" type="tns:InsuranceQuoteResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/InsuranceQuoteResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="NextInsurancePortionRequest" type="tns:NextInsurancePortionRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/NextInsurancePortionRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="CarAvailabilityRequest" type="tns:CarAvailabilityRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/CarAvailabilityRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="CarAvailabilityResponse" type="tns:CarAvailabilityResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/CarAvailabilityResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="NextCarPortionRequest" type="tns:NextCarPortionRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/NextCarPortionRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="CarReservationRequest" type="tns:CarReservationRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/CarReservationRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="CarReservationResponse" type="tns:CarReservationResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/CarReservationResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="TransferAvailabilityRequest" type="tns:TransferAvailabilityRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/TransferAvailabilityRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="TransferAvailabilityResponse" type="tns:TransferAvailabilityResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/TransferAvailabilityResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="NextTransferPortionRequest" type="tns:NextTransferPortionRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/NextTransferPortionRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="TransferReservationRequest" type="tns:TransferReservationRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/TransferReservationRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="TransferReservationResponse" type="tns:TransferReservationResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/TransferReservationResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="TourAvailabilityRequest" type="tns:TourAvailabilityRequest">
        <xsd:annotation>
          <xsd:documentation>
					Request for searching packaged tours (flight+hotel+return flight) availability
					example#1:
						/blackbox/TourAvailabilityRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="TourAvailabilityResponse" type="tns:TourAvailabilityResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/TourAvailabilityResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="TourReservationRequest" type="tns:TourReservationRequest">
        <xsd:annotation>
          <xsd:documentation>
					This request reserves a single tour. Reservation temporarily locks the resource (10-15 minutes) so that the user can browse through the rest of the variants.
					example#1:
						/blackbox/TourReservationRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="TourReservationResponse" type="tns:TourReservationResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/TourReservationResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="NextTourPortionRequest" type="tns:NextTourPortionRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/NextTourPortionRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="RailAvailabilityRequest" type="tns:RailAvailabilityRequest">
        <xsd:annotation>
          <xsd:documentation>
					This request retrieves a number of rail routes that best match the specified search criteria
					example#1:
						/blackbox/RailAvailabilityRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="RailAvailabilityResponse" type="tns:RailAvailabilityResponse">
        <xsd:annotation>
          <xsd:documentation>
					Response from the RailAvailabilityRequest.
					example#1:
						/blackbox/RailAvailabilityResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="NextRailPortionRequest" type="tns:NextRailPortionRequest">
        <xsd:annotation>
          <xsd:documentation>
					Requests next portion of available trains
					example#1:
						/blackbox/NextRailPortionRequest.xml					
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="RailInfoRequest" type="tns:RailInfoRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/RailInfoRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="RailInfoResponse" type="tns:RailInfoResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/RailInfoResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="RailReservationRequest" type="tns:RailReservationRequest">
        <xsd:annotation>
          <xsd:documentation>
					This request reserves the selected itinerary leg(s) together with passengers' preferences.
					example#1:
						/blackbox/RailReservationRequest.xml					
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="RailReservationResponse" type="tns:RailReservationResponse">
        <xsd:annotation>
          <xsd:documentation>
					Response to RailReservationRequest. Contains price and details on the reserved legs
					example#1:
						/blackbox/RailReservationRequest.xml	
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="FerryTimetableRequest" type="tns:FerryTimetableRequest">
        <xsd:annotation>
          <xsd:documentation>
					This request retrieves a list of ferry routes that best match the specified search criteria.
					example#1:
						/blackbox/FerryTimetableRequest.xml	
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="FerryTimetableResponse" type="tns:FerryTimetableResponse">
        <xsd:annotation>
          <xsd:documentation>
					Response from the FerryTimetableRequest
					example#1:
						/blackbox/FerryTimetableResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="NextFerryPortionRequest" type="tns:NextFerryPortionRequest">
        <xsd:annotation>
          <xsd:documentation>
					Requests next portion of available ferrys
					example#1:
						/blackbox/NextFerryPortionRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="FerryAccommodationRequest" type="tns:FerryAccommodationRequest">
        <xsd:annotation>
          <xsd:documentation>
					This request retrieves a list of all available accommodation for the given itinerary. Use the ItineraryBookCode obtained in the FerryTimetableResponse
					example#1:
						/blackbox/FerryAccommodationRequest.xml					
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="FerryAccommodationResponse" type="tns:FerryAccommodationResponse">
        <xsd:annotation>
          <xsd:documentation>
					Response from the FerryAccommodationRequest
					example#1:
						/blackbox/FerryAccommodationResponse.xml						
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="FerryReservationRequest" type="tns:FerryReservationRequest">
        <xsd:annotation>
          <xsd:documentation>This request reserves the selected itineraries together with the accommodation and the vehicle/trailer in place
					example#1:
						/blackbox/FerryReservationRequest.xml	
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="FerryReservationResponse" type="tns:FerryReservationResponse">
        <xsd:annotation>
          <xsd:documentation>
					Response from the FerryReservationRequest.
					example#1:
						/blackbox/FerryReservationResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="OtherProductAvailabilityRequest" type="tns:OtherProductAvailabilityRequest">
        <xsd:annotation>
          <xsd:documentation>
					Request for searching miscellaneous products availability such as tours, excursions, attractions.
					example#1:
						/blackbox/OtherProductAvailabilityRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="OtherProductAvailabilityResponse" type="tns:OtherProductAvailabilityResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/OtherProductAvailabilityResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="OtherProductInfoRequest" type="tns:OtherProductInfoRequest">
        <xsd:annotation>
          <xsd:documentation>
					Request provides a detailed description of the product
					example#1:
						/blackbox/OtherProductInfoRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="OtherProductInfoResponse" type="tns:OtherProductInfoResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/OtherProductInfoResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="OtherProductReservationRequest" type="tns:OtherProductReservationRequest">
        <xsd:annotation>
          <xsd:documentation>
					Request that reserves a single product
					example#1:
						/blackbox/OtherProductReservationRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="OtherProductReservationResponse" type="tns:OtherProductReservationResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/OtherProductReservationResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="NextOtherProductPortionRequest" type="tns:NextOtherProductPortionRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/NextOtherProductPortionRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="ReloadConfigurationRequest" type="tns:ReloadConfigurationRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/ReloadConfigurationRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="ReloadConfigurationResponse" type="tns:ReloadConfigurationResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/ReloadConfigurationResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="CreditRequest" type="tns:CreditRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/CreditRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="CreditResponse" type="tns:CreditResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/CreditResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="AddSessionInfoRequest" type="tns:AddSessionInfoRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/AddSessionInfoRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="AddSessionInfoResponse" type="tns:AddSessionInfoResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/AddSessionInfoResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="DirectDebitRequest" type="tns:DirectDebitRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/DirectDebitRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="DirectDebitResponse" type="tns:DirectDebitResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/DirectDebitResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="SupplementListRequest" type="tns:SupplementListRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/SupplementListRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="SupplementListResponse" type="tns:SupplementListResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/SupplementListResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="CommissionRequest" type="tns:CommissionRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/CommissionRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="CommissionResponse" type="tns:CommissionResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/CommissionResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="ParkingAvailabilityRequest" type="tns:ParkingAvailabilityRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/ParkingAvailabilityRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="ParkingAvailabilityResponse" type="tns:ParkingAvailabilityResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/ParkingAvailabilityResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="NextParkingPortionRequest" type="tns:NextParkingPortionRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/NextParkingPortionRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="ParkingReservationRequest" type="tns:ParkingReservationRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/ParkingReservationRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="ParkingReservationResponse" type="tns:ParkingReservationResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/ParkingReservationResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="ParkingInfoRequest" type="tns:ParkingInfoRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/ParkingInfoRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="ParkingInfoResponse" type="tns:ParkingInfoResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/ParkingInfoResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="FlightTicketRequest" type="tns:FlightTicketRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/FlightTicketRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="FlightTicketResponse" type="tns:FlightTicketResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/FlightTicketResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="FlightDurationRequest" type="tns:FlightDurationRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/FlightDurationRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="FlightDurationResponse" type="tns:FlightDurationResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/FlightDurationResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="GetBBCategoriesRequest" type="tns:GetBBCategoriesRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/GetBBCategoriesRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="GetBBCategoriesResponse" type="tns:GetBBCategoriesResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/GetBBCategoriesResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="GetCarriersRequest" type="tns:GetCarriersRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/GetCarriersRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="GetCarriersResponse" type="tns:GetCarriersResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/GetCarriersResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="GetCurrenciesRequest" type="tns:GetCurrenciesRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/GetCurrenciesRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="GetCurrenciesResponse" type="tns:GetCurrenciesResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/GetCurrenciesResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="GetBBCategoryDataRequest" type="tns:GetBBCategoryDataRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/GetBBCategoryDataRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="GetBBCategoryDataResponse" type="tns:GetBBCategoryDataResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/GetBBCategoryDataResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="NextBBCategoryDataPortionRequest" type="tns:NextBBCategoryDataPortionRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/NextBBCategoryDataPortionRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="ValidateSessionRequest" type="tns:ValidateSessionRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/ValidateSessionRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="ValidateSessionResponse" type="tns:ValidateSessionResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/ValidateSessionResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="ClearReservationRequest" type="tns:ClearReservationRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/ClearReservationRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="ClearReservationResponse" type="tns:ClearReservationResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/ClearReservationResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="InsuranceReservationRequest" type="tns:InsuranceReservationRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/InsuranceReservationRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="InsuranceReservationResponse" type="tns:InsuranceReservationResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/InsuranceReservationResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="GetAirportsRequest" type="tns:GetAirportsRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/GetAirportsRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="GetAirportsResponse" type="tns:GetAirportsResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/GetAirportsResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="SearchSimilarFlightRequest" type="tns:SearchSimilarFlightRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/SearchSimilarFlightRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="SearchSimilarHotelRequest" type="tns:SearchSimilarHotelRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/SearchSimilarHotelRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="SearchSimilarParkingRequest" type="tns:SearchSimilarParkingRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/SearchSimilarParkingRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="SearchSimilarCarRequest" type="tns:SearchSimilarCarRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/SearchSimilarCarRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="SearchSimilarTransferRequest" type="tns:SearchSimilarTransferRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/SearchSimilarTransferRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="SearchSimilarInsuranceQuoteRequest" type="tns:SearchSimilarInsuranceQuoteRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/SearchSimilarInsuranceQuoteRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="CloneBookCodeRequest" type="tns:CloneBookCodeRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/CloneBookCodeRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="CloneBookCodeResponse" type="tns:CloneBookCodeResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/CloneBookCodeResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="GetBookCodesLifetimeRequest" type="tns:GetBookCodesLifetimeRequest">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/GetBookCodesLifetimeRequest.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="GetBookCodesLifetimeResponse" type="tns:GetBookCodesLifetimeResponse">
        <xsd:annotation>
          <xsd:documentation>
					example#1:
						/blackbox/GetBookCodesLifetimeResponse.xml
					</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:complexType name="GetAirportsRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="GetAirportsResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="Airports" type="tns:Airports" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="GetBBCategoriesRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="GetBBCategoriesResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Categories" type="tns:Categories" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="NextBBCategoryDataPortionRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="PortionsSequenceId" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Quoted from the GetBBCategoryData RS.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="WaitingPolicy" type="tns:WaitingPolicy" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Set of waiting policy criteria controlling when the BlackBox should stop collecting results. WaitingPolicy must contain only one child element.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="MaxPortionSize" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element determines maximum number of options (hotels/flights/cars/etc) that will be returned in each response.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Categories">
        <xsd:sequence>
          <xsd:element name="CategoryName" type="xsd:string" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="GetBBCategoryDataRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="CategoryName" type="xsd:string" />
          <xsd:element name="Portion" type="tns:Portion" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="GetBBCategoryDataResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="CategoryData" type="tns:CategoryData" minOccurs="0" />
          <xsd:element name="PortionsSequenceId" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>If this element is present, it specifies the next available portion ID, which can be used by the client in the "Next portion RQ" to retrieve the next set of results. If the element is absent, it means this is the last portion and no more results to gather.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="StartSessionRequest">
        <xsd:sequence>
          <xsd:element name="UserId" type="xsd:string" />
          <xsd:element name="Password" type="xsd:string" />
          <xsd:element name="LanguageCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Use ENG to specify English language.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="PublicLogon" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element is passed to Top Dog 1 Web Service. It can be used when BlackBox client is not agency but public-facing web site. Should be set to TRUE or FALSE.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="StartSessionResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>present if login is ok</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CodeAndDescription">
        <xsd:annotation>
          <xsd:documentation>Standard Code and Description element</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element name="Code" type="xsd:string" />
          <xsd:element name="Description" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Errors">
        <xsd:annotation>
          <xsd:documentation>If the element is absent, then the request is correct.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element name="Error" type="tns:Error" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Error">
        <xsd:sequence>
          <xsd:element name="SequenceNumber" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>Serial number of the error element within Errors group</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Code" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>This is code of the error</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Description" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>This is description in words of the error</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Warnings">
        <xsd:sequence>
          <xsd:element name="Warning" type="tns:Warning" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Warning">
        <xsd:sequence>
          <xsd:element name="SequenceNumber" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>Serial number of the warning element within Warnings group</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Code" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>This is code of the warning</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Description" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>This is description in words of the warning</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="EndSessionRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="EndSessionResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightAvailabilityRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Operators" type="tns:Operators" minOccurs="0" />
          <xsd:element name="RequestType" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Allowed values are "ReturnAirAvailability" or "OneWayAirAvailability". If "ReturnAirAvailability" is specified, FlDuration must contain Days sub-element with Value. If "OneWayAirAvailability" is specified, FlDuration must be empty.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="OriginLocation" type="tns:FlightOriginLocation" />
          <xsd:element name="FlDuration" type="tns:FlightDuration">
            <xsd:annotation>
              <xsd:documentation>See RequestType for details</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="TravelDateInfo" type="tns:FlightTravelDateInfo" />
          <xsd:element name="TravelPreferences" type="tns:FlightSearchPrefsType" minOccurs="0" />
          <xsd:element name="OperatorSpecificTravelPrefs" minOccurs="0">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="OperatorSpecificPref" maxOccurs="unbounded">
                  <xsd:complexType>
                    <xsd:sequence>
                      <xsd:element name="OperatorCode" type="xsd:string" />
                      <xsd:element name="TravelPreferences" type="tns:FlightSearchPrefsType">
                        <xsd:annotation>
                          <xsd:documentation>If there is TrevelPreference for specified operator in this tag, it will be used, otherwise - previous TravelPreferences from FlightAvailabilityRequest element</xsd:documentation>
                        </xsd:annotation>
                      </xsd:element>
                    </xsd:sequence>
                  </xsd:complexType>
                </xsd:element>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="TravelerInformation" type="tns:FlightTravelerInformation" />
          <xsd:element name="PriceRequestInformation" type="tns:PriceRequestInformationType" minOccurs="0" />
          <xsd:element name="SearchForLowCostInLocalDB" type="tns:BoolWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>If value true is passed, the local DB, which stores cached data, will be looked up. Flights returned from the local DB will have estimated rather than final price, which does not include taxes. In order to make sure flight is still available and to check the final price, client must send the FlightInfoRequest request. When the tag is left out or holds the value false, the search will be done directly on the airline's web site - backward compatible behaviour. The FlightInfoRequest request is not required in this case.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="AgencyReference" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This value is used by THOM only. All other suppliers accept the reference sent in the Confirmation Request.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Portion" type="tns:Portion" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>If this element is omitted, the response will be returned as soon as ALL the availability from all the requested operators is collected. When this element is present in the RQ, the response will contain only first portion of the availability. For more information see the description of PortionsSequenceId element of the availability response.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightAvailabilityResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="OmittedOperators" type="tns:OmittedOperators" minOccurs="0" />
          <xsd:element name="Available" type="tns:FlightAvailable" minOccurs="0" />
          <xsd:element name="PortionsSequenceId" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>If this element is present, it specifies the next available portion ID, which can be used by the client in the "Next portion RQ" to retrieve the next set of results. If the element is absent, it means this is the last portion and no more results to gather.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightFaresListRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Operators" type="tns:Operators" minOccurs="0" />
          <xsd:element name="OriginDestinationInformation" type="tns:OriginDestinationInformationType" />
          <xsd:element name="FaresListPreferences" type="tns:FlightFaresListPrefsType" minOccurs="0" />
          <xsd:element name="GetDetailedInfo" type="xsd:boolean" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightFaresListPrefsType">
        <xsd:sequence>
          <xsd:element name="AirlinePrefs" type="tns:AirlinePrefsType" minOccurs="0" />
          <xsd:element name="Currency" type="xsd:string" minOccurs="0" />
          <xsd:element name="TicketDate" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightFaresListResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="FlightFares" type="tns:FlightFaresList" minOccurs="0" />
          <xsd:element name="Notes" type="tns:FlightFareNotes" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightFareNotes">
        <xsd:sequence>
          <xsd:element name="Note" type="xsd:string" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightFaresList">
        <xsd:sequence>
          <xsd:element name="FlightFare" type="tns:FlightFare" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightFare">
        <xsd:sequence>
          <xsd:element name="OperatorCode" type="xsd:string" />
          <xsd:element name="Airline" type="xsd:string" />
          <xsd:element name="Routing" type="xsd:string" minOccurs="0" />
          <xsd:element name="BaseFareInfo" type="tns:FlightBaseFareInfo" />
          <xsd:element name="Restrictions" type="tns:FlightFareRestrictions" minOccurs="0" />
          <xsd:element name="AdditionalFareInfo" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightFareStayRange">
        <xsd:sequence>
          <xsd:element name="MinStay" type="xsd:string" minOccurs="0" />
          <xsd:element name="MaxStay" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightFareRestrictions">
        <xsd:sequence>
          <xsd:element name="StayRange" type="tns:FlightFareStayRange" minOccurs="0" />
          <xsd:element name="EffectiveDate" type="xsd:string" minOccurs="0" />
          <xsd:element name="ExpirationDate" type="xsd:string" minOccurs="0" />
          <xsd:element name="TicketingDate" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightBaseFareInfo">
        <xsd:sequence>
          <xsd:element name="ResBookDesigCode" type="xsd:string" />
          <xsd:element name="FareBasisCode" type="xsd:string" />
          <xsd:element name="IsPrivate" type="xsd:boolean" />
          <xsd:element name="BaseFare" type="tns:FloatWrapper" minOccurs="0" />
          <xsd:element name="Taxes" type="tns:FloatWrapper" minOccurs="0" />
          <xsd:element name="TotalFare" type="xsd:float" />
          <xsd:element name="Currency" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightSeatsAvailabilityRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="OperatorCode" type="xsd:string" />
          <xsd:element name="OriginDestinationInformation" type="tns:OriginDestinationInformationType" />
          <xsd:element name="SpecificFlights" type="tns:SpecificFlights" minOccurs="0" />
          <xsd:element name="TravelPreferenceInfo" type="tns:TravelPreferenceInfoType" minOccurs="0" />
          <xsd:element name="TravelerInformation" type="tns:TravelerInfoSummaryType" />
          <xsd:element name="IsPrivateFare" type="xsd:boolean" default="false" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Default value: false</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="SearchDepth" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Sabre specific element. Allows to specify AirAvail requests count to be sent to get more results than presented on the first Sabre native screen.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Portion" type="tns:Portion" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>If this element is omitted, the response will be returned as soon as ALL the availability from all the requested operators is collected. When this element is present in the RQ, the response will contain only first portion of the availability. For more information see the description of PortionsSequenceId element of the availability response.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SpecificFlights">
        <xsd:sequence>
          <xsd:element name="SpecificFlightInfo" type="tns:SpecificFlightInfoType" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="OriginDestinationInformationType">
        <xsd:sequence>
          <xsd:element name="DepartureDate" type="xsd:string" />
          <xsd:element name="DepartureAirport" type="xsd:string" />
          <xsd:element name="ArrivalAirport" type="xsd:string" />
          <xsd:element name="FlightDuration" type="tns:IntWrapper" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SpecificFlightInfoType">
        <xsd:sequence>
          <xsd:element name="Airline" type="xsd:string" />
          <xsd:element name="ResBookDesigCode" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TravelerInfoSummaryType">
        <xsd:sequence>
          <xsd:element name="PassengerTypeQuantity" type="tns:FlightPassengerTypeQuantity" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="PassengerTypeQuantityType">
        <xsd:sequence />
      </xsd:complexType>
      <xsd:complexType name="FlightSeatsAvailabilityResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="Available" minOccurs="0">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="Outbound" type="tns:FlightSeatsAvlSegmentsType" />
                <xsd:element name="Inbound" type="tns:FlightSeatsAvlSegmentsType" minOccurs="0" />
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="PortionsSequenceId" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>If this element is present, it specifies the next available portion ID, which can be used by the client in the "Next portion RQ" to retrieve the next set of results. If the element is absent, it means this is the last portion and no more results to gather.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightSeatsAvlSegmentType">
        <xsd:sequence>
          <xsd:element name="OperatorCode" type="xsd:string" />
          <xsd:element name="OriginCityTimeZoneCode" type="xsd:string" minOccurs="0" />
          <xsd:element name="DestinationCityTimeZoneCode" type="xsd:string" minOccurs="0" />
          <xsd:element name="TimeZoneDifferenceCode" type="xsd:string" minOccurs="0" />
          <xsd:element name="OriginDestinationOptions" type="tns:OriginDestinationOptionsType" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="OriginDestinationOptionsType">
        <xsd:sequence>
          <xsd:element name="OriginDestinationOption" type="tns:OriginDestinationOptionType" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="OriginDestinationOptionType">
        <xsd:sequence>
          <xsd:element name="FlightDetails" type="tns:FlightResponseDetails" />
          <xsd:element name="Equipment" type="tns:FlightEquipment" minOccurs="0" />
          <xsd:element name="DepartureAirport" type="xsd:string" />
          <xsd:element name="ArrivalAirport" type="xsd:string" />
          <xsd:element name="DepartureDateTime" type="xsd:string" />
          <xsd:element name="ArrivalDateTime" type="xsd:string" minOccurs="0" />
          <xsd:element name="SeatsAvailability" type="tns:SeatsAvailabilityType" />
          <xsd:element name="Ticket" type="xsd:string" minOccurs="0" />
          <xsd:element name="SmokingInd" type="tns:BoolWrapper" minOccurs="0" />
          <xsd:element name="StopQuantity" type="tns:IntWrapper" minOccurs="0" />
          <xsd:element name="Comment" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SeatsAvailabilityType">
        <xsd:sequence>
          <xsd:element name="BookingClassAvail" type="tns:BookingClassAvailType" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="BookingClassAvailType">
        <xsd:sequence>
          <xsd:element name="BookCode" type="xsd:string" />
          <xsd:element name="ResBookDesigCode" type="xsd:string" />
          <xsd:element name="AvailableSeats" type="xsd:int" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="NextFlightSeatsAvlPortionRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="PortionsSequenceId" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Quoted from the availability RS.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="KeepRequesting" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation>If set to true, the Black Box server will return this portion and in case more portions are available on operator servers, will keep requesting for these operators. If set to false, it will return availability obtained at that moment and will stop requesting for more portions.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="WaitingPolicy" type="tns:WaitingPolicy" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Set of waiting policy criteria controlling when the BlackBox should stop collecting results. WaitingPolicy must contain only one child element.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="MaxPortionSize" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element determines maximum number of options (hotels/flights/cars/etc) that will be returned in each response.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="NextFlightPortionRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="PortionsSequenceId" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Quoted from the availability RS.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="KeepRequesting" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation>If set to true, the Black Box server will return this portion and in case more portions are available on operator servers, will keep requesting for these operators. If set to false, it will return availability obtained at that moment and will stop requesting for more portions.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="WaitingPolicy" type="tns:WaitingPolicy" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Set of waiting policy criteria controlling when the BlackBox should stop collecting results. WaitingPolicy must contain only one child element.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="MaxPortionSize" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element determines maximum number of options (hotels/flights/cars/etc) that will be returned in each response.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightOriginLocation">
        <xsd:sequence>
          <xsd:element name="FlRqDepartureAirport" type="tns:FlightRequestAirport" />
          <xsd:element name="FlRqArrivalAirport" type="tns:FlightRequestAirport" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightDuration">
        <xsd:sequence>
          <xsd:element name="Days" type="tns:IntWrapper" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="IntWrapper">
        <xsd:sequence>
          <xsd:element name="Value" type="xsd:int" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="BoolWrapper">
        <xsd:sequence>
          <xsd:element name="Value" type="xsd:boolean" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightTravelDateInfo">
        <xsd:sequence>
          <xsd:element name="TravelDate" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Format: YYYY-MM-DD</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="DateVariance" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Allows +/- number of days from requested date</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightTravelerInformation">
        <xsd:sequence>
          <xsd:element name="PassengerTypeQuantity" type="tns:FlightPassengerTypeQuantity" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Operators">
        <xsd:sequence>
          <xsd:element name="OperatorCode" type="xsd:string" maxOccurs="unbounded">
            <xsd:annotation>
              <xsd:documentation>Format for supplierID: 'ID:1234'</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightRequestAirport">
        <xsd:sequence>
          <xsd:element name="Code" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Standard IATA codes should be used for the airports.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightPassengerTypeQuantity">
        <xsd:sequence>
          <xsd:element name="PersonAgeCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Allowed values: A= Adult, C = Child, I = Infant.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Quantity" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>Number of passengers of specified type</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="PersonAges" type="tns:PersonAgesType" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Array of ages for passengers. Array length must be equal to the passenger Quantity.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="OmittedOperators">
        <xsd:annotation>
          <xsd:documentation>List of operators, for which was not possible to construct the RQ.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element name="OmittedOperator" type="tns:OmittedOperator" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="OmittedOperator">
        <xsd:sequence>
          <xsd:element name="OperatorCode" type="xsd:string" />
          <xsd:element name="LackingData" type="tns:OmittedParameters" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>List of parameters, which are required for this operator but are not specified in the RQ</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="SuperfluousData" type="tns:OmittedParameters" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>List of parameters, which are prohibited for this operator but were specified in the RQ</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="OmittedParameters">
        <xsd:sequence>
          <xsd:element name="ParameterName" type="xsd:string" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightAvailable">
        <xsd:sequence>
          <xsd:element name="FlAvFlightSegment" type="tns:FlightAvailabilitySegment" maxOccurs="unbounded">
            <xsd:annotation>
              <xsd:documentation>Each segment represents one full journey: outbound flight (possibly multi-leg) and optional inbound flight.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightAvailabilitySegment">
        <xsd:sequence>
          <xsd:element name="OperatorCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>
								Operator returned this segment
							</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="OriginalOperatorCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Original operator code returned by the TDWS-based operator.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="DataSource" type="tns:DataSourceType" minOccurs="0" />
          <xsd:element name="Route" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Journey route in the format YYYZZZ, where YYY is the 3-character IATA code of the departure airport and ZZZ is the 3-character IATA code of the arrival airport.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Nights" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Number of nights a customer stays at the destination. This value is present if this request is for a return flight. The BlackBox does not calculate this value; this is only present if the operator provides it.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FlAvOriginDestinationOBs" type="tns:FlightAvailabilityOriginDestinations">
            <xsd:annotation>
              <xsd:documentation>
								Segment always contains at least 1
								outbound flight.
							</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FlAvOriginDestinationIBs" type="tns:FlightAvailabilityOriginDestinations" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>
								This tag is present in case of return
								journey.
							</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FareData" type="tns:FlightFareData" />
          <xsd:element name="ETicketFormOfIdentification" type="tns:FlightETicketFormOfIdentification" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This tag is returned in the FlightInfoResponse when airline requires identification for eTicket</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="SupplierID" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>
								Supplier ID returned by TDWS-based
								operator.
							</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="PlatingAirline" type="tns:PlatingAirlineType" minOccurs="0" />
          <xsd:element name="OBFlightDuration" type="xsd:string" minOccurs="0" />
          <xsd:element name="IBFlightDuration" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightAvailabilityOriginDestinations">
        <xsd:sequence>
          <xsd:element name="FlAvOriginDestination" type="tns:FlightAvailabilityOriginDestination" maxOccurs="unbounded">
            <xsd:annotation>
              <xsd:documentation>There could be more than one element in the array. The reason for the multiple elements is "via flight" with one or more connection airports.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightAvailabilityOriginDestination">
        <xsd:sequence>
          <xsd:element name="FlightDetails" type="tns:FlightResponseDetails" minOccurs="0" />
          <xsd:element name="SmokingInd" type="tns:BoolWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>
								A true value means smoking is allowed,
								false or no value means smoking is not
								allowed on the flight.
							</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="RsDepartureAirport" type="tns:ResponseAirport" />
          <xsd:element name="RsArrivalAirport" type="tns:ResponseAirport" />
          <xsd:element name="DepartureDateTime" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>
								Format: YYYY-MM-DDTHH:MM:SS or
								YYYY-MM-DD
							</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="RsDepartureAirportTimeZone" type="xsd:string" minOccurs="0" />
          <xsd:element name="ArrivalDateTime" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>
								Format: YYYY-MM-DDTHH:MM:SS or
								YYYY-MM-DD
							</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="RsArrivalAirportTimeZone" type="xsd:string" minOccurs="0" />
          <xsd:element name="FlAvCabins" type="tns:FlightAvailabilityCabins" />
          <xsd:element name="Equipment" type="tns:FlightEquipment" minOccurs="0" />
          <xsd:element name="EnRouteStops" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>
								Number of stops en route
							</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="IntermediatePointsInfo" type="tns:IntermediatePointsInfoType" minOccurs="0" />
          <xsd:element name="FlightNotes" type="tns:FlightNotes" minOccurs="0" />
          <xsd:element name="Timestamp" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>
								This tag is present when cached data are
								returned. It specifies date/time when
								information was cached. Format:
								YYYY-MM-DDTHH:MM:SS
							</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ETicketEligibility" type="tns:ETicketEligibilityType" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>
								E-Ticket eligibility indicator
							</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Duration" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightAvailabilityCabins">
        <xsd:sequence>
          <xsd:element name="FlAvCabin" type="tns:FlightAvailabilityCabin" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FloatWrapper">
        <xsd:sequence>
          <xsd:element name="Value" type="xsd:float" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightFareDetailsList">
        <xsd:sequence>
          <xsd:element name="Details" type="tns:FlightFareDetails" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightResponseDetails">
        <xsd:sequence>
          <xsd:element name="FlightNumber" type="xsd:string" minOccurs="0" />
          <xsd:element name="CarrierCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>IATA Carrier Code</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CarrierName" type="xsd:string" minOccurs="0" />
          <xsd:element name="MarketingAirlineCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This is present in case of code sharing: when the operating airline (carrier) is not the same as marketing airline.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="MarketingAirlineName" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ResponseAirport">
        <xsd:sequence>
          <xsd:element name="Code" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>3 Character IATA Airport code.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Description" type="xsd:string" minOccurs="0" />
          <xsd:element name="Country" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightAvailabilityCabin">
        <xsd:sequence>
          <xsd:element name="BookCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Book code to be used in the reservation and the confirmation RQs.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CabinType" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Cabin type, for example "Economy"</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Availability" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Number of available seats on this flight for this class.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="AvailabilityIndicator" type="tns:AvailabilityIndicatorType" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Possible values: Direct Connect - in this case request sends to operator to check availability, Cache - availability not checked</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ResBookDesigCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Booking class</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FareBaseCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Fare base code</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightEquipment">
        <xsd:sequence>
          <xsd:element name="AirEquipType" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Represents the equipment type of the aircraft</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="AirEquipDescription" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Represents description of the equipment type provided by the supplier. Here are a few examples: 'Boeing 747', 'Airbus A320'</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightPricingNotes">
        <xsd:sequence>
          <xsd:element name="Notes" type="xsd:string" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightFareDetails">
        <xsd:sequence>
          <xsd:element name="PersonAgeCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Possible values: A= Adult, C = Child, I = Infant.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="MinAge" type="tns:IntWrapper" minOccurs="0" />
          <xsd:element name="MaxAge" type="tns:IntWrapper" minOccurs="0" />
          <xsd:element name="Quantity" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Number of Passengers this applies to</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Each" type="tns:FloatWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Price for one person of given type including taxes</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="EachTax" type="tns:FloatWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Taxes for one person of given type</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="TotalFare" type="tns:FloatWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Total price for all the passengers of given types including taxes</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightReservationRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="BookCodes" type="tns:BookCodes" />
          <xsd:element name="Passengers" type="tns:Passengers">
            <xsd:annotation>
              <xsd:documentation>Number of passengers of each type (adult, child, infant) must be the same as in the availability search.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="SupplementsRequired" type="tns:SupplementsRequired" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SupplementsRequired">
        <xsd:annotation>
          <xsd:documentation>Fligth supplements must be passed to BlackBox in reservation RQ.
					Hotel supplement must be passed to BlackBox in confirmation RQ. 
					Avro/Cosmos does not allow to request supplement for individual passenger: 
					supplement is either not requested or is requested for all passengers. 
					Hence Avro/Cosmos supplements must NOT appear is passenger-specific supplements, 
					but in general booking supplements.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element name="SupplementRequired" type="tns:SupplementRequired" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SupplementRequired">
        <xsd:sequence>
          <xsd:element name="Code" type="xsd:string" />
          <xsd:element name="PaxType" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightSpecialServices">
        <xsd:sequence>
          <xsd:element name="FlightSpecialService" type="tns:FlightSpecialService" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightSpecialService">
        <xsd:sequence>
          <xsd:element name="Code" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>This value denotes the code of the FlightSpecialService request</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CarrierCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>"CarrierCode" is only applicable to the "OSI" FlightSpecialServiceCode, and represents the airline that the request needs to be sent to.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FreeTextInfo" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This field is used to pass in miscellaneous free text information.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="PassengerNumber" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This tag is used to represent a passenger's name number. For example: 1.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="OriginDestinationNumber" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>"OriginDestinationNumber" is used to represent a segment for "via flight" with one or more connection airports.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightReservationResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="Reserved" type="tns:FlightReservationResponseSegment" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element is mutually exclusive with Errors: reservation either succeeded (Reserved tag is present, Errors is absent) or failed (Reserved is absent, Errors is present)</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="BookCodes">
        <xsd:sequence>
          <xsd:element name="BookCode" type="xsd:string" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RailRsvItineraryLegs">
        <xsd:sequence>
          <xsd:element name="RailRsvItineraryLeg" type="tns:RailRsvItineraryLeg" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RailRsvItineraryLeg">
        <xsd:sequence>
          <xsd:element name="BookCode" type="xsd:string" />
          <xsd:element name="SeatClassCode" type="xsd:string" />
          <xsd:element name="NearTo" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This value specifies the number of a reserved seat near to which a seat allocation is required</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Coach" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This value specifies the number of a coach in which a seat allocation is required</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="SpecialServices" type="tns:RailSpecialServices" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element lists available special services, which may be provided for a particular passenger, e.g. "vegetarian meals" or "meet and assist passenger", etc.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightReservationResponseSegment">
        <xsd:sequence>
          <xsd:element name="OperatorCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Operator returned this segment</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="OriginalOperatorCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Original operator code returned by the TDWS-based operator.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FlRvOriginDestinationOBs" type="tns:FlightReservationOriginDestinations">
            <xsd:annotation>
              <xsd:documentation>Segment always contains at least 1 outbound flight.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FlRvOriginDestinationIBs" type="tns:FlightReservationOriginDestinations" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Segment always contains at least 1 outbound flight.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FlightFareData" type="tns:FlightFareData" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightFareData">
        <xsd:sequence>
          <xsd:element name="TotalFare" type="tns:FloatWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Total fare of the booking including taxes and NOT including supplements</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="TotalTax" type="tns:FloatWrapper" minOccurs="0" />
          <xsd:element name="TotalPrice" type="tns:FloatWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Total fare of the booking including all taxes and mandatory supplements</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="PricingNotes" type="tns:FlightPricingNotes" minOccurs="0" />
          <xsd:element name="IsNettPrice" type="tns:BoolWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Nett price indicator.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FareDetails" type="tns:FlightFareDetailsList" minOccurs="0" />
          <xsd:element name="FlightRsSupplements" type="tns:FlightRsSupplementsList" minOccurs="0" />
          <xsd:element name="CreditCardFees" type="tns:CreditCardFees" minOccurs="0" />
          <xsd:element name="CurrencyCode" type="xsd:string" />
          <xsd:element name="IsCommissionable" type="tns:BoolWrapper" minOccurs="0" />
          <xsd:element name="CommissionType" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Is present in case operator returns it. Value can be one of: "%" or "flat".</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CommissionRate" type="tns:FloatWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Is present in case operator returns it (TDWS does). Meaning of this value depends on the commission type.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="PrivateFare" type="tns:BoolWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Private fare indicator.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="LastTicketingDate" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Last day to purchase </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightRsSupplementsList">
        <xsd:sequence>
          <xsd:element name="FlightRsSupplement" type="tns:FlightRsSupplementType" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightRsSupplementType">
        <xsd:sequence>
          <xsd:element name="Code" type="xsd:string" />
          <xsd:element name="Description" type="xsd:string" />
          <xsd:element name="Total" type="tns:FloatWrapper" minOccurs="0" />
          <xsd:element name="TotalCost" type="tns:FloatWrapper" minOccurs="0" />
          <xsd:element name="CurrencyCode" type="xsd:string" />
          <xsd:element name="Mandatory" type="xsd:boolean" />
          <xsd:element name="PriceBasis" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Price basis. "B" = Per booking, "P" = Per passenger.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Rules" type="tns:SupplementRules" minOccurs="0" />
          <xsd:element name="Commissionable" type="xsd:boolean" />
          <xsd:element name="SupplementDetailsList" type="tns:SupplementDetailsList" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightReservationOriginDestinations">
        <xsd:sequence>
          <xsd:element name="FlRvOriginDestination" type="tns:FlightReservationOriginDestination" maxOccurs="unbounded">
            <xsd:annotation>
              <xsd:documentation>There could be more than one element in the array. The reason for the multiple elements is "via flight" with one or more connection airports.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightReservationOriginDestination">
        <xsd:sequence>
          <xsd:element name="FlightDetails" type="tns:FlightResponseDetails" minOccurs="0" />
          <xsd:element name="RsDepartureAirport" type="tns:ResponseAirport" />
          <xsd:element name="RsArrivalAirport" type="tns:ResponseAirport" />
          <xsd:element name="DepartureDateTime" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Format: YYYY-MM-DDTHH:MM:SS or YYYY-MM-DD</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="RsDepartureAirportTimeZone" type="xsd:string" minOccurs="0" />
          <xsd:element name="ArrivalDateTime" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Format: YYYY-MM-DDTHH:MM:SS or YYYY-MM-DD</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="RsArrivalAirportTimeZone" type="xsd:string" minOccurs="0" />
          <xsd:element name="FlRvCabins" type="tns:FlightReservationCabins" />
          <xsd:element name="Equipment" type="tns:FlightEquipment" minOccurs="0" />
          <xsd:element name="FlightNotes" type="tns:FlightNotes" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightReservationCabins">
        <xsd:sequence>
          <xsd:element name="FlRvCabin" type="tns:FlightReservationCabin" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightReservationCabin">
        <xsd:sequence>
          <xsd:element name="BookCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Book code to be used in the confirmation RQ.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Seats" type="tns:IntWrapper" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightPaymentDetails">
        <xsd:sequence>
          <xsd:element name="CardDetailes" type="tns:FlightCardDetailes" minOccurs="0" />
          <xsd:element name="PassAddress" type="tns:FlightPassAddress" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Overrides AgencyAddress in case of CC FOP</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ContactDetails" type="tns:ContactDetails" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Each tag inside this element overrides relevant tag from AgencyContactDetails in case of CC FOP</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="VoucherDetails" type="tns:VoucherDetails" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Details of a paper or electronic document indicating prepayment (applicable to AVIS)</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="VoucherDetails">
        <xsd:sequence>
          <xsd:element name="Identifier" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Unique identifier of the electronic voucher (applicable to AVIS)</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightPassAddress">
        <xsd:sequence>
          <xsd:element name="AddressLine1" type="xsd:string" />
          <xsd:element name="AddressLine2" type="xsd:string" />
          <xsd:element name="Town" type="xsd:string" minOccurs="0" />
          <xsd:element name="County" type="xsd:string" minOccurs="0" />
          <xsd:element name="PostalCode" type="xsd:string" minOccurs="0" />
          <xsd:element name="CountryCode" type="xsd:string" minOccurs="0" />
          <xsd:element name="EmailAddress" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ContactDetails">
        <xsd:sequence>
          <xsd:element name="PhoneNumber" type="xsd:string" minOccurs="0" />
          <xsd:element name="MobileNumber" type="xsd:string" minOccurs="0" />
          <xsd:element name="FaxNumber" type="xsd:string" minOccurs="0" />
          <xsd:element name="EmailAddress" type="xsd:string" minOccurs="0" />
          <xsd:element name="MediaCode" type="xsd:string" minOccurs="0" />
          <xsd:element name="BookedBy" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightCardDetailes">
        <xsd:sequence>
          <xsd:element name="CardNumber" type="xsd:string" minOccurs="0" />
          <xsd:element name="EffectiveDate" type="xsd:string" minOccurs="0" />
          <xsd:element name="ExpireDate" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Format: MMYY</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="IssueNumber" type="xsd:string" minOccurs="0" />
          <xsd:element name="CardHolderName" type="xsd:string" minOccurs="0" />
          <xsd:element name="CardSecurityNumber" type="xsd:string" minOccurs="0" />
          <xsd:element name="CardType" type="xsd:string" minOccurs="0" />
          <xsd:element name="IssueBankCountry" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>The 2 character country code of the bank issued the credit card.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="IssueBankName" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>The name of the bank that has issued the credit card</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Password" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightBookingReferenceId">
        <xsd:sequence>
          <xsd:element name="Type" type="xsd:string" minOccurs="0" />
          <xsd:element name="Id" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightInfoRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="BookCodes" type="tns:BookCodes" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>To get detailed information about a particular flight, pass the book codes returned in the availability response. Code of any cabin type can be used to identify the flight, which this cabin belongs to. If the search was for a “one-way” trip, only one book code should be passed (outbound flight). If the search was for a “return” trip, two codes should be passed (one is for outbound flight, another is for inbound)</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="TravelerInformation" type="tns:FlightTravelerInformation">
            <xsd:annotation>
              <xsd:documentation>This information should be exactly the same as in the availability RQ.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ExcludeFareRules" type="xsd:boolean" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>If this flag is absent or set to false fare rules will be requested, otherwise - will not.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Itinerary" type="tns:ItineraryType" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Either BookCodes or Itinerary must be set</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightInfoResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="FlightDetailedInfo" type="tns:FlightAvailabilitySegment" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element is mutually exclusive with Errors: processing either succeeded (FlightDetailedInfo tag is present, Errors is absent) or failed (FlightDetailedInfo is absent, Errors is  present)</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SupplementDetailsList">
        <xsd:sequence>
          <xsd:element name="SupplementDetails" type="tns:SupplementDetailsType" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SupplementDetailsType">
        <xsd:sequence>
          <xsd:element name="PersonAgeCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>"A"=Adult,"C"=Child, "I"= Infant</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Quantity" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Number of passengers of this type the supplement applies to.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Each" type="tns:FloatWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Price per person </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Total" type="tns:FloatWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Total price for this passenger type</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Cost" type="tns:FloatWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Cost per person </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SupplementRules">
        <xsd:sequence>
          <xsd:element name="NotValidWith" type="xsd:string" maxOccurs="unbounded">
            <xsd:annotation>
              <xsd:documentation>Supplement code that cannot be used in combination with this supplement.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelAvailabilityRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Operators" type="tns:Operators" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>If not present, then request must be sent to all operators, otherwise sent to enumerated operators only.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="StayDateRange" type="tns:HotelStayDateRange" />
          <xsd:element name="RoomStayCandidate" type="tns:HotelRoomStayCandidate" />
          <xsd:element name="HotelSearchCriterion" type="tns:HotelSearchCriterion" />
          <xsd:element name="Contract" type="xsd:string" minOccurs="0" />
          <xsd:element name="PromotionCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This field is used by RCI module. If specified will provide discounts to availability prices for certain locations and certain dates.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="OperSpecificHotelPrefs" type="tns:OperatorSpecificHotelPrefs" minOccurs="0" />
          <xsd:element name="Portion" type="tns:Portion" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>If this element is omitted, the response will be returned as soon as ALL the availability from all the requested operators is collected. When this element is present in the RQ, the response will contain only first portion of the availability. For more information see the description of PortionsSequenceId element of the availability response.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CalculateCombinedFlightAccomPrice" type="tns:FlightToCombineAccomWith" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This value is forwarded to TDWS-based operators.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RailAvailabilityRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Operators" type="tns:Operators" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>If not present, then request must be sent to all operators, otherwise sent to enumerated operators only.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="DepartureLocation" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Departure train station code</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ArrivalLocation" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Arrival train station code</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="OutwardJourney" type="tns:TrainDepartureCriteria">
            <xsd:annotation>
              <xsd:documentation>This element discribes outward train journey from departure location to arrival location.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ReturnJourney" type="tns:TrainDepartureCriteria" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element describes the return train journey from the arrival location to the departure location. If this element is specified then a return journey is required.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Portion" type="tns:Portion" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>If this element is omitted, the response will be returned as soon as ALL the availability from all the requested operators is collected. When this element is present in the RQ, the response will contain only first portion of the availability. For more information see the description of PortionsSequenceId element of the availability response.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TrainDepartureCriteria">
        <xsd:sequence>
          <xsd:element name="DepartureDate" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Date format: YYYY-MM-DD</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="DepartureTime" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Time format: HH-MM</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ArrivalTime" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Time format: HH-MM</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="SeatClassCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This is the (optional) class of seat. Refer to the BlackBox list of rail SeatClassCode's</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RailAvailabilityResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="OutwardItineraries" type="tns:RailItineraries" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element contains the list of rail itineraries that fit the requested outward journey criteria. If it is not present in the response it means that no trains matching the specified criteria had been found.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ReturnItineraries" type="tns:RailItineraries" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element contains the list of rail itineraries that fit the requested return criteria. If it is not present in the response it means that no trains matching the specified criteria had been found.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="OmittedOperators" type="tns:OmittedOperators" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>List of operators, for which was not possible to construct the RQ.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="PortionsSequenceId" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>If this element is present, it specifies the next available portion ID, which can be used by the client in the "Next portion RQ" to retrieve the next set of results. If the element is absent, it means this is the last portion and no more results to gather.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RailItineraries">
        <xsd:sequence>
          <xsd:element name="Itinerary" type="tns:RailAvailableItinerary" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RailAvailableItinerary">
        <xsd:sequence>
          <xsd:element name="ItineraryLegs" type="tns:RailItineraryLegs" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RailItineraryLeg">
        <xsd:sequence>
          <xsd:element name="SequenceLegId" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>Sequence number of this leg within the itinerary.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="OperatorCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Code of the operator which provides this leg</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="BookCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Booking code which can be used to identify this leg among all other booking variants within the BlackBox response.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="SequenceId" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>Sequence number of this itinerary within the journey. This corresponds to the itinerary code passed in the RailAvailabilityRequest.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="TrainDeparture" type="tns:TrainWaypoint" />
          <xsd:element name="TrainArrival" type="tns:TrainWaypoint" />
          <xsd:element name="ClassDetails" type="tns:ClassDetails" maxOccurs="unbounded">
            <xsd:annotation>
              <xsd:documentation>This tag holds info on the seat class availability.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="TrainDetails" type="tns:TrainDetails">
            <xsd:annotation>
              <xsd:documentation>This tag holds information on the train class, provider company, number of stops and other textual descriptions.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ClassDetails">
        <xsd:sequence>
          <xsd:element name="SeatClass" type="tns:CodeAndDescription">
            <xsd:annotation>
              <xsd:documentation>Class of seat</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="NumberOfSeatsAvailable" type="xsd:int" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>(Optional) number of free seats available for this particular train</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TrainDetails">
        <xsd:sequence>
          <xsd:element name="Name" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>The name or number of the train</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Description" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>(Optional) description of this train or its properties.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CompanyCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>(Optional) identifier of the train company</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="TrainType" type="tns:CodeAndDescription">
            <xsd:annotation>
              <xsd:documentation>Code indicating the type of train</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="NumberOfStops" type="xsd:int" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Total number of stops on the route if available</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TrainWaypoint">
        <xsd:sequence>
          <xsd:element name="DateTime" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Format: YYYY-MM-DDTHH:MM:SS</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Location" type="tns:CodeAndDescription">
            <xsd:annotation>
              <xsd:documentation>Rail station code</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RailAvailabilityParty">
        <xsd:sequence>
          <xsd:element name="RailAvailabilityPassengers" type="tns:RailAvailabilityPassengers" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RailAvailabilityPassengers">
        <xsd:sequence>
          <xsd:element name="RailAvailabilityPassenger" type="tns:RailAvailabilityPassenger" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RailAvailabilityPassenger">
        <xsd:sequence>
          <xsd:element name="PassengerRecordNumber" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>This element uniquely identifies a passenger among other group members. Number 1 means that this is the lead passenger</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FirstName" type="xsd:string" minOccurs="0" />
          <xsd:element name="Surname" type="xsd:string" />
          <xsd:element name="Age" type="tns:IntWrapper" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="NextRailPortionRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="PortionsSequenceId" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Quoted from the availability RS.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="KeepRequesting" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation>If set to true, the Black Box server will return this portion and in case more portions are available on operator servers, will keep requesting for these operators. If set to false, it will return availability obtained at that moment and will stop requesting for more portions.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="WaitingPolicy" type="tns:WaitingPolicy" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Set of waiting policy criteria controlling when the BlackBox should stop collecting results. WaitingPolicy must contain only one child element.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="MaxPortionSize" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element determines maximum number of options (hotels/flights/cars/etc) that will be returned in each response.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RailReservationRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="AgencyReference" type="xsd:string" />
          <xsd:element name="RailRsvItineraries" type="tns:RailRsvItinerariesType" />
          <xsd:element name="ReservationPasengers" type="tns:RailReservationPassengers" />
          <xsd:element name="ReservationComments" type="tns:ReservationComments" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>These comments will be sent together with in request to the operator. These may include special remarks about the party and the like.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ReservationComments">
        <xsd:sequence>
          <xsd:element name="ReservationComment" type="tns:ReservationComment" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ReservationComment">
        <xsd:sequence>
          <xsd:element name="Subject" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Free text subject of the comment.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Description" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Human readable description of the comment.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RailReservationPassengers">
        <xsd:sequence>
          <xsd:element name="RailRsvPassenger" type="tns:RailReservationPassenger" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RailReservationPassenger">
        <xsd:sequence>
          <xsd:element name="PassengerRecordNumber" type="xsd:int" />
          <xsd:element name="Title" type="xsd:string" />
          <xsd:element name="FirstName" type="xsd:string" />
          <xsd:element name="Surname" type="xsd:string" />
          <xsd:element name="PassengerStatusCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This code determines the status of the passenger in terms of pricing, e.g. this is a full paying adult or a child, etc. Refer to the BlackBox list of passenger status codes</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="PassengerPreferences" type="tns:RailPassengerPreferences" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>These are (optional) preferences for the current passenger. These include seating, smoking and other preferences, as well as any additional services provided in the corresponding service code list.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RailPassengerPreferences">
        <xsd:sequence>
          <xsd:element name="SeatingPositionCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This code specifies passenger's seating preference, values may differ from operator to operator</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="SmokingAttitudeCode" type="tns:SmokingAttitudeCode" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This code specifies passenger's smoking attitude: smoker, nonsmoker, dontmind.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="SpaceTypeCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This code determines the type of space this passenger requires, such as a wheelchair compartment, etc.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RailSpecialServices">
        <xsd:sequence>
          <xsd:element name="SpecialService" type="tns:RailSpecialService" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RailSpecialService">
        <xsd:sequence>
          <xsd:element name="PassengerReference" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>Reference to the passenger, who requests special services.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ServiceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>See the list of BlackBox train service codes</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ServiceDescription" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>(Optional) free text description of the requested service</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RailReservationResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="RsReservation" type="tns:RailReservedRs" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element is present if reservation was successful. It contains legs that were reserved, with prices and details on reserved seats</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RailReservedRs">
        <xsd:sequence>
          <xsd:element name="Itineraries" type="tns:RailReservedItineraries" />
          <xsd:element name="PaymentDetails" type="tns:TrainPaymentDetails">
            <xsd:annotation>
              <xsd:documentation>This element contains the price for the current leg.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Comments" type="tns:ReservationComments" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This tag may contain (optional) comments on the journey, which are returned by the operator</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="TrainSupplements" type="tns:FlightRsSupplementsList" minOccurs="0" />
          <xsd:element name="ReservationReference" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element may contain (optional) reservation reference for the journey, which may later be used for booking confirmation</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RailReservedItineraryLegs">
        <xsd:sequence>
          <xsd:element name="ItineraryLeg" type="tns:RailReservedItineraryLeg" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RailReservedItineraryLeg">
        <xsd:sequence>
          <xsd:element name="SequenceId" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>Sequence number of this leg within the journey</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="BookCode" type="xsd:string" />
          <xsd:element name="TrainDeparture" type="tns:TrainWaypoint" />
          <xsd:element name="TrainArrival" type="tns:TrainWaypoint" />
          <xsd:element name="TrainDetails" type="tns:TrainDetails" />
          <xsd:element name="ReservedSeats" type="tns:TrainReservedSeats">
            <xsd:annotation>
              <xsd:documentation>This element contains details on reserved seats - number, coach, etc.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="SpecialServices" type="tns:TrainReservedServices" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element may contain special services that will be reserved for this leg, if they were specified in reservation request</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RailRsvItineraryType">
        <xsd:sequence>
          <xsd:element name="RailRsvItineraryLegs" type="tns:RailRsvItineraryLegs" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RailRsvItinerariesType">
        <xsd:sequence>
          <xsd:element name="RailRsvItinerary" type="tns:RailRsvItineraryType" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RailReservedItinerary">
        <xsd:sequence>
          <xsd:element name="ItineraryLegs" type="tns:RailReservedItineraryLegs" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RailReservedItineraries">
        <xsd:sequence>
          <xsd:element name="Itinerary" type="tns:RailReservedItinerary" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RailItineraryLegs">
        <xsd:sequence>
          <xsd:element name="ItineraryLeg" type="tns:RailItineraryLeg" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TrainPaymentDetails">
        <xsd:sequence>
          <xsd:element name="TotalPrice" type="xsd:float">
            <xsd:annotation>
              <xsd:documentation>Total price for this leg</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CurrencyCode" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TrainReservedServices">
        <xsd:sequence>
          <xsd:element name="SpecialService" type="tns:TrainReservedService" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TrainReservedService">
        <xsd:sequence>
          <xsd:element name="Service" type="tns:CodeAndDescription">
            <xsd:annotation>
              <xsd:documentation>One of the special services that can be found in the BlackBox list of additional services.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Quantity" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>Total number of special services of this type that will be reserved for the current leg.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TrainReservedSeats">
        <xsd:sequence>
          <xsd:element name="TrainReservedSeat" type="tns:TrainReservedSeat" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TrainReservedSeat">
        <xsd:sequence>
          <xsd:element name="Number" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>This is the number of seat within a coach</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Coach" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>This number is the number of coaches in a train.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="SeatingPosition" type="tns:CodeAndDescription" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>See description in the RailReservationRequest</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="SmokingAttitudeCode" type="tns:SmokingAttitudeCode" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>See description in the RailReservationRequest</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="SpaceType" type="tns:CodeAndDescription" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>See description in the RailReservationRequest</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="NextFerryPortionRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="PortionsSequenceId" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Quoted from the availability RS.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="KeepRequesting" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation>If set to true, the Black Box server will return this portion and in case more portions are available on operator servers, will keep requesting for these operators. If set to false, it will return availability obtained at that moment and will stop requesting for more portions.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="WaitingPolicy" type="tns:WaitingPolicy" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Set of waiting policy criteria controlling when the BlackBox should stop collecting results. WaitingPolicy must contain only one child element.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="MaxPortionSize" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element determines maximum number of options (hotels/flights/cars/etc) that will be returned in each response.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryReservationRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="FerryRsvPassengers" type="tns:FerryRsvPassengers">
            <xsd:annotation>
              <xsd:documentation>List of all passengers. Itinerary element defines distribution of the passengers</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FerryRsvItinerariesRq" type="tns:FerryRsvItinerariesRq">
            <xsd:annotation>
              <xsd:documentation>Distribute passengers among Itineraries</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Quotation" type="tns:QuotationType" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryRsvItineraryPassengers">
        <xsd:sequence>
          <xsd:element name="FerryRsvItineraryPassenger" type="tns:FerryRsvItineraryPassenger" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryRsvItineraryPassenger">
        <xsd:sequence>
          <xsd:element name="PassengerRecordNumber" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>Refer to the passenger in the ReservationPassengers > Passengers array</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="AccommodationBookCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>BookCode of Accommodation passengers are to be placed in. If missed - then the passenger travels without taking an accommodation</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CabinRecordNumber" type="xsd:int" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>If accommodation details type is cabin and some passengers wants to book one complete cabin together they must specify the same value.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryRsvPassengers">
        <xsd:sequence>
          <xsd:element name="FerryRsvPassenger" type="tns:FerryRsvPassenger" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryRsvPassenger">
        <xsd:sequence>
          <xsd:element name="PassengerRecordNumber" type="xsd:int" />
          <xsd:element name="Title" type="xsd:string" />
          <xsd:element name="FirstName" type="xsd:string" />
          <xsd:element name="Surname" type="xsd:string" />
          <xsd:element name="TypeCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>This type determines the status of the passenger in terms of pricing, e.g. this is a full paying adult or a child or a Senior Citizen, etc. Refer to the BlackBox list of passenger status codes</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="SexCode" type="tns:SexCode">
            <xsd:annotation>
              <xsd:documentation>Required by some suppliers. Either 'M', 'F' or 'U'</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FerryPassengerPreferences" type="tns:FerryPassengerPreferences" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>These are (optional) preferences for the current passenger.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryPassengerPreferences">
        <xsd:sequence>
          <xsd:element name="FerryPassengerPreference" type="tns:FerryPassengerPreference" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerrySpecialServices" />
      <xsd:complexType name="FerryPassengerPreference">
        <xsd:sequence>
          <xsd:element name="PreferenceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>DEPRECATED</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Description" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>(Optional) free text description</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryReservationResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="FerryRsvReserved" type="tns:FerryRsvReserved" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element is present if the reservation was successful. It contains legs that were reserved with prices and details on reserved seats.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryArrivalPoint">
        <xsd:sequence>
          <xsd:element name="DateTime" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Timetable Date-time in format: YYYY-MM-DDTHH:MM:SS. </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Location" type="tns:HotelLocation">
            <xsd:annotation>
              <xsd:documentation>Ferry station code</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryDeparturePoint">
        <xsd:sequence>
          <xsd:element name="DateTime" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Timetable Date-time in format: YYYY-MM-DDTHH:MM:SS</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Location" type="tns:HotelLocation">
            <xsd:annotation>
              <xsd:documentation>Ferry station code</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryPaymentDetails">
        <xsd:sequence>
          <xsd:element name="TotalPrice" type="xsd:float">
            <xsd:annotation>
              <xsd:documentation>Total price for this leg</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CurrencyCode" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryAccommodationRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="SearchCriteria" type="tns:FerryAccommodationSearchCriteria">
            <xsd:annotation>
              <xsd:documentation>A single ferry journey may be comprised of several ferry itineraries. This tag contains the array of ferry itineraries to be booked.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryAccommodationSearchCriteria">
        <xsd:sequence>
          <xsd:element name="ItineraryBookCode" type="xsd:string" maxOccurs="unbounded">
            <xsd:annotation>
              <xsd:documentation>This tag specifies a list of itineraries by their bookCodes. All bookCodes must belong to the same Operator</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryTimetableRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Operators" type="tns:Operators" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>If not present, then request must be sent to all operators, otherwise sent to enumerated operators only.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FerryTTableSearchCriteria" type="tns:FerryTimetableSearchCriteria">
            <xsd:annotation>
              <xsd:documentation>A single ferry journey may be comprised of several ferry itineraries. This tag contains the array of ferry itineraries to be booked. </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Portion" type="tns:Portion" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>If this element is omitted, the response will be returned as soon as ALL the availability from all the requested operators is collected. When this element is present in the RQ, the response will contain only first portion of the availability. For more information see the description of PortionsSequenceId element of the availability response.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryTimetableSearchCriteria">
        <xsd:sequence>
          <xsd:element name="FerryTTableItineraryCriteria" type="tns:FerryTTableItineraryCriteria" maxOccurs="unbounded">
            <xsd:annotation>
              <xsd:documentation>This tag specifies  the date and approx. time of departure, and also the departure and arrival stations for each Itinerary</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryTTableItineraryCriteria">
        <xsd:sequence>
          <xsd:element name="DepartureCriteria" type="tns:FerryDepartureCriteria" />
          <xsd:element name="ArrivalCriteria" type="tns:FerryArrivalCriteria" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryArrivalCriteria">
        <xsd:sequence>
          <xsd:element name="Location" type="tns:HotelLocation">
            <xsd:annotation>
              <xsd:documentation>Arrival port code</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryDepartureCriteria">
        <xsd:sequence>
          <xsd:element name="DateTime" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>approximate date and time of departure in format: YYYY-MM-DDTHH:MM:SS</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Location" type="tns:HotelLocation">
            <xsd:annotation>
              <xsd:documentation>Departure port code</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryAccommodationResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="FerryAccomItineraries" type="tns:FerryAccommodationItineraries" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element contains the list of ferry accommodations that fit the requested criteria. Itineraries are returned in the same order as they are in request. If it is not present in the response it means that no available accommodations matching the specified criteria had been found.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryTimetableResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="FerryTTableItineraries" type="tns:FerryTimetableItineraries" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element contains the list of ferry itineraries that fit the requested criteria. Itineraries are returned in the same order as they are in the request. If it is not present in the response it means that no ferries matching the specified criteria had been found.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="OmittedOperators" type="tns:OmittedOperators" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>List of operators, for which was not possible to construct the RQ.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="PortionsSequenceId" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>If this element is present, it specifies the next available portion ID, which can be used by the client in the "Next portion RQ" to retrieve the next set of results. If the element is absent, it means this is the last portion and no more results to gather.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryAccommodationItineraries">
        <xsd:sequence>
          <xsd:element name="FerryAccomItinerary" type="tns:FerryAccommodationItinerary" maxOccurs="unbounded">
            <xsd:annotation>
              <xsd:documentation>This array contains as many elements as many itineraries in the request</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryAccommodationItinerary">
        <xsd:sequence>
          <xsd:element name="FerryAccommodation" maxOccurs="unbounded">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="OperatorCode" type="xsd:string">
                  <xsd:annotation>
                    <xsd:documentation>Code of the operator which provides this leg</xsd:documentation>
                  </xsd:annotation>
                </xsd:element>
                <xsd:element name="AccommodationBookCode" type="xsd:string">
                  <xsd:annotation>
                    <xsd:documentation>Booking code which can be used to identify this ferry accommodation among all other booking variants within the BlackBox response.</xsd:documentation>
                  </xsd:annotation>
                </xsd:element>
                <xsd:element name="FerryAccomDetails" type="tns:FerryAccommodationDetails">
                  <xsd:annotation>
                    <xsd:documentation>This tag holds information on the ferry accommodation class, its availability, the deck and other descriptions.</xsd:documentation>
                  </xsd:annotation>
                </xsd:element>
                <xsd:element name="Places" type="tns:FerryAccommodationPlaces" />
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryAvlAccommodation">
        <xsd:annotation>
          <xsd:documentation>Accommodation element in FerryAccommodationRequest</xsd:documentation>
        </xsd:annotation>
      </xsd:complexType>
      <xsd:complexType name="FerryAccommodationDetails">
        <xsd:annotation>
          <xsd:documentation>Used in RsvRq and AccomRs</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element name="TypeCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>type code, e.g.: Couchette, Seat, Bedden Cabin</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Occupancy" type="tns:IntWrapper" />
          <xsd:element name="QualityCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>e.g. Luxe, Economy, Reclining, Pullman</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="SanitaryCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>e.g. Bath, WC, Washbasin</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="PositionCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Inner/Outer</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="DeckCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>e.g. Outer,Inner, 1, 2, ..</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="LocationCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>e.g. Port, Starboard Forward, Aft</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ClassCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Accommodation class e.g. 1, 2</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="SmokingAttitudeCode" type="tns:SmokingAttitudeCode" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>non-smoking / smoking</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryAccommodationPlaces">
        <xsd:annotation>
          <xsd:documentation>Used in RsvRq and AccomRs</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element name="Quantity" type="xsd:int" />
          <xsd:element name="ModeCode" type="tns:AccomPlacesModeCode">
            <xsd:annotation>
              <xsd:documentation>possible values are 'B' and 'C'. 'B' means that a berth can be booked withing a cabin. 'C' means only whole cabin can be booked</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="SexCode" type="tns:SexCode">
            <xsd:annotation>
              <xsd:documentation>Possible values are 'M' and 'F'. Required in the request if Mode = 'B'. 'U' means 'Unknown'</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="UnitPrice" type="tns:FloatWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation />
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="TypeCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>could  be a special flag e.g. for Disabled passengers. </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryTimetableItineraries">
        <xsd:sequence>
          <xsd:element name="FerryTTableItinerary" type="tns:FerryTimetableItinerary" maxOccurs="unbounded">
            <xsd:annotation>
              <xsd:documentation>This array contains as many elements as many itineraries in the request</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryTimetableItinerary">
        <xsd:sequence>
          <xsd:element name="FerryTTableItineraryVariant" type="tns:FerryTimetableItineraryVariant" maxOccurs="unbounded">
            <xsd:annotation>
              <xsd:documentation>Itinerary Variants. </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryTimetableItineraryVariant">
        <xsd:sequence>
          <xsd:element name="OperatorCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Code of the operator which provides this leg</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ItineraryBookCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Booking code which can be used to identify this leg among all other booking variants within the BlackBox response.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FerryDeparture" type="tns:FerryDeparturePoint" />
          <xsd:element name="FerryArrival" type="tns:FerryArrivalPoint" />
          <xsd:element name="ShipName" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryVehicle">
        <xsd:sequence>
          <xsd:element name="TypeCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Vehicle type e.g.: Bicycle, Car.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FerryVehicleLength" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>Provide the vehicle length in centimetres.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FerryVehicleHeight" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>Provide the vehicle height in centimetres.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Registration" type="xsd:string" />
          <xsd:element name="MakeModel" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryTrailer">
        <xsd:sequence>
          <xsd:element name="TypeCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Trailer type e.g.: Boat trailer, Tent trailer</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FerryTrailerLength" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>Provide the Trailer length in centimetres.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FerryTrailerHeight" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>Provide the Trailer height in centimetres.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryRsvItinerariesRq">
        <xsd:sequence>
          <xsd:element name="FerryRsvItineraryRq" type="tns:FerryRsvItineraryRq" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryRsvItineraryRq">
        <xsd:sequence>
          <xsd:element name="ItineraryBookCode" type="xsd:string" />
          <xsd:element name="FerryVehicle" type="tns:FerryVehicle" minOccurs="0" />
          <xsd:element name="FerryTrailer" type="tns:FerryTrailer" minOccurs="0" />
          <xsd:element name="FerryRsvItineraryPassengers" type="tns:FerryRsvItineraryPassengers" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryRsvAccommodations">
        <xsd:sequence>
          <xsd:element name="FerryRsvAccommodation" type="tns:FerryRsvAccommodation" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryRsvAccommodation">
        <xsd:sequence>
          <xsd:element name="AccommodationBookCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Booking code which can be used to identify this ferry accommodation among all other booking variants within the BlackBox response.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Details" type="tns:FerryAccommodationDetails">
            <xsd:annotation>
              <xsd:documentation>This tag holds information on the ferry accommodation class, its availability, the deck and other descriptions.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Places" type="tns:FerryAccommodationPlaces" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryRsvReserved">
        <xsd:sequence>
          <xsd:element name="FerryRsvItinerariesRs" type="tns:FerryRsvItinerariesRs" />
          <xsd:element name="CurrencyCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>all prices in this response are in this currency </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FerryCharges" type="tns:FerryCharges" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryCharges">
        <xsd:sequence>
          <xsd:element name="FerryAncillaryCharges" type="tns:FerryAncillaryCharges" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>E.g. Oil Surcharge, Currently Surcharge.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="TotalAmount" type="xsd:float">
            <xsd:annotation>
              <xsd:documentation>total amount of money = sum of  all of the passengers, vehicle, trailer, accommodations and ancillary charges</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryAncillaryCharges">
        <xsd:sequence>
          <xsd:element name="FerryAncillaryCharge" type="tns:FerryAncillaryCharge" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryAncillaryCharge">
        <xsd:annotation>
          <xsd:documentation>E.g. Oil Surcharge, Currently Surcharge.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element name="ChargeCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>charge code</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ChargeAmount" type="xsd:float" />
          <xsd:element name="Description" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryRsvItinerariesRs">
        <xsd:sequence>
          <xsd:element name="FerryRsvItineraryRs" type="tns:FerryRsvItineraryRs" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryRsvItineraryRs">
        <xsd:sequence>
          <xsd:element name="ItineraryBookCode" type="xsd:string" />
          <xsd:element name="FerryRsvPassengersRs" type="tns:FerryRsvPassengersRs" minOccurs="0" />
          <xsd:element name="VehiclePrice" type="tns:FloatWrapper" minOccurs="0" />
          <xsd:element name="TrailerPrice" type="tns:FloatWrapper" minOccurs="0" />
          <xsd:element name="FerryRsvAccommodations" type="tns:FerryRsvAccommodations" minOccurs="0" />
          <xsd:element name="Quotation" type="tns:QuotationResultType" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightToCombineAccomWith">
        <xsd:annotation>
          <xsd:documentation>This value is forwarded to TDWS-based operators.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element name="OBDepartureDateTime" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Format: YYYY-MM-DDTHH:MM:SS</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="OBDepartureAirport" type="xsd:string" />
          <xsd:element name="OBArrivalAirport" type="xsd:string" />
          <xsd:element name="ADPrice" type="xsd:float" />
          <xsd:element name="CHPrice" type="xsd:float" />
          <xsd:element name="InfPrice" type="xsd:float" />
          <xsd:element name="CurrencyCode" type="xsd:string" />
          <xsd:element name="SupplierID" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>If the SupplierID is unknown, then the OperatorCode can be passed instead.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="LowCostFlight" type="xsd:boolean" />
          <xsd:element name="APDCommissionable" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightExternalDefinition">
        <xsd:annotation>
          <xsd:documentation>This value is forwarded to TDWS-based operators.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element name="OBDepartureDateTime" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Format: YYYY-MM-DDTHH:MM:SS</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="OBArrivalDateTime" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Format: YYYY-MM-DDTHH:MM:SS</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="OBDepartureAirport" type="xsd:string" />
          <xsd:element name="OBArrivalAirport" type="xsd:string" />
          <xsd:element name="OBFlightNo" type="xsd:string" />
          <xsd:element name="IBDepartureDateTime" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Format: YYYY-MM-DDTHH:MM:SS</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="IBArrivalDateTime" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Format: YYYY-MM-DDTHH:MM:SS</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="IBDepartureAirport" type="xsd:string" minOccurs="0" />
          <xsd:element name="IBArrivalAirport" type="xsd:string" minOccurs="0" />
          <xsd:element name="IBFlightNo" type="xsd:string" minOccurs="0" />
          <xsd:element name="Nights" type="xsd:int" />
          <xsd:element name="SellADPrice" type="xsd:float" />
          <xsd:element name="SellCHPrice" type="xsd:float" />
          <xsd:element name="SellInfPrice" type="xsd:float" />
          <xsd:element name="ADPrice" type="xsd:float" />
          <xsd:element name="CHPrice" type="xsd:float" />
          <xsd:element name="InfPrice" type="xsd:float" />
          <xsd:element name="CommType" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Commission type</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CommRate" type="xsd:float">
            <xsd:annotation>
              <xsd:documentation>Commission rate</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CurrencyCode" type="xsd:string" />
          <xsd:element name="FlightType" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Values: "Return" or "OW"</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="SupplierID" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>If the SupplierID is unknown, then the OperatorCode can be passed instead.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FlightRsSupplements" type="tns:FlightRsSupplementsList" minOccurs="0" />
          <xsd:element name="TotalPrice" type="xsd:float" />
          <xsd:element name="Adults" type="xsd:int" />
          <xsd:element name="Child" type="xsd:int" />
          <xsd:element name="Infants" type="xsd:int" />
          <xsd:element name="BookingReference" type="xsd:string" />
          <xsd:element name="TOD" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation>Is ticket on departure requested</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="LowCostFlight" type="xsd:boolean" />
          <xsd:element name="FlightCommissionType" type="xsd:string" minOccurs="0" />
          <xsd:element name="InternalNotes" type="xsd:string" minOccurs="0" />
          <xsd:element name="APDCommissionable" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelExternalDefinitions">
        <xsd:sequence>
          <xsd:element name="HotelExternalDefinition" type="tns:HotelExternalDefinition" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelExternalDefinition">
        <xsd:annotation>
          <xsd:documentation>This value is forwarded to TDWS-based operators.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element name="CheckInDate" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Format: YYYY-MM-DD</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CheckOutDate" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Format: YYYY-MM-DD</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="LastNightDate" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Format: YYYY-MM-DD</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Nights" type="xsd:int" />
          <xsd:element name="PriceApply" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Values: PU - per unit, PP - per person, PPPN - per person per night etc</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="MarginApply" type="xsd:string" />
          <xsd:element name="Pricing" type="tns:HotelRsvRates" />
          <xsd:element name="Costing" type="tns:HotelRsvRates" />
          <xsd:element name="CommissionType" type="xsd:string" />
          <xsd:element name="CommissionRate" type="xsd:float" />
          <xsd:element name="CurrencyCode" type="xsd:string" />
          <xsd:element name="ExchRate" type="xsd:float">
            <xsd:annotation>
              <xsd:documentation>Currency exchange rate</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="SupplierID" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>If the SupplierID is unknown, then the OperatorCode can be passed instead.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="BrokerID" type="xsd:string" />
          <xsd:element name="HotelCode" type="xsd:string" />
          <xsd:element name="HotelName" type="xsd:string" />
          <xsd:element name="ArrivalAirport" type="xsd:string" />
          <xsd:element name="ResortCode" type="xsd:string" />
          <xsd:element name="ResortName" type="xsd:string" />
          <xsd:element name="BoardType" type="xsd:string" />
          <xsd:element name="BoardName" type="xsd:string" />
          <xsd:element name="RoomCode" type="xsd:string" />
          <xsd:element name="RoomName" type="xsd:string" />
          <xsd:element name="HotelCategory" type="xsd:string" />
          <xsd:element name="Erratum" type="xsd:string" />
          <xsd:element name="HotelSupplements" type="tns:HotelSupplements" minOccurs="0" />
          <xsd:element name="TotalPrice" type="xsd:float" />
          <xsd:element name="PriceWithFlight" type="xsd:float" />
          <xsd:element name="Adults" type="xsd:int" />
          <xsd:element name="Child" type="xsd:int" />
          <xsd:element name="Infants" type="xsd:int" />
          <xsd:element name="BookingReference" type="xsd:string" />
          <xsd:element name="SpecialReq" type="xsd:string" />
          <xsd:element name="KeyCollection" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CarExternalDefinitions">
        <xsd:sequence>
          <xsd:element name="CarExternalDefinition" type="tns:CarExternalDefinition" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CarExternalDefinition">
        <xsd:annotation>
          <xsd:documentation>This value is forwarded to TDWS-based operators.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element name="FromDate" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Format: YYYY-MM-DD</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ToDate" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Format: YYYY-MM-DD</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FromTime" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Format: HH:MM:SS</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ToTime" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Format: HH:MM:SS</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Days" type="xsd:int" />
          <xsd:element name="SupplierID" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>If the SupplierID is unknown, then the OperatorCode can be passed instead.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ProviderID" type="xsd:string" minOccurs="0" />
          <xsd:element name="Qty" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>Quantity</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Price" type="xsd:float" />
          <xsd:element name="TotalPrice" type="xsd:float" />
          <xsd:element name="ExchRate" type="xsd:float">
            <xsd:annotation>
              <xsd:documentation>Currency exchange rate</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CurrencyCode" type="xsd:string" />
          <xsd:element name="BookingReference" type="xsd:string" />
          <xsd:element name="CarDetails" type="xsd:string" />
          <xsd:element name="CollectFrom" type="xsd:string" />
          <xsd:element name="DropOff" type="xsd:string" />
          <xsd:element name="OtherInfo" type="xsd:string" />
          <xsd:element name="Cost" type="xsd:float" />
          <xsd:element name="CommType" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Commission type</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CommRate" type="xsd:float">
            <xsd:annotation>
              <xsd:documentation>Commission rate</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="GrossOrNett" type="xsd:string" />
          <xsd:element name="DriverNames" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ParkingExternalDefinitions">
        <xsd:sequence>
          <xsd:element name="ParkingExternalDefinition" type="tns:ParkingExternalDefinition" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ParkingExternalDefinition">
        <xsd:annotation>
          <xsd:documentation>This value is forwarded to TDWS-based operators.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element name="FromDate" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Format: YYYY-MM-DD</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ToDate" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Format: YYYY-MM-DD</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FromTime" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Format: HH:MM:SS</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ToTime" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Format: HH:MM:SS</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Days" type="xsd:int" />
          <xsd:element name="SupplierID" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>If the SupplierID is unknown, then the OperatorCode can be passed instead.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Qty" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>Quantity</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Price" type="xsd:float" />
          <xsd:element name="TotalPrice" type="xsd:float" />
          <xsd:element name="ExchRate" type="xsd:float">
            <xsd:annotation>
              <xsd:documentation>Currency exchange rate</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CurrencyCode" type="xsd:string" />
          <xsd:element name="BookingReference" type="xsd:string" />
          <xsd:element name="ParkingDetails" type="xsd:string" />
          <xsd:element name="Airport" type="xsd:string" />
          <xsd:element name="CarMake" type="xsd:string" />
          <xsd:element name="CarColour" type="xsd:string" />
          <xsd:element name="CarRegistration" type="xsd:string" />
          <xsd:element name="Cost" type="xsd:float" />
          <xsd:element name="CommType" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Commission type</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CommRate" type="xsd:float">
            <xsd:annotation>
              <xsd:documentation>Commission rate</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="GrossOrNett" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="InsuranceExternalDefinitions">
        <xsd:sequence>
          <xsd:element name="InsuranceExternalDefinition" type="tns:InsuranceExternalDefinition" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="InsuranceExternalDefinition">
        <xsd:annotation>
          <xsd:documentation>This value is forwarded to TDWS-based operators.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element name="FromDate" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Format: YYYY-MM-DD</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ToDate" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Format: YYYY-MM-DD</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Days" type="xsd:int" />
          <xsd:element name="SupplierID" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>If the SupplierID is unknown, then the OperatorCode can be passed instead.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Qty" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>Quantity</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Price" type="xsd:float" />
          <xsd:element name="TotalPrice" type="xsd:float" />
          <xsd:element name="ExchRate" type="xsd:float">
            <xsd:annotation>
              <xsd:documentation>Currency exchange rate</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CurrencyCode" type="xsd:string" />
          <xsd:element name="BookingReference" type="xsd:string" />
          <xsd:element name="InsType" type="xsd:string" />
          <xsd:element name="InsPolicyNo" type="xsd:string" />
          <xsd:element name="Cost" type="xsd:float" />
          <xsd:element name="IPT" type="xsd:string" />
          <xsd:element name="CommType" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Commission type</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CommRate" type="xsd:float">
            <xsd:annotation>
              <xsd:documentation>Commission rate</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="PaxCovered" type="xsd:int" />
          <xsd:element name="Region" type="xsd:string" minOccurs="0" />
          <xsd:element name="PolicyText" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ExtraExternalDefinitions">
        <xsd:sequence>
          <xsd:element name="ExtraExternalDefinition" type="tns:ExtraExternalDefinition" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ExtraExternalDefinition">
        <xsd:annotation>
          <xsd:documentation>This value is forwarded to TDWS-based operators.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element name="FromDate" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Format: YYYY-MM-DD or YYYY-MM-DDTHH:MM:SS</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ToDate" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Format: YYYY-MM-DD or YYYY-MM-DDTHH:MM:SS</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FromTime" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Format: HH:MM or empty</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ToTime" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Format: HH:MM or empty</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Days" type="xsd:int" />
          <xsd:element name="SupplierID" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>If the SupplierID is unknown, then the OperatorCode can be passed instead.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="BrokerID" type="xsd:string" />
          <xsd:element name="Qty" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>Quantity</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Price" type="xsd:float" />
          <xsd:element name="TotalPrice" type="xsd:float" />
          <xsd:element name="ExchRate" type="xsd:float">
            <xsd:annotation>
              <xsd:documentation>Currency exchange rate</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CurrencyCode" type="xsd:string" />
          <xsd:element name="BookingReference" type="xsd:string" />
          <xsd:element name="OBFlightNo" type="xsd:string" />
          <xsd:element name="IBFlightNo" type="xsd:string" />
          <xsd:element name="Details" type="xsd:string" />
          <xsd:element name="Section" type="xsd:string" />
          <xsd:element name="ExtType" type="xsd:string" />
          <xsd:element name="MaxPax" type="xsd:string" />
          <xsd:element name="Method" type="xsd:string" />
          <xsd:element name="Cost" type="xsd:float" />
          <xsd:element name="CommType" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Commission type</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CommRate" type="xsd:float">
            <xsd:annotation>
              <xsd:documentation>Commission rate</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="GrossOrNett" type="xsd:string" />
          <xsd:element name="Notes" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Portion">
        <xsd:annotation>
          <xsd:documentation>If this element is omitted, the response will be returned as soon as ALL the availability from all the requested operators is collected. When this element is present in the RQ, the response will contain only first portion of the availability. For more information see the description of PortionsSequenceId element of the availability response.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element name="KeepRequesting" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation>If set to true, the Black Box server will return this portion and in case more portions are available on operator servers, will keep requesting for these operators. If set to false, it will return availability obtained at that moment and will stop requesting for more portions.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CollectingStopCriterion" type="tns:CollectingStopCriteria" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>DEPRECATED, use StopCriteria and CriteriaCombiningRule instead. This element determines the meaning of value passed in StopCriterionValue. If it equals to ValueIsSize, StopCriterionValue specifies number of hotels/flights/cars/etc. If it equals to Time, StopCriterionValue specifies time in seconds. If it is omitted, it defaults to ValueIsTime.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="StopCriterionValue" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>DEPRECATED, use StopCriteria and CriteriaCombiningRule instead. Meaning of this field is determined by CollectingStopCriterion. In case of Time, it specifies the number of seconds the BlackBox should wait before it will return the first portion. In case of Size, it specifies minimum number of hotels/flights/cars/etc the BlackBox should collect before it will return the first portion.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="StopCriteria" type="tns:StopCriteria" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>DEPRECATED, use WaitingPolicy instead. Set of criteria controlling when the BlackBox should stop collecting results. If this element is absent (i.e. no stop criteria is explicitly specified), default criteria is applied: collecting stops when either 10 results are obtained or 50 sec elapsed.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CriteriaCombiningRule" type="tns:CriteriaCombiningRule" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>DEPRECATED, use WaitingPolicy instead. When multiple stop criteria are given, it is possible to specify, how to combine them. If the Rule=All, then the BlackBox will stop collecting results when all criteria are fulfilled. If the Rule=Any, then the BlackBox will stop collecting results as soon as any criteria is fulfilled. The default rule is Any.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="WaitingPolicy" type="tns:WaitingPolicy" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Set of waiting policy criteria controlling when the BlackBox should stop collecting results. WaitingPolicy must contain only one child element.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="MaxPortionSize" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element determines maximum number of options (hotels/flights/cars/etc) that will be returned in each response.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="StopCriteria">
        <xsd:sequence>
          <xsd:element name="StopCriterion" type="tns:StopCriterion" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="StopCriterion">
        <xsd:sequence>
          <xsd:element name="CollectingStopCriterion" type="tns:CollectingStopCriteria">
            <xsd:annotation>
              <xsd:documentation>This element determines the meaning of value passed in StopCriterionValue. If it equals to Size, StopCriterionValue specifies number of hotels/flights/cars/etc. If it equals to Time, StopCriterionValue specifies time in seconds. If it equals to ValueIsOper, then the BlackBox will wait until specified in StopCriterionString operator processing will be finished. If it equals to ValueIsHotelName, then the BlackBox will process the request until hotel with specified (or partially specified) name is found.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="StopCriterionValue" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Meaning of this field is determined by CollectingStopCriterion. In case of Time, it specifies the number of seconds the BlackBox should wait before it will return the first portion. In case of Size, it specifies minimum number of hotels/flights/cars/etc the BlackBox should collect before it will return the first portion.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="StopCriterionString" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Meaning of this field is determined by the CollectingStopCriterion. In case of ValueIsOper, it specifies the operator which will be awaited until the processing is finished. In case of ValueIsHotelName, it specifies the required Hotel Name</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="WaitingPolicy">
        <xsd:sequence>
          <xsd:element name="WaitForTime" type="tns:WaitForTime" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Specifies the number of seconds the BlackBox should wait before it will return the first portion.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="WaitForSize" type="tns:WaitForSize" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Size specifies minimum number of hotels/flights/cars/etc the BlackBox should collect before it will return the first portion.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="WaitForOper" type="tns:WaitForOper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>BlackBox will wait until specified in OperatorCode operator processing will be finished and required number of results from this operator will be collected.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="WaitForHotelName" type="tns:WaitForHotelName" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>BlackBox will process the request until hotel with specified (or partially specified) name is found.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="WaitForAny" type="tns:WaitingPolicies" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>If the Type=WaitForAny, then the BlackBox will stop collecting results as soon as any criteria is fulfilled.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="WaitForAll" type="tns:WaitingPolicies" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>If the Type=WaitForAll, then the BlackBox will stop collecting results when all criteria are fulfilled.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="WaitingPolicies">
        <xsd:sequence>
          <xsd:element name="Item" type="tns:WaitingPolicy" maxOccurs="unbounded">
            <xsd:annotation>
              <xsd:documentation>Set of WaitingPolicy.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="WaitingForAnyPolicies">
        <xsd:sequence />
      </xsd:complexType>
      <xsd:complexType name="WaitingForAllPolicies">
        <xsd:sequence />
      </xsd:complexType>
      <xsd:complexType name="WaitForTime">
        <xsd:sequence>
          <xsd:element name="TimeInSecs" type="xsd:int" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="WaitForOper">
        <xsd:sequence>
          <xsd:element name="OperatorCode" type="xsd:string" />
          <xsd:element name="NumberOfResults" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Number of results from specified operator. Default value is 0.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="WaitForSize">
        <xsd:sequence>
          <xsd:element name="Size" type="xsd:int" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="WaitForHotelName">
        <xsd:sequence>
          <xsd:element name="HotelName" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="DataSourceType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="GDS" />
          <xsd:enumeration value="VDWS" />
          <xsd:enumeration value="LCWS" />
          <xsd:enumeration value="XML" />
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:simpleType name="CriteriaCombiningRule">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="All" />
          <xsd:enumeration value="Any" />
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:simpleType name="CollectingStopCriteria">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="ValueIsTime" />
          <xsd:enumeration value="ValueIsSize" />
          <xsd:enumeration value="ValueIsOper" />
          <xsd:enumeration value="ValueIsHotelName" />
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:simpleType name="ETicketEligibilityType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="Eligible" />
          <xsd:enumeration value="NotEligible" />
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="HotelID">
        <xsd:simpleContent>
          <xsd:extension base="xsd:string">
            <xsd:attribute name="Context" type="tns:HotelIDContext" use="required" />
            <xsd:attribute name="OperCode" type="xsd:string" use="optional" />
            <xsd:attribute name="BkgRef" type="xsd:string" use="optional" />
          </xsd:extension>
        </xsd:simpleContent>
      </xsd:complexType>
      <xsd:simpleType name="HotelIDContext">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="BB_HOTEL_ID" />
          <xsd:enumeration value="HOTEL_NAME" />
          <xsd:enumeration value="OPER_HOTEL_ID" />
          <xsd:enumeration value="OPER_HOTEL_NAME" />
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:simpleType name="SmokingAttitudeCode">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="DontMind" />
          <xsd:enumeration value="Smoker" />
          <xsd:enumeration value="NonSmoker" />
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:simpleType name="SexCode">
        <xsd:annotation>
          <xsd:documentation>M (Male), F (Female) or U (Unknown)</xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="U" />
          <xsd:enumeration value="M" />
          <xsd:enumeration value="F" />
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:simpleType name="AccomPlacesModeCode">
        <xsd:annotation>
          <xsd:documentation>If is set to BerthWithin then SexCode required</xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="CompleteCabinOrSeat" />
          <xsd:enumeration value="BerthWithin" />
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="HotelAvailabilityResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="Hotels" type="tns:Hotels" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>If the element is absent, then it means, that request is not correct (in this case Errors is present) or nothing is found by any operator.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="OmittedOperators" type="tns:OmittedOperators" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>List of operators, for which was not possible to construct the RQ.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="PortionsSequenceId" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>If this element is present, it specifies the next available portion ID, which can be used by the client in the "Next portion RQ" to retrieve the next set of results. If the element is absent, it means this is the last portion and no more results to gather.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="NextHotelPortionRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="PortionsSequenceId" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Quoted from the availability RS.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="KeepRequesting" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation>If set to true, the Black Box server will return this portion and in case more portions are available on operator servers, will keep requesting for these operators. If set to false, it will return availability obtained at that moment and will stop requesting for more portions.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="WaitingPolicy" type="tns:WaitingPolicy" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Set of waiting policy criteria controlling when the BlackBox should stop collecting results. WaitingPolicy must contain only one child element.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="MaxPortionSize" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element determines maximum number of options (hotels/flights/cars/etc) that will be returned in each response.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelStayDateRange">
        <xsd:sequence>
          <xsd:element name="Start" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Format: YYYY-MM-DD</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="End" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Format: YYYY-MM-DD</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelRoomStayCandidate">
        <xsd:sequence>
          <xsd:element name="GuestCounts" type="tns:HotelGuestCounts" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelGuestCounts">
        <xsd:sequence>
          <xsd:element name="PerRoom" type="tns:HotelGuestsQuantity" maxOccurs="unbounded">
            <xsd:annotation>
              <xsd:documentation>Each PerRoom element describes one "family" - guests, which will share a room.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelGuestsQuantity">
        <xsd:sequence>
          <xsd:element name="PerRoomRecordNumber" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>Each PerRoom element must have a unique PerRoomRecordNumber. These will appear later in the BlackBox response. There will be variants for each family. Each variant will contain the PerRoomRecordNumber referring to the family, which this variant is for.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Adults" type="tns:HotelPersons">
            <xsd:annotation>
              <xsd:documentation>Each PerRoom must contain at least one adult person</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Children" type="tns:HotelPersons" minOccurs="0" />
          <xsd:element name="Infants" type="tns:HotelPersons" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelSearchCriterion">
        <xsd:sequence>
          <xsd:element name="CategoryCode" type="xsd:string" minOccurs="0" />
          <xsd:element name="BoardTypeCode" type="xsd:string" minOccurs="0" />
          <xsd:element name="HotelCode" type="xsd:string" minOccurs="0" />
          <xsd:element name="HotelName" type="xsd:string" minOccurs="0" />
          <xsd:element name="Locations" type="tns:HotelLocations" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelLocations">
        <xsd:sequence>
          <xsd:element name="Location" type="tns:HotelLocation" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelLocation">
        <xsd:sequence>
          <xsd:element name="AirportCode" type="xsd:string" minOccurs="0" />
          <xsd:element name="ResortCode" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Hotels">
        <xsd:sequence>
          <xsd:element name="Hotel" type="tns:Hotel" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Hotel">
        <xsd:sequence>
          <xsd:element name="RoomStays" type="tns:HotelRoomStays" />
          <xsd:element name="HotelInfo" type="tns:HotelInfo" />
          <xsd:element name="OperatorCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Code of tour operator, which returned this hotel</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="OriginalOperatorCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Original operator code returned by the TDWS-based operator.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="SupplierID" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Supplier ID returned by the TDWS-based operator.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelRoomStays">
        <xsd:sequence>
          <xsd:element name="RoomStay" type="tns:HotelRoomStay" maxOccurs="unbounded">
            <xsd:annotation>
              <xsd:documentation>If multiple PerRoom elements were specified in the RQ, the response will contain separate RoomStay for each PerRoom. To find out which PerRoom is this RoomStay for, one can refer to the PerRoomRecordNumber.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelRoomStay">
        <xsd:sequence>
          <xsd:element name="AllocationVariants" type="tns:HotelAllocationVariants" />
          <xsd:element name="PerRoomRecordNumber" type="xsd:int" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelAllocationVariants">
        <xsd:sequence>
          <xsd:element name="AllocationVariant" type="tns:HotelAllocationVariant" maxOccurs="unbounded">
            <xsd:annotation>
              <xsd:documentation>Some operators may provide multiple variants of allocation (different room types) for a family. In this case there will be multiple instances of the AllocationVariant element.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelAllocationVariant">
        <xsd:sequence>
          <xsd:element name="RoomType" type="tns:HotelRoomType">
            <xsd:annotation>
              <xsd:documentation>Top Dog recommends to use full room type description rather then coding all the times.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="IncomingContract" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Contract code for the incoming agency</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Offer" type="tns:BoolWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>True means that this is an offer. False means that it is not an offer</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="MatchLevel" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Match level of returned hotels to requested parameters. "0" - means exact match. Only COSMOSH supports this feature.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="WarningNumbers" type="tns:WarningNumbers" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="WarningNumbers">
        <xsd:sequence>
          <xsd:element name="Number" type="xsd:int" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelRoomType">
        <xsd:sequence>
          <xsd:element name="Code" type="xsd:string" />
          <xsd:element name="Description" type="xsd:string" />
          <xsd:element name="NumberOfRoomsAvailable" type="tns:IntWrapper" minOccurs="0" />
          <xsd:element name="RatesWithBoard" type="tns:HotelRatesWithBoard" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelRatesWithBoard">
        <xsd:sequence>
          <xsd:element name="RateWithBoard" type="tns:HotelRateWithBoard" maxOccurs="unbounded">
            <xsd:annotation>
              <xsd:documentation>If operator proposes the same room with various board types, each of the board types will be presented by a separate RateWithBoard element.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelRateWithBoard">
        <xsd:sequence>
          <xsd:element name="BookCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Used in further reservation RQ.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="BookCodeExpireDateTime" type="xsd:string" minOccurs="0" />
          <xsd:element name="BoardType" type="tns:HotelBoardType">
            <xsd:annotation>
              <xsd:documentation>Top Dog recommends to use full board type description rather then coding all the times.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Contract" type="xsd:string" />
          <xsd:element name="TotalPrice" type="xsd:float" />
          <xsd:element name="CurrencyCode" type="xsd:string" />
          <xsd:element name="AdditionalServices" type="tns:HotelAdditionalServices" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Other costs related to the whole booking (e.g. Agency Fee)</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="PriceWithFlight" type="tns:FloatWrapper" minOccurs="0" />
          <xsd:element name="HlRvRates" type="tns:HotelRsvRates" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelBoardType">
        <xsd:sequence>
          <xsd:element name="Code" type="xsd:string" />
          <xsd:element name="Description" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelInfo">
        <xsd:sequence>
          <xsd:element name="Code" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Hotel code which is specific to the operator.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Name" type="xsd:string" />
          <xsd:element name="VendorMessages" type="tns:HotelVendorMessages" minOccurs="0" />
          <xsd:element name="Address" type="tns:HotelAddress" />
          <xsd:element name="ChildMinAge" type="tns:IntWrapper" minOccurs="0" />
          <xsd:element name="ChildMaxAge" type="tns:IntWrapper" minOccurs="0" />
          <xsd:element name="Category" type="tns:HotelCategory" />
          <xsd:element name="OriginalCategory" type="tns:HotelCategory" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelVendorMessages">
        <xsd:sequence>
          <xsd:element name="VendorMessage" type="tns:HotelVendorMessage" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelVendorMessage">
        <xsd:sequence>
          <xsd:element name="Title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Will be a short descriptive title for the message</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="InfoType" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>"DES" - Description; "MKT" - Marketing</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="SubSections" type="tns:HotelSubSections" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelSubSections">
        <xsd:sequence>
          <xsd:element name="SubSection" type="tns:HotelSubSection" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelSubSection">
        <xsd:sequence>
          <xsd:element name="Paragraph" type="tns:HotelParagraph" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelParagraph">
        <xsd:sequence>
          <xsd:element name="SequenceNumber" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>Sequence starting at 1 for running text</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Text" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelAddress">
        <xsd:sequence>
          <xsd:element name="Airport" type="tns:ResponseAirport" minOccurs="0" />
          <xsd:element name="Resort" type="tns:HotelResort" minOccurs="0" />
          <xsd:element name="AddressLine" type="xsd:string" minOccurs="0" />
          <xsd:element name="CityName" type="xsd:string" minOccurs="0" />
          <xsd:element name="PostalCode" type="xsd:string" minOccurs="0" />
          <xsd:element name="Country" type="xsd:string" minOccurs="0" />
          <xsd:element name="Coordinates" type="tns:GlobeCoordinates" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="GlobeCoordinates">
        <xsd:sequence>
          <xsd:element name="longitude" type="xsd:float" />
          <xsd:element name="latitude" type="xsd:float" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelResort">
        <xsd:sequence>
          <xsd:element name="Code" type="xsd:string" />
          <xsd:element name="Name" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelCategory">
        <xsd:sequence>
          <xsd:element name="Code" type="xsd:string" />
          <xsd:element name="Description" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelComments">
        <xsd:sequence>
          <xsd:element name="HotelComment" type="tns:HotelComment" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelSupplements">
        <xsd:sequence>
          <xsd:element name="Supplement" type="tns:HotelSupplement" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelDiscounts">
        <xsd:sequence>
          <xsd:element name="Discount" type="tns:HotelDiscount" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelAdditionalServices">
        <xsd:sequence>
          <xsd:element name="AdditionalService" type="tns:HotelAdditionalService" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelPersons">
        <xsd:sequence>
          <xsd:element name="Person" type="tns:HotelPerson" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelPerson">
        <xsd:sequence>
          <xsd:element name="Age" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Ages are mandatory for children. Ages are optional for adults and infants.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelComment">
        <xsd:sequence>
          <xsd:element name="Type" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>"H" – hotel comment, "R" - incoming agency comment</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Text" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelIncomingAgency">
        <xsd:sequence>
          <xsd:element name="Company" type="xsd:string" />
          <xsd:element name="Office" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelSupplement">
        <xsd:sequence>
          <xsd:element name="FromDate" type="xsd:string" />
          <xsd:element name="ToDate" type="xsd:string" />
          <xsd:element name="Code" type="xsd:string" />
          <xsd:element name="Description" type="xsd:string" />
          <xsd:element name="PaxesNumber" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>The number of passengers this supplement applies to.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Price" type="xsd:float">
            <xsd:annotation>
              <xsd:documentation>Total price.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CurrencyCode" type="xsd:string" />
          <xsd:element name="PriceBasis" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>"B" - per booking, "P" - per person, "A" - per adult, "C" - per child, "I" - per infant.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="AllowQuantityEdit" type="tns:BoolWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>True if the user can edit the quantity.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Compulsory" type="tns:BoolWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>False if the supplement is optional. Hotel supplements are mandatory by default</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="PaidLocally" type="tns:BoolWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>True if the supplement is paid in hotel</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Commissionable" type="xsd:boolean" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelDiscount">
        <xsd:sequence>
          <xsd:element name="FromDate" type="xsd:string" />
          <xsd:element name="ToDate" type="xsd:string" />
          <xsd:element name="Code" type="xsd:string" />
          <xsd:element name="Description" type="xsd:string" />
          <xsd:element name="PaxesNumber" type="xsd:int" />
          <xsd:element name="Price" type="xsd:float" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelAdditionalService">
        <xsd:sequence>
          <xsd:element name="Code" type="xsd:string" />
          <xsd:element name="Description" type="xsd:string" />
          <xsd:element name="Price" type="xsd:float" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ConfirmationRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="BookCodesToConfirm" type="tns:BookCodesToConfirm" minOccurs="0" />
          <xsd:element name="AgencyAddress" type="tns:FlightPassAddress" />
          <xsd:element name="AgencyContactDetails" type="tns:ContactDetails" />
          <xsd:element name="AgencyWantsNotice" type="tns:WantedNotice" minOccurs="0" />
          <xsd:element name="AgencyReference" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>This is the unique reference number assigned to the booking by the client.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="PaymentDetails" type="tns:FlightPaymentDetails" minOccurs="0" />
          <xsd:element name="CustomerNameForDirectBooking" type="tns:CustomerNameForDirectBooking" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This value is forwarded to the TDWS-based operators. It contains the customer's name in case the booking was made directly and not with the agency. Other customer details (such as address and contact information) is to be placed into the AgencyAddress and the AgencyContactDetails.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="InfoToPlaceOnBookingRecord" type="tns:InfoToPlaceOnBookingRecord" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element is forwarded to the TDWS-based operator. It contains information, which needs to be saved along with the booking details.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="DepositValue" type="tns:FloatWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>If a non-zero value is sent in this field then the deposit used is this value rather than the calculated deposit value.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Agreements" type="tns:AgreeComponentsType" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Values which indicate that the user has agreed to some/all conditions that needs to be met to make the booking.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="IgnoreConfirmationErrors" type="tns:BoolWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>If the operator rejected the confirmation of one reserved group and the value of this tag is true, the system will try to confirm the following reserved groups. If the value of this tag is false, confirmation process will be terminated.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CustomerNameForDirectBooking">
        <xsd:sequence>
          <xsd:element name="Suname" type="xsd:string" />
          <xsd:element name="Title" type="xsd:string" />
          <xsd:element name="FirstName" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="BookCodesToConfirm">
        <xsd:sequence>
          <xsd:element name="ReservedGroup" type="tns:ReservedGroup" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ReservedGroup">
        <xsd:sequence>
          <xsd:element name="BookCodes" type="tns:BookCodes" />
          <xsd:element name="Passengers" type="tns:Passengers">
            <xsd:annotation>
              <xsd:documentation>Number of passengers of each type (adult, child, infant) must be the same as in the availability search.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="SupplementsRequired" type="tns:SupplementsRequired" minOccurs="0" />
          <xsd:element name="FlightSpecialServices" type="tns:FlightSpecialServices" minOccurs="0" />
          <xsd:element name="FlightRemarks" type="tns:FlightRemarks" minOccurs="0" />
          <xsd:element name="HotelComments" type="tns:HotelComments" minOccurs="0" />
          <xsd:element name="CalculateCombinedFlightAccomPrice" type="tns:FlightToCombineAccomWith" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This value is forwarded to TDWS-based operators.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FlightTicketing" type="tns:FlightTicketing" minOccurs="0" />
          <xsd:element name="QueuePlace" type="tns:QueuePlace" minOccurs="0" />
          <xsd:element name="ETicketIdentification" type="tns:FlightETicketIdentification" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This tag must be present if ETicketIdentification was returned in FlightRsSupplement</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ArrivalTime" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Estimated time of arrival at the hotel. Format: HH:MM:SS</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ArrivalJourney" type="tns:JourneyDetail" minOccurs="0" />
          <xsd:element name="DepartureJourney" type="tns:JourneyDetail" minOccurs="0" />
          <xsd:element name="CarSupplementsRequired" type="tns:CarSupplementsRequired" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Car supplements.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ParkingCarDetails" type="tns:ParkingCarDetails" minOccurs="0" />
          <xsd:element name="PromotionCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>The coupon number when presented by the customer (applicable to AVIS)</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ParkingCarDetails">
        <xsd:sequence>
          <xsd:element name="Registration" type="xsd:string" minOccurs="0" />
          <xsd:element name="CarMake" type="xsd:string" minOccurs="0" />
          <xsd:element name="CarModel" type="xsd:string" minOccurs="0" />
          <xsd:element name="CarColour" type="xsd:string" minOccurs="0" />
          <xsd:element name="OutFlight" type="xsd:string" minOccurs="0" />
          <xsd:element name="ReturnFlight" type="xsd:string" minOccurs="0" />
          <xsd:element name="OutTerminal" type="xsd:string" minOccurs="0" />
          <xsd:element name="ReturnTerminal" type="xsd:string" minOccurs="0" />
          <xsd:element name="Destination" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="InfoToPlaceOnBookingRecord">
        <xsd:sequence>
          <xsd:element name="OperatorCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>The code of the TDWS-based operator, which this info needs to be sent to.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FlightExternalDefinitions" type="tns:FlightExternalDefinitions" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This value is forwarded to the TDWS-based operators. TDWS will save the information about the external flights in the booking record.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="HotelExternalDefinitions" type="tns:HotelExternalDefinitions" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This value is forwarded to the TDWS-based operators. TDWS will save the information about the external hotels in the booking record.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CarExternalDefinitions" type="tns:CarExternalDefinitions" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This value is forwarded to the TDWS-based operators. TDWS will save the information about the external car hire in the booking record.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ParkingExternalDefinitions" type="tns:ParkingExternalDefinitions" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This value is forwarded to the TDWS-based operators. TDWS will save the information about the external parking products in the booking record.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="InsuranceExternalDefinitions" type="tns:InsuranceExternalDefinitions" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This value is forwarded to the TDWS-based operators. TDWS will save the information about the external insurance products in the booking record.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ExtraExternalDefinitions" type="tns:ExtraExternalDefinitions" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This value is forwarded to the TDWS-based operators. TDWS will save the information about the external extras products in the booking record.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CardDetails" type="tns:CardDetails" minOccurs="0" />
          <xsd:element name="Passengers" type="tns:Passengers" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CardDetails">
        <xsd:sequence>
          <xsd:element name="CardType" type="xsd:string" />
          <xsd:element name="CardNumber" type="xsd:string" />
          <xsd:element name="Value" type="xsd:string" />
          <xsd:element name="CardCharge" type="xsd:string" />
          <xsd:element name="CardCost" type="xsd:string" />
          <xsd:element name="StartDate" type="xsd:string" />
          <xsd:element name="ExpiryDate" type="xsd:string" />
          <xsd:element name="IssueNo" type="xsd:string" />
          <xsd:element name="CV2" type="xsd:string" />
          <xsd:element name="AuthCode" type="xsd:string" />
          <xsd:element name="NameOnCard" type="xsd:string" />
          <xsd:element name="Address1" type="xsd:string" />
          <xsd:element name="Address2" type="xsd:string" />
          <xsd:element name="Address3" type="xsd:string" />
          <xsd:element name="Address4" type="xsd:string" />
          <xsd:element name="PostCode" type="xsd:string" />
          <xsd:element name="Country" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightExternalDefinitions">
        <xsd:sequence>
          <xsd:element name="FlightExternalDefinition" type="tns:FlightExternalDefinition" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Passengers">
        <xsd:sequence>
          <xsd:element name="Passenger" type="tns:Passenger" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Passenger">
        <xsd:sequence>
          <xsd:element name="PassengerRecordNumber" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>Always there must be a passenger with PassengerRecordNumber=1. This passenger will be treated as the lead passenger.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="PersonAgeCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>A for adult, C for child, I for infant. Number of passengers of given type (e.g. number of adults) must be the same as in the availability RQ.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Title" type="xsd:string" minOccurs="0" />
          <xsd:element name="FirstName" type="xsd:string" minOccurs="0" />
          <xsd:element name="Surname" type="xsd:string" minOccurs="0" />
          <xsd:element name="BirthDate" type="xsd:string" minOccurs="0" />
          <xsd:element name="Nationality" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Required if book a flight via TD2WS</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="PassportNumber" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Required for LOWCOST's supplier TAW</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="PassportExpirationDate" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Format: YYYY-MM-DD. Required for LOWCOST's supplier TAW </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="PassportIssueDate" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Format: YYYY-MM-DD. Required for LOWCOST's supplier EASY </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="SupplementsRequired" type="tns:SupplementsRequired" minOccurs="0" />
          <xsd:element name="FrequentFlyerInfo" type="tns:FrequentFlyerInfo" minOccurs="0" />
          <xsd:element name="Baggage" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Format: NNK or NNP.     NN - number of kilogramms(K) or number of pieces(P).  </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Address" type="tns:FlightPassAddress" minOccurs="0" />
          <xsd:element name="DrivingLicense" type="tns:DrivingLicenseType" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FrequentFlyerInfo">
        <xsd:sequence>
          <xsd:element name="CarrierCode" type="xsd:string" />
          <xsd:element name="MembershipID" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="WantedNotice">
        <xsd:sequence>
          <xsd:element name="WantsEmailUpdates" type="tns:BoolWrapper" minOccurs="0" />
          <xsd:element name="WantsPostDocuments" type="tns:BoolWrapper" minOccurs="0" />
          <xsd:element name="WantsEmailCertificate" type="tns:BoolWrapper" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ConfirmationResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Is present in case one of confirmations has failed.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="Confirmations" type="tns:Confirmations" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Confirmations">
        <xsd:sequence>
          <xsd:element name="Confirmation" type="tns:Confirmation" maxOccurs="unbounded">
            <xsd:annotation>
              <xsd:documentation>One element in this list corresponds to one ReservedGroup in the RQ.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Confirmation">
        <xsd:sequence>
          <xsd:element name="OperatorCode" type="xsd:string" />
          <xsd:element name="BookCodes" type="tns:BookCodes" minOccurs="0" />
          <xsd:element name="Confirmed" type="tns:Confirmed" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element is present if the confirmation of this ReservedGroup has succeeded. If the confirmation of some other group has failed then all succeeded confirmations must be cancelled. But in this case the operator does not support programmatic cancellation; this element will be present in the RS. It gives the client details of the booking, so the client can try to cancel it manually.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Failed" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element is present if the corresponding ReservedGroup has failed. It describes the reason of failure.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Cancelled" type="tns:Cancelled" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element is present if the corresponding ReservedGroup was successfully confirmed, but subsequent confirmation of another group has failed, therefore this confirmation was cancelled.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="NotProcessed" type="tns:NotProcessed" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Confirmed">
        <xsd:sequence>
          <xsd:element name="BookingReference" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>The booking reference provided by the operator.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="SupplierBkgStatus" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element will contain one of the following strings: "Confirmed" if the booking was successfully confirmed, "Pending" if the booking confirmation is pending, "Cancelled" if the booking was successfully cancelled or "Unknown" in case the booking has not been confirmed.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="TotalPrice" type="xsd:float" />
          <xsd:element name="CurrencyCode" type="xsd:string" />
          <xsd:element name="IncomingAgency" type="tns:HotelIncomingAgency" />
          <xsd:element name="HlCfComments" type="tns:HotelConfirmationComments" minOccurs="0" />
          <xsd:element name="BookingReferenceId" type="tns:FlightBookingReferenceId" minOccurs="0" />
          <xsd:element name="Notes" type="xsd:string" />
          <xsd:element name="ConfirmationPage" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>HTML code of the confirmation page provided by the low cost flight web site.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CreditCardFee" type="xsd:float" />
          <xsd:element name="CancellationFees" type="tns:CancellationFees" minOccurs="0" />
          <xsd:element name="AmendmentFees" type="tns:AmendmentFees" minOccurs="0" />
          <xsd:element name="KeyCollection" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelConfirmationComments">
        <xsd:sequence>
          <xsd:element name="HlCfComment" type="tns:HotelConfirmationComment" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelConfirmationComment">
        <xsd:sequence>
          <xsd:element name="CommentOriginator" type="xsd:string" />
          <xsd:element name="GuestViewable" type="xsd:boolean" />
          <xsd:element name="Text" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="BookingStatusRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="OperatorCode" type="xsd:string" />
          <xsd:element name="BookingReference" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Operator booking reference</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="BookCodes" type="tns:BookCodes" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="BookingStatusResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="Status" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element will contain one of the following strings: "Confirmed" if the booking was successfully confirmed, "Pending" if the booking confirmation is pending, "Cancelled" if the booking was successfully cancelled or "Unknown" in case the booking has not been confirmed.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Confirmed" type="tns:Confirmed" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element is present in case the booking has been successfully confirmed.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelInfoRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="BookCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Quoted from the availability RS.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="HotelID" type="tns:HotelID" minOccurs="0" />
          <xsd:element name="ExtraHotelInfo" type="tns:ExtraHotelInfo" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Allows specifying additional information about the required hotel.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ShowExpiredInfo" type="tns:BoolWrapper" minOccurs="0" />
          <xsd:element name="WantsDetailedInfo" type="tns:BoolWrapper" minOccurs="0" />
          <xsd:element name="InvalidateCachedInfo" type="tns:BoolWrapper" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelInfoResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="HotelDetailedInfo" type="tns:HotelDetailedInfo" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element is mutually exclusive with Errors element: it is absent in case of failure (reason is described  by Errors) or present in case  of success. </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="BookingDepartmentDetails">
        <xsd:sequence>
          <xsd:element name="Name" type="xsd:string" minOccurs="0" />
          <xsd:element name="PhoneNumber" type="xsd:string" minOccurs="0" />
          <xsd:element name="FaxNumber" type="xsd:string" minOccurs="0" />
          <xsd:element name="EmailAddress" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelDetailedInfo">
        <xsd:sequence>
          <xsd:element name="OperatorCode" type="xsd:string" />
          <xsd:element name="OriginalOperatorCode" type="xsd:string" minOccurs="0" />
          <xsd:element name="Code" type="xsd:string" />
          <xsd:element name="Name" type="xsd:string" />
          <xsd:element name="Category" type="tns:HotelCategory" />
          <xsd:element name="Address" type="tns:HotelAddress" minOccurs="0" />
          <xsd:element name="TelephoneNumber" type="xsd:string" />
          <xsd:element name="FaxNumber" type="xsd:string" />
          <xsd:element name="Characteristics" type="tns:HotelCharacteristics" minOccurs="0" />
          <xsd:element name="RoomFacilities" type="tns:RoomFacilities" minOccurs="0" />
          <xsd:element name="HotelFacilities" type="tns:HotelFacilities" minOccurs="0" />
          <xsd:element name="BookingDepartmentDetails" type="tns:BookingDepartmentDetails" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelCharacteristics">
        <xsd:sequence>
          <xsd:element name="Description" type="xsd:string" minOccurs="0" />
          <xsd:element name="Comment" type="xsd:string" minOccurs="0" />
          <xsd:element name="Photos" type="tns:HotelPhotos" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>URLs of the establishment photos.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Capacity" type="tns:HotelCapacity" minOccurs="0" />
          <xsd:element name="Building" type="tns:HotelBuilding" minOccurs="0" />
          <xsd:element name="Distances" type="tns:HotelDistances" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Information about distances between the establishment and another place</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Maps" type="tns:HotelMaps" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelPhotos">
        <xsd:sequence>
          <xsd:element name="HotelPhotoInfo" type="tns:HotelCharacteristic" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelCapacity">
        <xsd:sequence>
          <xsd:element name="HotelCapacityInfo" type="tns:HotelCharacteristic" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelBuilding">
        <xsd:sequence>
          <xsd:element name="HotelBuildingInfo" type="tns:HotelCharacteristic" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelDistances">
        <xsd:sequence>
          <xsd:element name="HotelDistanceInfo" type="tns:HotelCharacteristic" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelMaps">
        <xsd:sequence>
          <xsd:element name="HotelMapInfo" type="tns:HotelCharacteristic" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelCharacteristic">
        <xsd:sequence>
          <xsd:element name="Name" type="xsd:string" />
          <xsd:element name="Value" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RoomFacilities">
        <xsd:sequence>
          <xsd:element name="RoomFacilityInfo" type="tns:HotelFacility" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelFacilities">
        <xsd:sequence>
          <xsd:element name="HotelFacilityInfo" type="tns:HotelFacility" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelFacility">
        <xsd:sequence>
          <xsd:element name="Code" type="xsd:string" />
          <xsd:element name="Description" type="xsd:string" minOccurs="0" />
          <xsd:element name="Available" type="xsd:boolean" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelReservationRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="BookCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Quoted from the availability RS.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Contract" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Contract identifier. If not specified, the contract returned by operator in availability RS, will be used for reservation</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelReservationResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="RsReservation" type="tns:HotelReserved" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element is present if the reservation has succeeded. If absent, the reservation has failed. In this case Errors element will contain a brief explanation of the error. Errors and RsReservation elements are mutually exclusive.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelReserved">
        <xsd:sequence>
          <xsd:element name="OperatorCode" type="xsd:string" />
          <xsd:element name="OriginalOperatorCode" type="xsd:string" minOccurs="0" />
          <xsd:element name="BookCode" type="xsd:string" minOccurs="0" />
          <xsd:element name="BookCodeExpireDateTime" type="xsd:string" minOccurs="0" />
          <xsd:element name="Price" type="xsd:float">
            <xsd:annotation>
              <xsd:documentation>Total price of the reserved room</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CurrencyCode" type="xsd:string" />
          <xsd:element name="IncomingAgency" type="tns:HotelIncomingAgency" />
          <xsd:element name="Contract" type="xsd:string" />
          <xsd:element name="Supplements" type="tns:HotelSupplements" minOccurs="0" />
          <xsd:element name="Discounts" type="tns:HotelDiscounts" minOccurs="0" />
          <xsd:element name="AdditionalServices" type="tns:HotelAdditionalServices" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Other costs related to the whole booking (e.g. Agency Fee)</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="HotelComments" type="tns:HotelComments" minOccurs="0" />
          <xsd:element name="RateType" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>"u" - per unit, "p" - per person</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="HlRvRates" type="tns:HotelRsvRates" minOccurs="0" />
          <xsd:element name="CommissionType" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Is present in case operator returns it. Value can be one of: "%" or "flat".</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CommissionRate" type="tns:FloatWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Is present in case operator returns it (TDWS does). Meaning of this value depends on the commission type.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="BrokerID" type="xsd:string" minOccurs="0" />
          <xsd:element name="Erratum" type="xsd:string" minOccurs="0" />
          <xsd:element name="TerminalWindow" type="tns:RemarkTextType" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelRsvRates">
        <xsd:sequence>
          <xsd:element name="HlRvRate" type="tns:HotelRsvRate" maxOccurs="unbounded">
            <xsd:annotation>
              <xsd:documentation>Each element specifies the rate for the whole period of stay for a person of a given type</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HotelRsvRate">
        <xsd:sequence>
          <xsd:element name="Price" type="xsd:float" />
          <xsd:element name="CurrencyCode" type="xsd:string" />
          <xsd:element name="AgeType" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Person age type: A1 - first adult, A2 - second adult, C1 - first child, C2 - second child</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Margin" type="tns:FloatWrapper" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CancellationRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="OperatorCode" type="xsd:string" />
          <xsd:element name="BookingReference" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Operator booking reference</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CancellationResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="Cancelled" type="tns:Cancelled" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element is present in case the cancellation has succeeded.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Cancelled">
        <xsd:sequence>
          <xsd:element name="SupplierCclStatus" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element will contain one of the following strings: "Confirmed" if the booking was successfully cancelled, "Pending" if the booking cancellation is pending, or "Unknown" in case the booking has not been cancelled.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Price" type="xsd:float">
            <xsd:annotation>
              <xsd:documentation>If the operator charges for the cancellation, then this price will be displayed in this element.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CurrencyCode" type="xsd:string" />
          <xsd:element name="Notes" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CardClearanceRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="OperatorCode" type="xsd:string" minOccurs="0" />
          <xsd:element name="GUID" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Unique merchant number</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="AccountId" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Unique customer account id</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="AccountNumber" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Defines merchant parameter set to use.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="EnettDetails" type="tns:EnettDetails" minOccurs="0" />
          <xsd:element name="TerminalID" type="xsd:string" minOccurs="0" />
          <xsd:element name="TxnType" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>01 - Purchase
		02 - Refund
		04 - Cash advance
		05 - Purchase with cash back (PWCB)</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="TxnValue" type="xsd:float">
            <xsd:annotation>
              <xsd:documentation>Total value of the transaction including tax applies to: Purchase, Refund, Cheque Guarantee, Cash Advance and Purchase with Cashback. In the case of Purchase with Cashback transactions this field should only contain the values of the goods or services provided.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="TxnGSTValue" type="tns:FloatWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>The value of GST included in the amount being charged.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="TxnCurrency" type="xsd:string" minOccurs="0" />
          <xsd:element name="MerchantData" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This field is returned in the transaction response and is used as the merchant's unique reference to the transaction (this could be a customer order number for example).</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="PaymentDate" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Format: YYYY-MM-DD. Default value is current date.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="RefundPW" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Only needed for refund transactions</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Offline" type="tns:BoolWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Force transaction offline</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Online" type="tns:BoolWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Force transaction online</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CNP" type="tns:BoolWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Customer not present</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="AuthOnly" type="tns:BoolWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Just authorise transaction</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ContAuth" type="tns:BoolWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Continuous authority</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ReKeyed" type="tns:BoolWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Transaction was keyed in</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ZeroPreAuth" type="tns:BoolWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Authorization for transaction of zero value</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Unattended" type="tns:BoolWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Payment device was unattended</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ECom" type="tns:BoolWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>E-Commerce transaction</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ElectronCNP" type="tns:BoolWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Electron specific customer not present</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="PayerAuth" type="tns:BoolWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Payer Authentication has already been verified on the pre-auth</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FullAuth" type="tns:BoolWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Only used for Commidea V3 (PayerAuth method). Set it to true if Enrolled = Y and Authenticated = Y otherwise set it to false.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Pan" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Card number (when the card has been keyed).</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CardHolderName" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Card holder name (when the card has been keyed).</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Track2" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Entire contents of Track2 including start sentinel, end sentinel and LRC.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CSC" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Amex Cards: 0 digits printed on the front of the card, at the end of the card number.
		All Other Cards: 3 or 4 digits printed on the signature strip on the reverse of the card, at the end of the card number.
		</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="AVS" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This field is checked by the Address Verification System (AVS) Add On Module, and is ignored if the AVS module is not enabled. AVS configuration can make this field mandatory. Format: (House number of name); (Post code) [Country code>] Do not include any commas in house names. Truncate the house name to keep the field within length limitation (40 characters). Country code reserved for future use. Currently ignored.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ExpiryDate" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Card expiry month and year as shown on the front of the card in the format MMYY. Only required when card is keyed (otherwise calculated from Track2).</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Issue" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>1 or 2 digit card issue number as shown on the front of the card. Only required by some Switch, Solo and Laser cards. Required only when card is keyed (otherwise calculated from Track2). If not required, leave blank.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="StartDate" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Card start date month and year as shown on the front of the card. Only required for American Express, Diners Club International, some Switch, some Solo and some Laser Cards. Only required when card is keyed (otherwise calculated from Track2). If not required, leave blank.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CashBack" type="tns:FloatWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Total Cashback Value for Purchase with Cashback transactions (PWCB). Values will be truncated (without rounding) to the number of decimal places required for the given currency. The value should always be positive.
		Set to 0 for all transactions other than Purchase with Cashback, where transaction type is set to 05.
		</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="PassengerName" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>The name of the passenger attached to the payment being created.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="DepartureDate" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>The date of departure attached to the payment being created.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Gratuity" type="tns:FloatWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Additional value to add to the transaction total (Restaurant service charge for example).</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="AuthCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Should only be supplied for offline transactions</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="TransactionId" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Should only be supplied for refund transactions.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Reference" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Reference numbers can be supplied up to a maximum length of 50 characters. However, when forwarded to the acquirer they are truncated as follows:
		Non CPC - 25 characters
		Visa CPC - 12 characters
		Amex CPC - 12 characters
		Cendant CPC - 19 characters
		</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="POSFeatures" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>0001 Magnetic card reader
		0002 ICC reader
		0004 PIN pad
		0008 Cardholders device
		0010 Able to retain cards
		</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ICCTransCert" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Value returned by ICC terminal</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="AuthService" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation>Determines whether the transaction is authorised</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="SubmissionService" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation>Determines whether Commidea carry out the funds transfer.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FraudService" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation>Determines whether transaction is to include fraud screening.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="MerchantDetails" type="tns:MerchantDetailsType" minOccurs="0" />
          <xsd:element name="EnrollmentCode" type="xsd:string" minOccurs="0" />
          <xsd:element name="PayerAuthDetails" type="tns:PayerAuthDetails" minOccurs="0" />
          <xsd:element name="ICCDetails" type="tns:ICCDetailsType" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CardClearanceResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="Cleared" type="tns:Cleared" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Is present if clearance was successful. In this case it can be confirmed either issuing confirmation request or by phone. So, this element will contain exactly one of two child elements: Authorised (carring confirmation code) or Referred (carring phone number).</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="AvsCvcResults" type="tns:AvsCvcResults" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Results of the address and the card verification.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="EnettDetails">
        <xsd:sequence>
          <xsd:element name="MerchantECN" type="xsd:string" />
          <xsd:element name="SubmittingAgency" type="xsd:string" minOccurs="0" />
          <xsd:element name="MerchantID" type="xsd:string" minOccurs="0" />
          <xsd:element name="MasterPayee" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Cleared">
        <xsd:sequence>
          <xsd:element name="ConfirmationCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>To be used in the subsequent confirmation request.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="AuthCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element is present in case the card is cleared (not referred). This value is for your information only, should not be used in the confirmation request.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="TransactionId" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This value is used for credit card refunds cleared using Enett.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Referred" type="tns:Referred" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element is present in case the transaction is referred and requires clearance by phone (phone number is passed as a child element of Referred element). During clearance by phone, authorization code will be given, which will need to be passed to the BlackBox to confirm the request.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="AuthMessage" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Authorization message</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FloorLimit" type="tns:FloatWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Floor limit for the given card scheme.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="SettlementDate" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Format: DDMM</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ICCDetails" type="tns:ICCDetailsResponseType" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Referred">
        <xsd:sequence>
          <xsd:element name="VRTel" type="xsd:string" />
          <xsd:element name="MerchantNumber" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="AvsCvcResults">
        <xsd:sequence>
          <xsd:element name="PcAvsResult" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Postcode AVS result:
		0 - Matched
		1 - Not checked
		2 - Partial Match
		3 - Not supported by acquirer
		4 - Not matched
		5 - AVS feature not enabled on the server
		</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Ad1AvsResult" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Address line 1 AVS result:
		0 - Matched
		1 - Not checked
		2 - Partial Match
		3 - Not supported by acquirer
		4 - Not matched
		5 - AVS feature not enabled on the server
		</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CvcResult" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>CVC result:
		0 - Matched
		1 - Not checked
		3 - Not supported by acquirer
		4 - Not matched
		5 - CVC feature not enabled on the server
		</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ClearanceConfirmationRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="ConfirmationCode" type="xsd:string" />
          <xsd:element name="Confirm" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation>Set to true to confirm clearance, set to false to cancel it.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="AuthCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element is mandatory in case the transaction was referred and cleared by phone (AuthCode will be given to the client during the phone conversation). This is prohibited in case the transaction was cleared during the clearance request.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Gratuity" type="tns:FloatWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Additional value to add to the transaction total (Restaurant service charge for example).</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ClearanceConfirmationResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="ClearanceConfirmed" type="tns:BoolWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element is present if the operation was successfully completed. It will contain true if successfully confirmed and contains false of successfully cancelled.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="EnrollmentCheckRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="OperatorCode" type="xsd:string" minOccurs="0" />
          <xsd:element name="MerchantDetails" type="tns:MerchantDetailsType" />
          <xsd:element name="CardNumber" type="xsd:string" minOccurs="0" />
          <xsd:element name="CardExpYear" type="xsd:string" minOccurs="0" />
          <xsd:element name="CardExpMonth" type="xsd:string" minOccurs="0" />
          <xsd:element name="CurrencyCode" type="xsd:string" minOccurs="0" />
          <xsd:element name="CurrencyExponent" type="xsd:string" minOccurs="0" />
          <xsd:element name="BrowserAcceptHeader" type="xsd:string" minOccurs="0" />
          <xsd:element name="BrowserUserAgentHeader" type="xsd:string" minOccurs="0" />
          <xsd:element name="TransactionAmount" type="xsd:string" minOccurs="0" />
          <xsd:element name="TransactionDisplayAmount" type="xsd:string" minOccurs="0" />
          <xsd:element name="TransactionDescription" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="MerchantDetailsType">
        <xsd:sequence>
          <xsd:element name="MerchantID" type="xsd:string" minOccurs="0" />
          <xsd:element name="Passcode" type="xsd:string" minOccurs="0" />
          <xsd:element name="AccountID" type="xsd:string" minOccurs="0" />
          <xsd:element name="MerchantReference" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="EnrollmentCheckResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Enrollment" type="tns:Enrollment" minOccurs="0" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="AuthCheckRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="EnrollmentCode" type="xsd:string" />
          <xsd:element name="PARes" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="AuthCheckResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="AuthCheck" type="tns:AuthCheck" />
          <xsd:element name="TransactionID" type="xsd:string" minOccurs="0" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ICCDetailsType">
        <xsd:sequence>
          <xsd:element name="EMVTerminalType" type="xsd:string" minOccurs="0" />
          <xsd:element name="TerminalCountryCode" type="xsd:string" minOccurs="0" />
          <xsd:element name="ReasonOnlineCode" type="xsd:string" minOccurs="0" />
          <xsd:element name="ARQC" type="xsd:string" minOccurs="0" />
          <xsd:element name="AppPanSequenceNo" type="xsd:string" minOccurs="0" />
          <xsd:element name="AIP" type="xsd:string" minOccurs="0" />
          <xsd:element name="ATC" type="xsd:string" minOccurs="0" />
          <xsd:element name="UnpredictableNo" type="xsd:string" minOccurs="0" />
          <xsd:element name="TVR" type="xsd:string" minOccurs="0" />
          <xsd:element name="CryptoTxnType" type="xsd:string" minOccurs="0" />
          <xsd:element name="IADScheme" type="xsd:string" minOccurs="0" />
          <xsd:element name="IADIssuer" type="xsd:string" minOccurs="0" />
          <xsd:element name="AID" type="xsd:string" minOccurs="0" />
          <xsd:element name="AppUsageControl" type="xsd:string" minOccurs="0" />
          <xsd:element name="CryptoInfoData" type="xsd:string" minOccurs="0" />
          <xsd:element name="CVM" type="xsd:string" minOccurs="0" />
          <xsd:element name="AppVerNo" type="xsd:string" minOccurs="0" />
          <xsd:element name="TxnStatusInfo" type="xsd:string" minOccurs="0" />
          <xsd:element name="AppVer" type="xsd:string" minOccurs="0" />
          <xsd:element name="TerminalType" type="xsd:string" minOccurs="0" />
          <xsd:element name="TerminalCapabilities" type="xsd:string" minOccurs="0" />
          <xsd:element name="POSEntryMode" type="xsd:string" minOccurs="0" />
          <xsd:element name="OtherCardData" type="xsd:string" minOccurs="0" />
          <xsd:element name="IAC" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ICCDetailsResponseType">
        <xsd:sequence>
          <xsd:element name="ARC" type="xsd:string" minOccurs="0" />
          <xsd:element name="ARPC" type="xsd:string" minOccurs="0" />
          <xsd:element name="IAOD" type="xsd:string" minOccurs="0" />
          <xsd:element name="RAD" type="xsd:string" minOccurs="0" />
          <xsd:element name="ISD" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="InsuranceQuoteRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Operators" type="tns:Operators" minOccurs="0" />
          <xsd:element name="QuoteData" type="tns:QuoteData" />
          <xsd:element name="Portion" type="tns:Portion" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>If this element is omitted, the response will be returned as soon as ALL the availability from all the requested operators is collected. When this element is present in the RQ, the response will contain only first portion of the availability. For more information see the description of PortionsSequenceId element of the availability response.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="QuoteData">
        <xsd:sequence>
          <xsd:element name="TripDetails">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="StartDate" type="xsd:string">
                  <xsd:annotation>
                    <xsd:documentation>Start date of a trip.
Format: YYYY-MM-DD</xsd:documentation>
                  </xsd:annotation>
                </xsd:element>
                <xsd:element name="ReturnDate" type="xsd:string">
                  <xsd:annotation>
                    <xsd:documentation>Return date from a trip.
Format: YYYY-MM-DD</xsd:documentation>
                  </xsd:annotation>
                </xsd:element>
                <xsd:element name="Origin" type="xsd:string" minOccurs="0">
                  <xsd:annotation>
                    <xsd:documentation>Origin area (e.g. Departure airport). Mandatory for JAP, QBE</xsd:documentation>
                  </xsd:annotation>
                </xsd:element>
                <xsd:element name="Destination" type="xsd:string">
                  <xsd:annotation>
                    <xsd:documentation>Destination area (e.g. Arrival airport).</xsd:documentation>
                  </xsd:annotation>
                </xsd:element>
                <xsd:element name="TripCost" type="tns:FloatWrapper" minOccurs="0">
                  <xsd:annotation>
                    <xsd:documentation>Total cost of the travel booked</xsd:documentation>
                  </xsd:annotation>
                </xsd:element>
                <xsd:element name="Currency" type="xsd:string" minOccurs="0" />
                <xsd:element name="TripBreakdown" type="tns:TripBreakdownType" minOccurs="0">
                  <xsd:annotation>
                    <xsd:documentation>Some suppliers maintain multi-sector insurances. Implemented at JAP, CoverMore</xsd:documentation>
                  </xsd:annotation>
                </xsd:element>
                <xsd:element name="TourOperator" type="xsd:string" minOccurs="0" />
                <xsd:element name="Cruising" type="tns:CruisingType" minOccurs="0">
                  <xsd:annotation>
                    <xsd:documentation>Allowed values: International, Domestic, NoCruising. The BlackBox uses "NoCruising" value by default.</xsd:documentation>
                  </xsd:annotation>
                </xsd:element>
                <xsd:element name="SingleTrip" type="tns:BoolWrapper" minOccurs="0">
                  <xsd:annotation>
                    <xsd:documentation>Is this a one way trip (a package or travel insurance can not be soled). Default value is false</xsd:documentation>
                  </xsd:annotation>
                </xsd:element>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="Endorsements" type="tns:Endorsements" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Extension to insurance which specifies a trip (Wintersports, Golf Cover, Business Cover, Delete Cancellation, Delete Baggage, Double Excess, Excess Waiver). Applicable for Rock</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="PersonsDetails" type="tns:PersonsDetailsType" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Endorsements">
        <xsd:sequence>
          <xsd:element name="Endorsement" type="xsd:string" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="InsuranceQuoteResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="Quotes" type="tns:Quotes" minOccurs="0" />
          <xsd:element name="PortionsSequenceId" type="xsd:string" minOccurs="0" />
          <xsd:element name="OmittedOperators" type="tns:OmittedOperators" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Quotes">
        <xsd:sequence>
          <xsd:element name="Quote" type="tns:Quote" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Quote">
        <xsd:sequence>
          <xsd:element name="OperatorCode" type="xsd:string" />
          <xsd:element name="OriginalOperatorCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Original operator code returned by the TDWS-based operator.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="BookCode" type="xsd:string" />
          <xsd:element name="Price" type="xsd:float">
            <xsd:annotation>
              <xsd:documentation>Insurance price</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CurrencyCode" type="xsd:string" />
          <xsd:element name="Description" type="xsd:string" />
          <xsd:element name="Coverage" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Description of the coverage from the operator.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="TermsAndConditions" type="tns:TermsAndConditionsType" />
          <xsd:element name="AdditionalInfo" type="tns:QuoteAdditionalInfoType" minOccurs="0" />
          <xsd:element name="InsuranceSupplements" type="tns:InsuranceSupplements" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="NextInsurancePortionRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="PortionsSequenceId" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Quoted from the availability RS.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="KeepRequesting" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation>If set to true, the Black Box server will return this portion and in case more portions are available on operator servers, will keep requesting for these operators. If set to false, it will return availability obtained at that moment and will stop requesting for more portions.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="WaitingPolicy" type="tns:WaitingPolicy" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Set of waiting policy criteria controlling when the BlackBox should stop collecting results. WaitingPolicy must contain only one child element.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="MaxPortionSize" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element determines maximum number of options (hotels/flights/cars/etc) that will be returned in each response.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <!-- CAR AVAILABILITY REQUEST -->
      <xsd:complexType name="CarAvailabilityRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Operators" type="tns:Operators" minOccurs="0" />
          <xsd:element name="PickupLocation" type="tns:HotelLocation">
            <xsd:annotation>
              <xsd:documentation>Pick up point of a car.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="DropoffLocation" type="tns:HotelLocation" minOccurs="0" />
          <xsd:element name="PickupDateTime" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>The pick up date and time of a car.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="DropoffDateTime" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>The drop off date and time of a car.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Insurance" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Special optional insurance that can influence the hire price.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FrequentDriverCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Membership ID of frequent driver.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Portion" type="tns:Portion" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CarAvailabilityResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="Cars" type="tns:Cars" minOccurs="0" />
          <xsd:element name="CarSupplements" type="tns:CarSupplements" minOccurs="0" />
          <xsd:element name="CarAdditionalServices" type="tns:CarAdditionalServices" minOccurs="0" />
          <xsd:element name="Terms" type="tns:Terms" minOccurs="0" />
          <xsd:element name="PortionsSequenceId" type="xsd:string" minOccurs="0" />
          <xsd:element name="OmittedOperators" type="tns:OmittedOperators" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Cars">
        <xsd:sequence>
          <xsd:element name="Car" type="tns:Car" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Terms">
        <xsd:sequence>
          <xsd:element name="TermsAndConditions" type="tns:CarTermsAndConditions" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CarSupplements">
        <xsd:sequence>
          <xsd:element name="CarSupplementsList" type="tns:CarSupplementsList" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CarSupplementsList">
        <xsd:sequence>
          <xsd:element name="Id" type="xsd:int" />
          <xsd:element name="SupplementsList" type="tns:SupplementsList" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SupplementsList">
        <xsd:sequence>
          <xsd:element name="CarSupplement" type="tns:CarSupplement" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CarSupplement">
        <xsd:sequence>
          <xsd:element name="Code" type="xsd:string" />
          <xsd:element name="Description" type="xsd:string" />
          <xsd:element name="PriceBasis" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Description of supplement pricing basis.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Prepaid" type="tns:BoolWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>If the supplement have to be paid directly the value is TRUE, otherwise if the supplement have to be paid locally at the desk of the supplier the value is FALSE.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Price" type="tns:FloatWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Supplement price regarding to PriceBasis.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Currency" type="xsd:string" minOccurs="0" />
          <xsd:element name="Count" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This value is only returned in the CarReservationResponse to indicate the amount of reserved supplements.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="InsuranceSupplement">
        <xsd:sequence>
          <xsd:element name="Code" type="xsd:string" />
          <xsd:element name="Description" type="xsd:string" />
          <xsd:element name="PriceBasis" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>
								Description of supplement pricing basis.
							</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Price" type="xsd:float">
            <xsd:annotation>
              <xsd:documentation>
								Supplement price regarding to
								PriceBasis.
							</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Currency" type="xsd:string" minOccurs="0" />
          <xsd:element name="Count" type="xsd:int" />
          <xsd:element name="Commisionable" type="tns:BoolWrapper" minOccurs="0" />
          <xsd:element name="Mandatory" type="tns:BoolWrapper" minOccurs="0" />
          <xsd:element name="AllowQuantityEdit" type="tns:BoolWrapper" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Car">
        <xsd:sequence>
          <xsd:element name="OperatorCode" type="xsd:string" />
          <xsd:element name="OriginalOperatorCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Original operator code returned by the TDWS-based operator.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="BookCode" type="xsd:string" />
          <xsd:element name="Type" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Car type.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Price" type="xsd:float">
            <xsd:annotation>
              <xsd:documentation>Car hire price.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Adults" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>Maximum adults quantity that can reside within a car.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Children" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>Maximum children quantity that can reside within a car.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CurrencyCode" type="xsd:string" />
          <xsd:element name="HireDuration" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>Minimum car hire duration due to:
1. Pickup and dropoff datetime;
2. Operator business logic.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Description" type="xsd:string" />
          <xsd:element name="Picture" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Car picture. It can be a part of path or URL to a car picture.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Auto" type="tns:BoolWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>True if a car has automatic transmission.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="OnRequest" type="tns:BoolWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>True if a car is on a request basis only.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="LuggageBig" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Quantity of big luggages that can be stowed into a car.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="LuggageSmall" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Quantity of small luggages that can be stowed into a car.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Conditioner" type="tns:BoolWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>True if a car has air conditioning.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="DoorsQuantity" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Quantity of doors in a car.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Fuel" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Fuel type description. Only HCARS supports this feature.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Navigation" type="tns:BoolWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>True if a car has a satellite navigation.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FourWheelDrive" type="tns:BoolWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>True if a car has four wheel drive.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ValidFromDateTime" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>The date and time the car is valid from.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ValidToDateTime" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>The date and time the car is valid to.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="PickupLocation" type="tns:HotelLocation">
            <xsd:annotation>
              <xsd:documentation>Pick up location of a car.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="DropoffLocation" type="tns:HotelLocation" minOccurs="0" />
          <xsd:element name="TermsAndConditionsId" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This id value points to the appropriate id in the Terms > TermsAndConditions > Id element.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="SupplementsListId" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This id value points to the appropriate id in the CarSupplements > CarSupplementsList > Id element.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="AdditionalServicesListId" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This id value points to the appropriate id in the AdditionalServices > AdditionalServicesList > Id element.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CarTermsAndConditions">
        <xsd:sequence>
          <xsd:element name="Id" type="xsd:int" />
          <xsd:element name="Notes" type="xsd:string" />
          <xsd:element name="AgeLimits" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>Information about the driver age.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="OutOfHRCharge" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Information about the extensions to the hire duration.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="AdditionalDriver" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Information about the possibility of driving a car by another person (friend, wife etc.).</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="BabySeats" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Information about the baby seats.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="RoofRack" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Information about the roof rack.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FuelPolicy" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Information about the fuel policy.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="OptionalExtras" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Information about optional extras.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="OneWayCharge" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Information about one way charges.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="DeliveryCharge" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Information about delivery charges.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Insurance" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Information about insurances.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ExcessRefundValue" type="tns:FloatWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Damage excess refund value.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="TermsAndConditionsText" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CarAdditionalServices">
        <xsd:sequence>
          <xsd:element name="CarAdditionalServicesList" type="tns:CarAdditionalServicesList" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CarAdditionalServicesList">
        <xsd:sequence>
          <xsd:element name="Id" type="xsd:int" />
          <xsd:element name="AdditionalServicesList" type="tns:AdditionalServicesList" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="AdditionalServicesList">
        <xsd:sequence>
          <xsd:element name="CarAdditionalService" type="tns:CarAdditionalService" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CarAdditionalService">
        <xsd:sequence>
          <xsd:element name="Code" type="xsd:string" />
          <xsd:element name="Description" type="xsd:string" />
          <xsd:element name="Price" type="tns:FloatWrapper" minOccurs="0" />
          <xsd:element name="Currency" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <!-- CAR NEXT PORTION REQUEST -->
      <xsd:complexType name="NextCarPortionRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="PortionsSequenceId" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Quoted from the availability RS.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="KeepRequesting" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation>If set to true, the Black Box server will return this portion and in case more portions are available on operator servers, will keep requesting for these operators. If set to false, it will return availability obtained at that moment and will stop requesting for more portions.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="WaitingPolicy" type="tns:WaitingPolicy" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Set of waiting policy criteria controlling when the BlackBox should stop collecting results. WaitingPolicy must contain only one child element.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="MaxPortionSize" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element determines maximum number of options (hotels/flights/cars/etc) that will be returned in each response.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <!-- CAR RESERVATION REQUEST -->
      <xsd:complexType name="CarReservationRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="BookCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Quoted from availability response.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FlightInfo" type="tns:FlightInfo" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Information about customers inbound flight.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="DropoffLocation" type="tns:HotelLocation" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Drop off location of a car. Should be the same value as in availability request. Not used if client use supplier direct products</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="SupplierDirectProductInfo" type="tns:SupplierDirectProductInfo" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This information should be specified in case of supplier direct product</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CarSupplementsRequired" type="tns:CarSupplementsRequired" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SupplierDirectProductInfo">
        <xsd:sequence>
          <xsd:element name="OperatorCode" type="xsd:string" />
          <xsd:element name="CarType" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Car type.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="PickupLocation" type="tns:HotelLocation">
            <xsd:annotation>
              <xsd:documentation>Car pick up point.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="DropoffLocation" type="tns:HotelLocation">
            <xsd:annotation>
              <xsd:documentation>Car drop off location.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="PickupDateTime" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Car pick up datetime.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="DropoffDateTime" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Car drop off datetime.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Auto" type="tns:BoolWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>True if a car has automatic transmission.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Conditioner" type="tns:BoolWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>True if a car has air conditioning.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Price" type="xsd:float" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Car hire price.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CurrencyCode" type="xsd:string" minOccurs="0" />
          <xsd:element name="RateCategory" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>OTA Code (applicable to AVIS)</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="RateQualifier" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Code representing a contracted agreement between the partner and CCRG which reflects rates and vehicle availability (applicable to AVIS)</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CarSupplementsRequired">
        <xsd:sequence>
          <xsd:element name="CarSupplementRequired" type="tns:CarSupplementRequired" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CarSupplementRequired">
        <xsd:sequence>
          <xsd:element name="Code" type="xsd:string" />
          <xsd:element name="Count" type="xsd:int" />
        </xsd:sequence>
      </xsd:complexType>
      <!-- CAR RESERVATION RESPONSE -->
      <xsd:complexType name="CarReservationResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="Reservation" type="tns:TransferReserved" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element is present if the reservation has succeeded.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CarRsvSupplements" type="tns:CarRsvSuppelements" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CarRsvSuppelements">
        <xsd:sequence>
          <xsd:element name="CarRsvSupplement" type="tns:CarSupplement" maxOccurs="unbounded">
            <xsd:annotation>
              <xsd:documentation>Supplement to reserve returned in the CarAvailabilityResponse.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <!-- TRANSFER AVAILABILITY REQUEST -->
      <xsd:complexType name="TransferAvailabilityRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Operators" type="tns:Operators" minOccurs="0" />
          <xsd:element name="Airport" type="tns:FlightRequestAirport">
            <xsd:annotation>
              <xsd:documentation>Airport where you arrive/departure.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Location" type="tns:HotelLocation">
            <xsd:annotation>
              <xsd:documentation>Location where you want to be transferred from the airport and back (airport and resort codes, e.g. TFS.2153).</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ArrivalDateTime" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Date time of arrival at the holiday resort. Format: YYYY-MM-DDTHH:MM:SS Arrival date time and departure date time cannot be empty.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="DepartureDateTime" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Date time of departure from the holiday resort. Format: YYYY-MM-DDTHH:MM:SS Departure date time and arrival date time cannot be empty.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="TravelerInformation" type="tns:FlightTravelerInformation" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Passenger quantity for the transfer.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="BookCodes" type="tns:BookCodes" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element is specific for BDS transfers. It must contain all of the selected BDS rooms book codes, that will be associated with transfer, because BDS only supports transfers linked to it's own rooms.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="OperSpecificTransferPrefs" type="tns:OperatorSpecificTransferPrefs" minOccurs="0" />
          <xsd:element name="Portion" type="tns:Portion" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <!-- TRANSFER AVAILABILITY RESPONSE -->
      <xsd:complexType name="TransferAvailabilityResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="Transfers" type="tns:Transfers" minOccurs="0" />
          <xsd:element name="PortionsSequenceId" type="xsd:string" minOccurs="0" />
          <xsd:element name="OmittedOperators" type="tns:OmittedOperators" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Transfers">
        <xsd:sequence>
          <xsd:element name="Transfer" type="tns:Transfer" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Transfer">
        <xsd:sequence>
          <xsd:element name="OperatorCode" type="xsd:string" />
          <xsd:element name="OriginalOperatorCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Original operator code returned by the TDWS-based operator.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="BookCode" type="xsd:string" />
          <xsd:element name="BookCodeExpireDateTime" type="xsd:string" minOccurs="0" />
          <xsd:element name="Name" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Type of vehicle is used for the transfer such as: Taxi, Minibus.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Description" type="xsd:string" />
          <xsd:element name="Image" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Transfer vehicle image.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="NumberOfTransfersAvailable" type="tns:IntWrapper" minOccurs="0" />
          <xsd:element name="Price" type="xsd:float">
            <xsd:annotation>
              <xsd:documentation>Transfer Price. Doesn't contain night charge</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="PerPerson" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation>If True Price is per person.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="BasePrice" type="tns:FloatWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Price per person or per vehicle. It depends on PerPerson value </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="NumberOfVehicles" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Presents only if PerPerson=false</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CurrencyCode" type="xsd:string" />
          <xsd:element name="MinPax" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>Minimum number of passengers allowed in the transfer.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="MaxPax" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>Maximum number of passengers allowed in the transfer.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="MaxLuggage" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Quantity of luggage that can be stowed into a car.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="HasNightSupplement" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation>True if the transfer has night supplement.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="NightRates" type="tns:NightRates" minOccurs="0" />
          <xsd:element name="NightRateCalc" type="tns:NightRateCalc" minOccurs="0" />
          <xsd:element name="RequiresAddress" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation>The accommodation address must be specified in the reservation request if this value is True.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="TransferMinutes" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>Duration of transfer in minutes.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Airport" type="tns:FlightRequestAirport">
            <xsd:annotation>
              <xsd:documentation>For more information see TransferAvailabilityRequest > Airport</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Location" type="tns:HotelLocation">
            <xsd:annotation>
              <xsd:documentation>For more information see TransferAvailabilityRequest > Location.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Notes" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <!-- TRANSFER NEXT PORTION REQUEST -->
      <xsd:complexType name="NextTransferPortionRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="PortionsSequenceId" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Quoted from the availability RS.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="KeepRequesting" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation>If set to true, the Black Box server will return this portion and in case more portions are available on operator servers, will keep requesting for these operators. If set to false, it will return availability obtained at that moment and will stop requesting for more portions.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="WaitingPolicy" type="tns:WaitingPolicy" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Set of waiting policy criteria controlling when the BlackBox should stop collecting results. WaitingPolicy must contain only one child element.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="MaxPortionSize" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element determines maximum number of options (hotels/flights/cars/etc) that will be returned in each response.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <!-- TRANSFER RESERVATION REQUEST -->
      <xsd:complexType name="TransferReservationRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="BookCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Quoted from availability response.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="VehiclesQuantity" type="xsd:int" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Quantity of vehicles to reserve for transfer.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="TravelerInformation" type="tns:FlightTravelerInformation">
            <xsd:annotation>
              <xsd:documentation>Passenger quantity for the transfer.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ArrivalJourney" type="tns:JourneyDetail" minOccurs="0" />
          <xsd:element name="DepartureJourney" type="tns:JourneyDetail" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Describes transfer from hotel to airport. 
1. Return journey services your arrival and departure (provide arrival and departure details); 
2. Single outbound (outward) journey services your arrival (just provide arrival details); 
3. Single return journey services your departure (just provide departure details).</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="JourneyDetail">
        <xsd:sequence>
          <xsd:element name="FlightInfo" type="tns:FlightInfo" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Information about the customer’s inbound/outbound flight.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="PickupDateTime" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Format: YYYY-MM-DDTHH:MM:SS</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Accommodation" type="tns:AccommodationInfo" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Exact name and address of the hotel where the customer needs to be transferred to or from.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightInfo">
        <xsd:sequence>
          <xsd:element name="AirportCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Arrival/departure airport. In the case of the arrival journey this is the departure airport, otherwise this is the arrival airport.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FlightNumber" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Flight number. This information and the ArrivalDateTime in the availability RQ is enough for a supplier to pick up the customer from the airport.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="DepartureDateTime" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Departure date/time. Format: YYYY-MM-DDTHH:MM:SS </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ArrivalDateTime" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Arrival date/time. Format: YYYY-MM-DDTHH:MM:SS</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="AccommodationInfo">
        <xsd:sequence>
          <xsd:element name="Code" type="xsd:string" minOccurs="0" />
          <xsd:element name="OperCode" type="xsd:string" minOccurs="0" />
          <xsd:element name="Name" type="xsd:string" />
          <xsd:element name="Address" type="tns:FlightPassAddress" />
          <xsd:element name="Contact" type="tns:ContactDetails" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <!-- TRANSFER RESERVATION RESPONSE -->
      <xsd:complexType name="TransferReservationResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="Reservation" type="tns:TransferReserved" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element is present if the reservation has succeeded.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TransferReserved">
        <xsd:sequence>
          <xsd:element name="OperatorCode" type="xsd:string" />
          <xsd:element name="OriginalOperatorCode" type="xsd:string" minOccurs="0" />
          <xsd:element name="BookCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>The value will be present only for supplier direct products.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="BookCodeExpireDateTime" type="xsd:string" minOccurs="0" />
          <xsd:element name="Price" type="xsd:float">
            <xsd:annotation>
              <xsd:documentation>Total price of the reserved vehicle.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CurrencyCode" type="xsd:string" />
          <xsd:element name="Notes" type="xsd:string" minOccurs="0" />
          <xsd:element name="TerminalWindow" type="tns:RemarkTextType" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <!-- TOUR AVAILABILITY REQUEST -->
      <xsd:complexType name="TourAvailabilityRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Operators" type="tns:Operators" minOccurs="0" />
          <xsd:element name="StayDateRange" type="tns:HotelStayDateRange" />
          <xsd:element name="RoomStayCandidate" type="tns:HotelRoomStayCandidate" />
          <xsd:element name="TourSearchCriterion" type="tns:TourSearchCriterion" />
          <xsd:element name="Portion" type="tns:Portion" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>If this element is omitted, the response will be returned as soon as ALL the availability from all the requested operators is collected. When this element is present in the RQ, the response will contain only first portion of the availability. For more information see the description of PortionsSequenceId element of the availability response.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TourSearchCriterion">
        <xsd:sequence>
          <xsd:element name="Locations" type="tns:HotelLocations" />
          <xsd:element name="FlightClass" type="xsd:string" minOccurs="0" />
          <xsd:element name="AccommodationCategory" type="xsd:string" minOccurs="0" />
          <xsd:element name="AccommodationBoardType" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <!-- TOUR AVAILABILITY RESPONSE -->
      <xsd:complexType name="TourAvailabilityResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="Tours" type="tns:Tours" minOccurs="0" />
          <xsd:element name="OmittedOperators" type="tns:OmittedOperators" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>List of operators, for which was not possible to construct the RQ.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="PortionsSequenceId" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>If this element is present, it specifies the next available portion ID, which can be used by the client in the "Next portion RQ" to retrieve the next set of results. If the element is absent, it means this is the last portion and no more results to gather.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Tours">
        <xsd:sequence>
          <xsd:element name="Tour" type="tns:Tour" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Tour">
        <xsd:sequence>
          <xsd:element name="BookCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Used in further reservation RQ.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="PerRoomRecordNumber" type="xsd:int" />
          <xsd:element name="TourInfo" type="tns:TourInfo" />
          <xsd:element name="TourPricing" type="tns:TourPricing" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TourInfo">
        <xsd:sequence>
          <xsd:element name="TourCode" type="xsd:string" />
          <xsd:element name="TourName" type="xsd:string" />
          <xsd:element name="TourFlightInfo" type="tns:TourFlightInfo" />
          <xsd:element name="TourStayInfo" type="tns:TourStayInfo" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TourFlightInfo">
        <xsd:sequence>
          <xsd:element name="DepartureDate" type="xsd:string" />
          <xsd:element name="DepartureAirport" type="xsd:string" />
          <xsd:element name="ArrivalAirport" type="xsd:string" />
          <xsd:element name="CarrierCode" type="xsd:string" minOccurs="0" />
          <xsd:element name="FlightClass" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TourStayInfo">
        <xsd:sequence>
          <xsd:element name="Nights" type="xsd:int" />
          <xsd:element name="RoomType" type="tns:TourRoomType" />
          <xsd:element name="TourAccommodationCategory" type="tns:TourAccommodationCategory" />
          <xsd:element name="TourAccommodationBoardType" type="tns:TourAccommodationBoardType" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TourRoomType">
        <xsd:sequence>
          <xsd:element name="Code" type="xsd:string" />
          <xsd:element name="Description" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TourAccommodationBoardType">
        <xsd:sequence>
          <xsd:element name="Code" type="xsd:string" />
          <xsd:element name="Description" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TourAccommodationCategory">
        <xsd:sequence>
          <xsd:element name="Code" type="xsd:string" />
          <xsd:element name="Description" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TourPricing">
        <xsd:sequence>
          <xsd:element name="TotalPrice" type="xsd:float" />
          <xsd:element name="CurrencyCode" type="xsd:string" />
          <xsd:element name="AdultPrice" type="tns:FloatWrapper" minOccurs="0" />
          <xsd:element name="ChildPrice" type="tns:FloatWrapper" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="NextTourPortionRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="PortionsSequenceId" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Quoted from the availability RS.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="KeepRequesting" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation>If set to true, the Black Box server will return this portion and in case more portions are available on operator servers, will keep requesting for these operators. If set to false, it will return availability obtained at that moment and will stop requesting for more portions.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="WaitingPolicy" type="tns:WaitingPolicy" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Set of waiting policy criteria controlling when the BlackBox should stop collecting results. WaitingPolicy must contain only one child element.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="MaxPortionSize" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element determines maximum number of options (hotels/flights/cars/etc) that will be returned in each response.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <!-- TOUR RESERVATION REQUEST -->
      <xsd:complexType name="TourReservationRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="BookCode" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <!-- TOUR RESERVATION RESPONSE-->
      <xsd:complexType name="TourReservationResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="ReservedTour" type="tns:ReservedTour" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ReservedTour">
        <xsd:sequence>
          <xsd:element name="ReservedItineraries" type="tns:ReservedItineraries">
            <xsd:annotation>
              <xsd:documentation>The tour may contain several itineraries, e.g. a flight, hotel stay, safari ride, flight back</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ReservedTourPricing" type="tns:ReservedTourPricing">
            <xsd:annotation>
              <xsd:documentation>This section provides basic pricing information: total including all taxes, optional per adult and per child prices</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ImportantNotes" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ReservedTourPricing">
        <xsd:sequence>
          <xsd:element name="TotalPrice" type="xsd:float" />
          <xsd:element name="CurrencyCode" type="xsd:string" />
          <xsd:element name="TourInvoiceItems" type="tns:TourInvoiceItems" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TourInvoiceItems">
        <xsd:sequence>
          <xsd:element name="TourInvoiceItem" type="tns:TourInvoiceItem" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TourInvoiceItem">
        <xsd:sequence>
          <xsd:element name="ItemName" type="xsd:string" />
          <xsd:element name="NumberOfPax" type="xsd:int" />
          <xsd:element name="TotalPrice" type="xsd:float" />
          <xsd:element name="PricePerPax" type="tns:FloatWrapper" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ReservedItineraries">
        <xsd:sequence>
          <xsd:element name="ReservedItinerary" type="tns:ReservedItinerary" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ReservedItinerary">
        <xsd:sequence>
          <xsd:element name="ItinerarySequenceNumber" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>The sequence number of a given itinerary. The tour events will proceed in the order specified by this number</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ItineraryTypeCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>The itinerary code determines the types of itinerary: a flight, a hotel stay, a trip to the pyramids, etc.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Description" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>A brief description of the itinerary in human readable form</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="StartDate" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>The date when the event will take place</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Nights" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>The number of nights of stay if this itinerary is a hotel</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <!-- OTHER PRODUCT AVAILABILITY REQUEST -->
      <xsd:complexType name="OtherProductAvailabilityRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Operators" type="tns:Operators" minOccurs="0" />
          <xsd:element name="StayDateRange" type="tns:HotelStayDateRange" />
          <xsd:element name="RoomStayCandidate" type="tns:HotelRoomStayCandidate">
            <xsd:annotation>
              <xsd:documentation>Defines the allocation of passengers to rooms or seats for the product</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="OtherProductSearchCriterion" type="tns:OtherProductSearchCriterion" />
          <xsd:element name="Portion" type="tns:Portion" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>If this element is omitted, the response will be returned as soon as ALL the availability from all the requested operators is collected. When this element is present in the RQ, the response will contain only first portion of the availability. For more information see the description of PortionsSequenceId element of the availability response.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="OtherProductSearchCriterion">
        <xsd:sequence>
          <xsd:element name="Locations" type="tns:HotelLocations" />
        </xsd:sequence>
      </xsd:complexType>
      <!-- OTHER PRODUCT AVAILABILITY RESPONSE -->
      <xsd:complexType name="OtherProductAvailabilityResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="OtherProducts" type="tns:OtherProducts" minOccurs="0" />
          <xsd:element name="PortionsSequenceId" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>If this element is present, it specifies the next available portion ID, which can be used by the client in the "Next portion RQ" to retrieve the next set of results. If the element is absent, it means this is the last portion and no more results to gather.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="OtherProducts">
        <xsd:sequence>
          <xsd:element name="OtherProduct" type="tns:OtherProduct" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="OtherProduct">
        <xsd:sequence>
          <xsd:element name="OperatorCode" type="xsd:string" />
          <xsd:element name="BookCode" type="xsd:string" />
          <xsd:element name="Status" type="tns:OtherProductStatus" />
          <xsd:element name="OtherProductInfo" type="tns:OtherProductInfo" />
          <xsd:element name="OtherProductPricing" type="tns:OtherProductPricing" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="OtherProductStatus">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="Available" />
          <xsd:enumeration value="FreeSold" />
          <xsd:enumeration value="OnRequest" />
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="OtherProductInfo">
        <xsd:sequence>
          <xsd:element name="Name" type="xsd:string" />
          <xsd:element name="Description" type="xsd:string" minOccurs="0" />
          <xsd:element name="URL" type="xsd:string" minOccurs="0" />
          <xsd:element name="Notes" type="tns:RemarkTextType" minOccurs="0" />
          <xsd:element name="Location" type="tns:HotelLocation" />
          <xsd:element name="SupplierName" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="OtherProductPricing">
        <xsd:sequence>
          <xsd:element name="TotalPrice" type="xsd:float" />
          <xsd:element name="CurrencyCode" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="NextOtherProductPortionRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="PortionsSequenceId" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Quoted from the availability RS.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="KeepRequesting" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation>If set to true, the Black Box server will return this portion and in case more portions are available on operator servers, will keep requesting for these operators. If set to false, it will return availability obtained at that moment and will stop requesting for more portions.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="WaitingPolicy" type="tns:WaitingPolicy" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Set of waiting policy criteria controlling when the BlackBox should stop collecting results. WaitingPolicy must contain only one child element.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="MaxPortionSize" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element determines maximum number of options (hotels/flights/cars/etc) that will be returned in each response.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <!-- OTHER PRODUCT INFO REQUEST -->
      <xsd:complexType name="OtherProductInfoRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="BookCode" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <!-- OTHER PRODUCT INFO RESPONSE-->
      <xsd:complexType name="OtherProductInfoResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="OtherProductDetailedInfo" type="tns:OtherProductDetailedInfo" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="OtherProductDetailedInfo">
        <xsd:sequence>
          <xsd:element name="OperatorCode" type="xsd:string" />
          <xsd:element name="Name" type="xsd:string" />
          <xsd:element name="SupplierInfo" type="tns:OtherProductSupplierInfo" />
          <xsd:element name="ProductTextInfo" type="tns:OtherProductTextInfo" />
          <xsd:element name="OtherProdFareData" type="tns:OtherProductFareData" />
          <xsd:element name="TerminalWindow" type="tns:RemarkTextType" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="OtherProductSupplierInfo">
        <xsd:sequence>
          <xsd:element name="Address" type="tns:ProductAddress" minOccurs="0" />
          <xsd:element name="PhoneNumber" type="xsd:string" minOccurs="0" />
          <xsd:element name="FaxNumber" type="xsd:string" minOccurs="0" />
          <xsd:element name="EmailAddress" type="xsd:string" minOccurs="0" />
          <xsd:element name="WebSite" type="xsd:string" minOccurs="0" />
          <xsd:element name="SupplierNotes" type="tns:NvpNotes" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ProductAddress">
        <xsd:sequence>
          <xsd:element name="Airport" type="tns:AirportCode" />
          <xsd:element name="Resort" type="tns:HotelResort" minOccurs="0" />
          <xsd:element name="AddressLine" type="xsd:string" minOccurs="0" />
          <xsd:element name="PostalCode" type="xsd:string" minOccurs="0" />
          <xsd:element name="Country" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="AirportCode">
        <xsd:sequence>
          <xsd:element name="Code" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="NvpNotes">
        <xsd:sequence>
          <xsd:element name="Note" type="tns:NameValueType" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="OtherProductTextInfo">
        <xsd:sequence>
          <xsd:element name="ProductDescription" type="xsd:string" minOccurs="0" />
          <xsd:element name="ItineraryText" type="xsd:string" minOccurs="0" />
          <xsd:element name="VoucherText" type="xsd:string" minOccurs="0" />
          <xsd:element name="ProductNotes" type="tns:NvpNotes" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="OtherProductFareData">
        <xsd:sequence>
          <xsd:element name="TotalPrice" type="tns:FloatWrapper" minOccurs="0" />
          <xsd:element name="OtherProdPricingNotes" type="tns:NvpNotes" minOccurs="0" />
          <xsd:element name="OtherProdFareDetails" type="tns:OtherProductFareDetailsList" minOccurs="0" />
          <xsd:element name="CurrencyCode" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="OtherProductFareDetailsList">
        <xsd:sequence>
          <xsd:element name="OtherProdDetails" type="tns:OtherProductFareDetails" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="OtherProductFareDetails">
        <xsd:sequence>
          <xsd:element name="PersonAgeCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Possible values: A= Adult, C = Child, I = Infant.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="MinAge" type="tns:IntWrapper" minOccurs="0" />
          <xsd:element name="MaxAge" type="tns:IntWrapper" minOccurs="0" />
          <xsd:element name="Quantity" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Number of Passengers this applies to</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Each" type="tns:FloatWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>
								Price for one person of given type
							</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="TotalFare" type="tns:FloatWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>
								Total price for all the passengers of given types
							</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <!-- OTHER PRODUCT RESERVATION REQUEST -->
      <xsd:complexType name="OtherProductReservationRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="BookCode" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <!-- OTHER PRODUCT RESERVATION RESPONSE-->
      <xsd:complexType name="OtherProductReservationResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="ReservedOtherProduct" type="tns:ReservedOtherProduct" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ReservedOtherProduct">
        <xsd:sequence>
          <xsd:element name="OperatorCode" type="xsd:string" />
          <xsd:element name="ReservedOtherProductPricing" type="tns:ReservedOtherProductPricing" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ReservedOtherProductPricing">
        <xsd:sequence>
          <xsd:element name="TotalPrice" type="xsd:float" />
          <xsd:element name="CurrencyCode" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <!-- RELOAD CONFIGURATION REQUEST -->
      <xsd:complexType name="ReloadConfigurationRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <!-- RELOAD CONFIGURATION RESPONSE -->
      <xsd:complexType name="ReloadConfigurationResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CreditRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="OperatorCode" type="xsd:string" />
          <xsd:element name="ClientType" type="xsd:string" />
          <xsd:element name="ClientID" type="xsd:string" />
          <xsd:element name="Amount" type="xsd:float" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CreditResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="Failed" type="xsd:boolean" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="AddSessionInfoRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="SessionInfo" type="tns:SessionInfo" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SessionInfo">
        <xsd:sequence>
          <xsd:element name="NameValuePair" type="tns:NameValueType" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="AddSessionInfoResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="DirectDebitRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="OperatorCode" type="xsd:string" />
          <xsd:element name="AccountId" type="xsd:string" />
          <xsd:element name="SecondaryPartyAccountId" type="xsd:string" />
          <xsd:element name="Payer" type="xsd:string" minOccurs="0" />
          <xsd:element name="TxnValue" type="xsd:float" />
          <xsd:element name="TxnCurrency" type="xsd:string" minOccurs="0" />
          <xsd:element name="PaymentDate" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Format: YYYY-MM-DD. Default value is current date.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="MerchantData" type="xsd:string" minOccurs="0" />
          <xsd:element name="PassengerName" type="xsd:string" minOccurs="0" />
          <xsd:element name="DepartureDate" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="DirectDebitResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="TransactionId" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightETicketFormOfIdentification">
        <xsd:sequence>
          <xsd:element name="PassportNumberRequired" type="tns:BoolWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This tag is present when airline requires Passport Number for identification</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FrequentFlyerNumberRequired" type="tns:BoolWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This tag is present when airline requires Frequent Flyer Number for identification</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CreditCardNumberRequired" type="tns:BoolWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This tag is present when airline requires Credit Card Number for identification. Next tag specifies valid credit card types</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CreditCardTypes" type="tns:CreditCardTypes" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Valid Credit Card types are enumerated here</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CreditCardTypes">
        <xsd:sequence>
          <xsd:element name="CreditCardType" type="xsd:string" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightETicketIdentification">
        <xsd:sequence>
          <xsd:element name="PassportNumber" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Passport Number of the lead passenger.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FrequentFlyerNumber" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Frequent Flyer Number of the lead Passenger.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CreditCardType" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>The type of Credit Card of the lead passenger. Full list of the valid CreditCardTypes can be obtained using GetBBCategryData request.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CreditCardNumber" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>The credit card number of the lead passenger.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightTicketing">
        <xsd:sequence>
          <xsd:element name="TicketingDate" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Format: YYYY-MM-DD</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="TicketType" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>TicketType:
P - paper ticket
E - electronic ticket</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FormOfPayment" type="tns:FormOfPayment" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element includes information about the payment method.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FlightDiscountAmount" type="tns:FloatWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Used to pass discount information. Implemented only in Sabre</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <!-- SUPPLEMENT LIST REQUEST -->
      <xsd:complexType name="SupplementListRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="OperatorCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Code of (TDWS-based) the operator who this RQ will be sent to.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="SupplementsOperatorCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Code of the operator whose supplements should be returned.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="DepartureDate" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Format: YYYY-MM-DD</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ArrivalAirport" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>3 Character IATA Airport code.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="SupplierID" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Supplier ID returned by the TDWS-based operator.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <!-- SUPPLEMENT LIST RESPONSE -->
      <xsd:complexType name="SupplementListResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="SupplementList" minOccurs="0">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="Supplements">
                  <xsd:complexType>
                    <xsd:sequence>
                      <xsd:element name="SupplementInfo" type="tns:FlightRsSupplementType" maxOccurs="unbounded" />
                    </xsd:sequence>
                  </xsd:complexType>
                </xsd:element>
                <xsd:element name="AddAPD" type="tns:BoolWrapper" minOccurs="0" />
                <xsd:element name="SubtractAPD" type="tns:BoolWrapper" minOccurs="0" />
                <xsd:element name="SubtractLB" type="tns:BoolWrapper" minOccurs="0" />
                <xsd:element name="SubtractSec" type="tns:BoolWrapper" minOccurs="0" />
                <xsd:element name="SubtractFuel" type="tns:BoolWrapper" minOccurs="0" />
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <!-- COMMISSION REQUEST -->
      <xsd:complexType name="CommissionRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="OperatorCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Code of (TDWS-based) the operator who this RQ will be sent to.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CommissionOperatorCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Code of the operator whose commission should be returned.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CType" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Supplier's commission type, one of: CFLIGHTS, SFLIGHTS, EXT, CARHIRE, INSURANCE, ACCOMM, PARKING, COMMALL</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="SupplierID" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Supplier ID returned by the TDWS-based operator.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="DepartureDate" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Format: YYYY-MM-DD</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="PaxNum" type="tns:IntWrapper" minOccurs="0" />
          <xsd:element name="Duration" type="tns:IntWrapper" minOccurs="0" />
          <xsd:element name="RegionCode" type="xsd:string" />
          <xsd:element name="ResortCode" type="xsd:string" />
          <xsd:element name="HotelCode" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <!-- COMMISSION RESPONSE -->
      <xsd:complexType name="CommissionResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="CommissionsList" minOccurs="0">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="Commission" maxOccurs="unbounded">
                  <xsd:complexType>
                    <xsd:sequence>
                      <xsd:element name="XType" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                          <xsd:documentation>Equals to either 'COMMISSION' or 'MARGIN'.</xsd:documentation>
                        </xsd:annotation>
                      </xsd:element>
                      <xsd:element name="CommissionOperatorCode" type="xsd:string" minOccurs="0" />
                      <xsd:element name="SupplierID" type="xsd:string" minOccurs="0" />
                      <xsd:element name="Rate" type="xsd:string" minOccurs="0" />
                      <xsd:element name="Apply" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                          <xsd:documentation>One of: %, FLAT, FIXE.</xsd:documentation>
                        </xsd:annotation>
                      </xsd:element>
                      <xsd:element name="How" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                          <xsd:documentation>One of: PB, PP.</xsd:documentation>
                        </xsd:annotation>
                      </xsd:element>
                      <xsd:element name="Section" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                          <xsd:documentation>One of: NORMAL, SUPP.</xsd:documentation>
                        </xsd:annotation>
                      </xsd:element>
                      <xsd:element name="HotelCode" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                          <xsd:documentation>One of: code or ALL.</xsd:documentation>
                        </xsd:annotation>
                      </xsd:element>
                      <xsd:element name="ResortCode" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                          <xsd:documentation>One of: code or ALL.</xsd:documentation>
                        </xsd:annotation>
                      </xsd:element>
                      <xsd:element name="RegionCode" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                          <xsd:documentation>One of: code or ALL.</xsd:documentation>
                        </xsd:annotation>
                      </xsd:element>
                    </xsd:sequence>
                  </xsd:complexType>
                </xsd:element>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ParkingAvailabilityRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Operators" type="tns:Operators" minOccurs="0" />
          <xsd:element name="Airport" type="tns:FlightRequestAirport" />
          <xsd:element name="ArrivalDateTime" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Arrival date and time to the car park. Format: YYYY-MM-DDTHH:MM:SS</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="DepartureDateTime" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Departure date and time from the car park. Format: YYYY-MM-DDTHH:MM:SS</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Portion" type="tns:Portion" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ParkingAvailabilityResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="Parkings" type="tns:Parkings" minOccurs="0" />
          <xsd:element name="PortionsSequenceId" type="xsd:string" minOccurs="0" />
          <xsd:element name="OmittedOperators" type="tns:OmittedOperators" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="NextParkingPortionRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="PortionsSequenceId" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Quoted from the availability RS.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="KeepRequesting" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation>If set to true, the Black Box server will return this portion and in case more portions are available on operator servers, will keep requesting for these operators. If set to false, it will return availability obtained at that moment and will stop requesting for more portions.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="WaitingPolicy" type="tns:WaitingPolicy" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Set of waiting policy criteria controlling when the BlackBox should stop collecting results. WaitingPolicy must contain only one child element.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="MaxPortionSize" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element determines maximum number of options (hotels/flights/cars/etc) that will be returned in each response.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Parkings">
        <xsd:sequence>
          <xsd:element name="Parking" type="tns:Parking" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Parking">
        <xsd:sequence>
          <xsd:element name="OperatorCode" type="xsd:string" />
          <xsd:element name="OriginalOperatorCode" type="xsd:string" minOccurs="0" />
          <xsd:element name="BookCode" type="xsd:string" />
          <xsd:element name="Airport" type="tns:FlightRequestAirport" />
          <xsd:element name="Code" type="xsd:string" />
          <xsd:element name="Name" type="xsd:string" />
          <xsd:element name="OnAirport" type="tns:BoolWrapper" minOccurs="0" />
          <xsd:element name="ValetService" type="tns:BoolWrapper" minOccurs="0" />
          <xsd:element name="MinPriceDuration" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Minimum duration (in days) to be paid</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="TotalPrice" type="xsd:float" />
          <xsd:element name="CurrencyCode" type="xsd:string" />
          <xsd:element name="Notes" type="xsd:string" minOccurs="0" />
          <xsd:element name="RequestedInfo" type="tns:ParkingRequestedInfo" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This information is requested by the supplier.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ParkingRequestedInfo">
        <xsd:sequence>
          <xsd:element name="Registration" type="xsd:boolean" minOccurs="0" />
          <xsd:element name="CarMake" type="xsd:boolean" minOccurs="0" />
          <xsd:element name="CarModel" type="xsd:boolean" minOccurs="0" />
          <xsd:element name="CarColour" type="xsd:boolean" minOccurs="0" />
          <xsd:element name="OutFlight" type="xsd:boolean" minOccurs="0" />
          <xsd:element name="ReturnFlight" type="xsd:boolean" minOccurs="0" />
          <xsd:element name="OutTerminal" type="xsd:boolean" minOccurs="0" />
          <xsd:element name="ReturnTerminal" type="xsd:boolean" minOccurs="0" />
          <xsd:element name="CreditCard" type="xsd:boolean" minOccurs="0" />
          <xsd:element name="Destination" type="xsd:boolean" minOccurs="0" />
          <xsd:element name="MobileNum" type="xsd:boolean" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ParkingReservationRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="BookCode" type="xsd:string" />
          <xsd:element name="PaxNumber" type="tns:IntWrapper" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ParkingReservationResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="ParkReserved" type="tns:ParkReserved" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element is mutually exclusive with Errors: reservation either succeeded (ParkReserved tag is present, Errors is absent) or failed (ParkReserved is absent, Errors is present)</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ParkReserved">
        <xsd:sequence>
          <xsd:element name="OperatorCode" type="xsd:string" />
          <xsd:element name="OriginalOperatorCode" type="xsd:string" minOccurs="0" />
          <xsd:element name="Duration" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>Actual duration to pay</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="MinPriceDuration" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Minimum duration (in days) to be paid</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CreditCardAmount" type="tns:FloatWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Amount that client has to pay as credit card fee. This amount will appear in the ConfirmationResponse > CreditCardFee</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="TotalPrice" type="xsd:float" />
          <xsd:element name="CurrencyCode" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ParkingInfoRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="BookCode" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ParkingInfoResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="ParkingInfo" type="tns:ParkingInfo" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ParkingInfo">
        <xsd:sequence>
          <xsd:element name="OperatorCode" type="xsd:string" />
          <xsd:element name="OriginalOperatorCode" type="xsd:string" minOccurs="0" />
          <xsd:element name="Code" type="xsd:string" />
          <xsd:element name="Name" type="xsd:string" />
          <xsd:element name="Address" type="xsd:string" />
          <xsd:element name="Telephone" type="xsd:string" />
          <xsd:element name="Fax" type="xsd:string" />
          <xsd:element name="Directions" type="xsd:string" minOccurs="0" />
          <xsd:element name="Offers" type="xsd:string" minOccurs="0" />
          <xsd:element name="ProductInfo" type="xsd:string" minOccurs="0" />
          <xsd:element name="Features" type="tns:Features" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ParkingConditions">
        <xsd:sequence>
          <xsd:element name="ParkingCondition" type="tns:CodeAndDescription" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ParkingFacilities">
        <xsd:sequence>
          <xsd:element name="ParkingFacility" type="tns:CodeAndDescription" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Features">
        <xsd:sequence>
          <xsd:element name="Feature" type="tns:CodeAndDescription" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryRsvPassengerRs">
        <xsd:sequence>
          <xsd:element name="TypeCode" type="xsd:string" />
          <xsd:element name="Number" type="xsd:int" />
          <xsd:element name="ChargeAmount" type="xsd:float" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This is the price for each of the number of passengers</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FerryRsvPassengersRs">
        <xsd:sequence>
          <xsd:element name="FerryRsvPassengerRs" type="tns:FerryRsvPassengerRs" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="QuotationType">
        <xsd:sequence>
          <xsd:element name="Tariff" type="tns:TariffType" minOccurs="0" />
          <xsd:element name="Scheme" type="tns:SchemeType" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TariffType">
        <xsd:sequence>
          <xsd:element name="Type" type="xsd:string" minOccurs="0" />
          <xsd:element name="Band" type="xsd:string" minOccurs="0" />
          <xsd:element name="Promotion" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SchemeType">
        <xsd:sequence>
          <xsd:element name="Identification" type="xsd:string" minOccurs="0" />
          <xsd:element name="Authorisation" type="xsd:string" minOccurs="0" />
          <xsd:element name="TransactionUnits" type="xsd:int" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="QuotationResultType">
        <xsd:sequence>
          <xsd:element name="Tariff" type="tns:TariffResultType" minOccurs="0" />
          <xsd:element name="Scheme" type="tns:SchemeResultType" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TariffResultType">
        <xsd:sequence>
          <xsd:element name="Type" type="xsd:string" minOccurs="0" />
          <xsd:element name="TypeDesc" type="xsd:string" minOccurs="0" />
          <xsd:element name="Band" type="xsd:string" minOccurs="0" />
          <xsd:element name="BandDesc" type="xsd:string" minOccurs="0" />
          <xsd:element name="Promotion" type="xsd:string" minOccurs="0" />
          <xsd:element name="PromotionDesc" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SchemeResultType">
        <xsd:sequence>
          <xsd:element name="Identification" type="xsd:string" minOccurs="0" />
          <xsd:element name="Authorisation" type="xsd:string" minOccurs="0" />
          <xsd:element name="TransactionUnits" type="tns:IntWrapper" minOccurs="0" />
          <xsd:element name="Description" type="xsd:string" minOccurs="0" />
          <xsd:element name="Level" type="xsd:string" minOccurs="0" />
          <xsd:element name="Category" type="xsd:string" minOccurs="0" />
          <xsd:element name="CarriedUnits" type="tns:IntWrapper" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <!-- AIR TICKET REQUEST -->
      <xsd:complexType name="FlightTicketRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="OperatorCode" type="xsd:string" />
          <xsd:element name="BookingReference" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>PNR record locator</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="PassengerSelect" type="tns:PassengerSelect" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Allows to ticket an itinerary for a particular name field</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="TicketInfo" type="tns:TicketInfo" />
          <xsd:element name="PricingQualifiers" type="tns:PricingQualifiersType" minOccurs="0" />
          <xsd:element name="TicketPrinter" type="tns:TicketPrinter" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="PassengerSelect">
        <xsd:sequence>
          <xsd:element name="PassengerNumber" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>PassengerNumber - passenger number in the PNR. If PNR has been created within the BlackBox then this number must be equal to the passenger number in the ConfirmationRequest (numbers begin with 1 and must be sequential).</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TicketInfo">
        <xsd:sequence>
          <xsd:element name="TicketType" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Allows issuing a paper or electronic ticket. Values for TicketType:
P - paper ticket
E - electronic ticket</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ValidatingCarrier" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Used to pass a validating carrier. IATA 2 letters airline code.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Endorsment" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Used to pass miscellaneous text in the endorsements field</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="TourCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Used to pass tour code information</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Commission" type="tns:FlightTicketCommission" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Used to pass comission information</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="BaggageAllowance" type="tns:BaggageAllowance" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Used to pass baggage allowance information</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ValidityDates" type="tns:ValidityDatesType" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This indicates the dates that the ticket is valid for. Format: YYYY-MM-DD</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="FormOfPayment" type="tns:FormOfPayment">
            <xsd:annotation>
              <xsd:documentation>This element includes information about the payment method.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="BaggageAllowance">
        <xsd:sequence>
          <xsd:element name="Amount" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Baggage allowance value</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Type" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Baggage allowance value type:
Q - "Amount" represents the quantity of checked bags.
K - "Amount" represents the weight in kilos of checked bags</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightTicketCommission">
        <xsd:sequence>
          <xsd:element name="Amount" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Comission value</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Type" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Comission value type:
A - "Amount" tag represents the numeric amount of commission being claimed; 
P - Amount tag represents the precentage of commission being claimed</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FormOfPayment">
        <xsd:sequence>
          <xsd:element name="Code" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Indicate the method of payment. Types: CASH – cash, CHECK – check, CC – credit card</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="CreditCardInfo" type="tns:CreditCardInfo" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element must be included for credit card payments.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CreditCardInfo">
        <xsd:sequence>
          <xsd:element name="CardDetailes" type="tns:FlightCardDetailes" />
          <xsd:element name="AuthCode" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TicketPrinter">
        <xsd:sequence>
          <xsd:element name="PrinterAddress" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Printer  LNIATA</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <!-- AIR TICKET RESPONSE -->
      <xsd:complexType name="FlightTicketResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="TotalPrice" type="xsd:float" minOccurs="0" />
          <xsd:element name="FlightTicketNotes" type="tns:FlightTicketNotes" minOccurs="0" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightTicketNotes">
        <xsd:sequence>
          <xsd:element name="Notes" type="xsd:string" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RailInfoRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="BookCode" type="xsd:string" />
          <xsd:element name="SeatClassCode" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RailInfoResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="RailDetailedInfo" type="tns:RailDetailedInfo" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>This element is mutually exclusive with Errors: processing either succeeded (RailDetailedInfo tag is present, Errors is absent) or failed (RailDetailedInfo is absent, Errors is  present)</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RailFare">
        <xsd:sequence>
          <xsd:element name="FareType" type="tns:CodeAndDescription" />
          <xsd:element name="PassengerStatus" type="tns:CodeAndDescription" minOccurs="0" />
          <xsd:element name="SeatClass" type="tns:CodeAndDescription" minOccurs="0" />
          <xsd:element name="Price" type="xsd:float" />
          <xsd:element name="RoundTrip" type="xsd:boolean" minOccurs="0" />
          <xsd:element name="Exchangeable" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>A – if the fare is exchangeable without conditions, C – if it is exchangeable subject to conditions and N – if it is not exchangeable.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Refundable" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>A – if the fare is refundable without conditions, C – if it is refundable subject to conditions and N – if it is not refundable.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="SupplementsIncluded" type="xsd:boolean" minOccurs="0" />
          <xsd:element name="Notes" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RailFaresAvailable">
        <xsd:sequence>
          <xsd:element name="Fare" type="tns:RailFare" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="RailDetailedInfo">
        <xsd:sequence>
          <xsd:element name="OperatorCode" type="xsd:string" />
          <xsd:element name="FaresAvailable" type="tns:RailFaresAvailable" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ValidityDatesType">
        <xsd:sequence>
          <xsd:element name="ValidityDate" type="tns:ValidityDateType" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ValidityDateType">
        <xsd:sequence>
          <xsd:element name="SegmentNumber" type="xsd:int" />
          <xsd:element name="NotValidBefore" type="xsd:string" minOccurs="0" />
          <xsd:element name="NotValidAfter" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="NetRemitType">
        <xsd:sequence>
          <xsd:element name="Code" type="xsd:string" />
          <xsd:element name="Amount" type="xsd:string" />
          <xsd:element name="CurrencyCode" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="PricingQualifiersType">
        <xsd:sequence>
          <xsd:element name="NetRemit" type="tns:NetRemitType" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightSearchPrefsType">
        <xsd:sequence>
          <xsd:element name="DirectFlightsOnly" type="xsd:boolean" minOccurs="0" />
          <xsd:element name="ExactMatchOnly" type="tns:BoolWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>If value is TRUE then BlackBox will return only the flights which match exactly to the requested parameters (departure/arrival airports; travel duration; travel date variance).</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Outbound" type="tns:FlightSegmentPrefsType" minOccurs="0" />
          <xsd:element name="Inbound" type="tns:FlightSegmentPrefsType" minOccurs="0" />
          <xsd:element name="CabinPrefs" type="tns:CabinPrefsType" minOccurs="0" />
          <xsd:element name="ExcludeObtainedAirlinesSteps" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>For Sabre only</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="NumberOfResults" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>For Sabre only. This element determines how many options will be requested in the Sabre BargainFinderMax request.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightSegmentPrefsType">
        <xsd:sequence>
          <xsd:element name="AirlinePrefs" type="tns:AirlinePrefsType" minOccurs="0" />
          <xsd:element name="ExcludeAirlinePrefs" type="tns:AirlinePrefsType" minOccurs="0" />
          <xsd:element name="TimePrefs" type="tns:TimePrefs" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CabinPrefsType">
        <xsd:sequence>
          <xsd:element name="CabinPref" type="tns:CabinPrefType" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CabinPrefType">
        <xsd:sequence>
          <xsd:element name="CabinType" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Class of service. For example: "First", "Bussines", "Economy"</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="AirlinePrefsType">
        <xsd:sequence>
          <xsd:element name="AirlinePref" type="tns:AirlinePrefType" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TimePrefs">
        <xsd:sequence>
          <xsd:element name="DepartureTime" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Format: HH:MM:SS</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="TimeVariance" type="xsd:int" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Allows +/- number of hours from requested departure time and arrival time</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="AirlinePrefType">
        <xsd:sequence>
          <xsd:element name="AirlineCode" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightSeatsAvlSegmentsType">
        <xsd:sequence>
          <xsd:element name="FlightSeatsAvlSegment" type="tns:FlightSeatsAvlSegmentType" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <!-- FLIGHT DURATION REQUEST -->
      <xsd:complexType name="FlightDurationRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="OperatorCode" type="xsd:string" />
          <xsd:element name="Flights" type="tns:DurationRqFlightsType" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="DurationRqFlightType">
        <xsd:sequence>
          <xsd:element name="DepartureAirport" type="tns:FlightRequestAirport" />
          <xsd:element name="DepartureDateTime" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Format: YYYY-MM-DDTHH:MM:SS</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ArrivalAirport" type="tns:FlightRequestAirport" />
          <xsd:element name="ArrivalDateTime" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Format: YYYY-MM-DDTHH:MM:SS</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="DurationRqFlightsType">
        <xsd:sequence>
          <xsd:element name="Flight" type="tns:DurationRqFlightType" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <!-- FLIGHT DURATION RESPONSE -->
      <xsd:complexType name="FlightDurationResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="FlightDurations" type="tns:DurationRsFlightsType" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="DurationRsFlightType">
        <xsd:sequence>
          <xsd:element name="DepartureAirport" type="tns:ResponseAirport" />
          <xsd:element name="DepartureDateTime" type="xsd:string" />
          <xsd:element name="ArrivalAirport" type="tns:ResponseAirport" />
          <xsd:element name="ArrivalDateTime" type="xsd:string" />
          <xsd:element name="Duration" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Format: HH:MM</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="DurationRsFlightsType">
        <xsd:sequence>
          <xsd:element name="FlightDurationInfo" type="tns:DurationRsFlightType" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="PriceRequestInformationType">
        <xsd:sequence>
          <xsd:element name="SearchingFares" type="tns:SearchingFaresType" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Allowed values are "PrivateOnly", "PublicOnly", "PublicAndPrivate". Default value is "PublicOnly".</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="UseBargainFinder" type="xsd:boolean" minOccurs="0" />
          <xsd:element name="Currency" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="SearchingFaresType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="PublicOnly" />
          <xsd:enumeration value="PrivateOnly" />
          <xsd:enumeration value="PublicAndPrivate" />
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="FlightRemarks">
        <xsd:sequence>
          <xsd:element name="FlightRemark" type="tns:FlightRemark" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightRemark">
        <xsd:sequence>
          <xsd:element name="RemarkType" type="tns:FlightRemarkType">
            <xsd:annotation>
              <xsd:documentation>This field defines a type of remark and may contain one of the following values: "BasicRemark",  "ClientAddressRemark" and so on.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="RemarkText" type="tns:RemarkTextType" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="FlightRemarkType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="BasicRemark" />
          <xsd:enumeration value="ClientAddressRemark" />
          <xsd:enumeration value="DeliveryAddressRemark" />
          <xsd:enumeration value="InvoiceRemark" />
          <xsd:enumeration value="ItineraryRemark" />
          <xsd:enumeration value="GroupNameRemark" />
          <xsd:enumeration value="HistoricalRemark" />
          <xsd:enumeration value="HiddenRemark" />
          <xsd:enumeration value="CorporateNumberRemark" />
          <xsd:enumeration value="TicketingRemark" />
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="RemarkTextType">
        <xsd:sequence>
          <xsd:element name="TextLine" type="xsd:string" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightNotes">
        <xsd:sequence>
          <xsd:element name="FlightNote" type="tns:NameValueType" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="NameValueType">
        <xsd:sequence>
          <xsd:element name="Name" type="xsd:string" />
          <xsd:element name="Value" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CategoryValues">
        <xsd:sequence>
          <xsd:element name="CategoryValue" type="tns:CategoryValue" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CategoryValue">
        <xsd:sequence>
          <xsd:element name="Value" type="xsd:string" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="AttrNames">
        <xsd:sequence>
          <xsd:element name="AttrName" type="xsd:string" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CategoryData">
        <xsd:sequence>
          <xsd:element name="CategoryName" type="xsd:string" />
          <xsd:element name="AttrNames" type="tns:AttrNames" />
          <xsd:element name="CategoryValues" type="tns:CategoryValues" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="IntermediatePointsInfoType">
        <xsd:sequence>
          <xsd:element name="IntermediatePointInfo" type="tns:IntermediatePointInfoType" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="IntermediatePointInfoType">
        <xsd:sequence>
          <xsd:element name="AirportCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>3 Character IATA code of the intermediate airport.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="AirportName" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Intermediate point airport name (for lowcosts only).</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ArrivalDateTime" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Date and time of arrival at intermediate point. Format: YYYY-MM-DDTHH:MM:SS or YYYY-MM-DD</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="DepartureDateTime" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Date and time of departure from intermediate point. Format: YYYY-MM-DDTHH:MM:SS or YYYY-MM-DD</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ElapsedTime" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Elapsed time of flight leg to intermediate point.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="IntermediatePointTimeZone" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Intermediate point time zone indicator.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TravelComponentType">
        <xsd:sequence>
          <xsd:element name="AirportCode" type="xsd:string" />
          <xsd:element name="ArrivalOrDeparture" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>A-Arrival D-Departure
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Date" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Format: YYYY-MM-DD</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TravelComponentsType">
        <xsd:sequence>
          <xsd:element name="TravelComponent" type="tns:TravelComponentType" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="AgreeComponentsType">
        <xsd:sequence>
          <xsd:element name="AgreedToPDS" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation>Flag indicating that the end user has agreed to the product disclosure statement (this should be passed through from a check-box on the client end)
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="AgreedToExclusions" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation>Flag indicating that the end user has agreed to the exclusions statement (this should be passed through from a check-box on the client end)
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="AgreedToFiveYearRule" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation>Flag indicating that the end user has agreed to the no claim in the last five years, etc statement (this should be passed through from a check-box on the client end)
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TravelPreferenceInfoType">
        <xsd:sequence>
          <xsd:element name="AirlinePrefs" type="tns:AirlinePrefsType" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Validated">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Error" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Error presents if validation session was failed</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
      <xsd:element name="Warning" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ValidatedSessions">
        <xsd:sequence>
          <xsd:element name="Validated" type="tns:Validated" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ValidateSessionResponse">
        <xsd:sequence>
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="ValidatedSessions" type="tns:ValidatedSessions" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ValidateSessionRequest">
        <xsd:sequence>
          <xsd:element name="ValidateSessions">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="SessionId" type="xsd:string" maxOccurs="unbounded" />
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ClearReservationRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="BookCodes" type="tns:BookCodes" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ClearReservationResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="AvailabilityIndicatorType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="DirectConnect" />
          <xsd:enumeration value="Cache" />
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="PlatingAirlineType">
        <xsd:sequence>
          <xsd:element name="Code" type="xsd:string" />
          <xsd:element name="Name" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="QuoteAdditionalInfoType">
        <xsd:sequence>
          <xsd:element name="AdditionalNote" type="tns:NameValueType" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TravellersType">
        <xsd:sequence>
          <xsd:element name="Adults" type="tns:HotelPersons" />
          <xsd:element name="Children" type="tns:HotelPersons" minOccurs="0" />
          <xsd:element name="Infants" type="tns:HotelPersons" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="CruisingType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="International" />
          <xsd:enumeration value="Domestic" />
          <xsd:enumeration value="NoCruisung" />
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="PersonsDetailsType">
        <xsd:sequence>
          <xsd:element name="Travellers" type="tns:TravellersType">
            <xsd:annotation>
              <xsd:documentation>Passengers which in a trip.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ResidenceCountry" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>2 character country code (e.g. GB, DE etc.)</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Relationship" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Relationship of the party travelling (INSSGLPERS, INSCPL, INSSGLPAR, INSFAMILY, INSGRPPPL). Mandatory for ROCK.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TripSegmentType">
        <xsd:sequence>
          <xsd:element name="SegmentType" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Valid values for SegmentType are: Flight, Accommodation, CarHire, Excursion, Cruise, Rail and Coach.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="StartDate" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Start date of a trip.
Format: YYYY-MM-DD</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ReturnDate" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Return date from a trip.
Format: YYYY-MM-DD</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Origin" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Origin area (e.g. Departure airport).</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Destination" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Destination area (e.g. Arrival airport).</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TripBreakdownType">
        <xsd:sequence>
          <xsd:element name="TripSegment" type="tns:TripSegmentType" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TermsAndConditionsType">
        <xsd:sequence>
          <xsd:element name="Text" type="xsd:string" minOccurs="0" />
          <xsd:element name="URL" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="InsuranceReservationRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="BookCode" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="InsuranceReservationResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="ReservedInsurance" type="tns:ReservedInsuranceType" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ReservedInsuranceType">
        <xsd:sequence>
          <xsd:element name="OperatorCode" type="xsd:string" />
          <xsd:element name="OriginalOperatorCode" type="xsd:string" minOccurs="0" />
          <xsd:element name="Price" type="xsd:float" />
          <xsd:element name="CurrencyCode" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="InsuranceSupplements">
        <xsd:sequence>
          <xsd:element name="InsuranceSupplement" type="tns:InsuranceSupplement" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="PersonAgesType">
        <xsd:sequence>
          <xsd:element name="PersonAge" type="xsd:int" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="QueuePlace">
        <xsd:sequence>
          <xsd:element name="QueueNumber" type="xsd:string" />
          <xsd:element name="InstructionCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Represents the Sabre or personalized agency prefatory instruction code</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="GetCarriersRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="GetCarriersResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="Carriers" type="tns:Carriers" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Carriers">
        <xsd:sequence>
          <xsd:element name="Carrier" type="tns:Carrier" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Carrier">
        <xsd:sequence>
          <xsd:element name="IATACode" type="xsd:string" />
          <xsd:element name="ICAOCode" type="xsd:string" minOccurs="0" />
          <xsd:element name="Name" type="xsd:string" />
          <xsd:element name="Country" type="xsd:string" />
          <xsd:element name="Callsign" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="GetCurrenciesRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="GetCurrenciesResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="Currencies" type="tns:Currencies" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Currencies">
        <xsd:sequence>
          <xsd:element name="Currency" type="tns:Currency" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Currency">
        <xsd:sequence>
          <xsd:element name="Code" type="xsd:string" />
          <xsd:element name="Name" type="xsd:string" />
          <xsd:element name="CountryCode" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="PayerAuthDetails">
        <xsd:sequence>
          <xsd:element name="PayerAuthRequestID" type="xsd:string" />
          <xsd:element name="AuthenticationStatus" type="xsd:string" minOccurs="0" />
          <xsd:element name="AuthenticationCertificate" type="xsd:string" minOccurs="0" />
          <xsd:element name="AuthenticationCAVV" type="xsd:string" minOccurs="0" />
          <xsd:element name="AuthenticationECI" type="xsd:string" minOccurs="0" />
          <xsd:element name="AuthenticationTime" type="xsd:string" minOccurs="0" />
          <xsd:element name="ATSData" type="xsd:string" minOccurs="0" />
          <xsd:element name="TransactionID" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Enrollment">
        <xsd:sequence>
          <xsd:element name="EnrollmentCode" type="xsd:string" minOccurs="0" />
          <xsd:element name="PayerAuthRequestID" type="xsd:string" minOccurs="0" />
          <xsd:element name="ACSURL" type="xsd:string" minOccurs="0" />
          <xsd:element name="BBTermURL" type="xsd:string" minOccurs="0" />
          <xsd:element name="Enrolled" type="xsd:string" minOccurs="0" />
          <xsd:element name="MerchantReference" type="xsd:string" minOccurs="0" />
          <xsd:element name="PAReq" type="xsd:string" minOccurs="0" />
          <xsd:element name="ProofXML" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="AuthCheck">
        <xsd:sequence>
          <xsd:element name="PayerAuthRequestID" type="xsd:string" />
          <xsd:element name="MerchantReference" type="xsd:string" minOccurs="0" />
          <xsd:element name="AuthenticationStatus" type="xsd:string" minOccurs="0" />
          <xsd:element name="AuthenticationCertificate" type="xsd:string" minOccurs="0" />
          <xsd:element name="AuthenticationCAVV" type="xsd:string" minOccurs="0" />
          <xsd:element name="AuthenticationECI" type="xsd:string" minOccurs="0" />
          <xsd:element name="AuthenticationTime" type="xsd:string" minOccurs="0" />
          <xsd:element name="ATSData" type="xsd:string" minOccurs="0" />
          <xsd:element name="AuxiliaryData" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Airports">
        <xsd:sequence>
          <xsd:element name="Airport" type="tns:Airport" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Airport">
        <xsd:sequence>
          <xsd:element name="Code" type="xsd:string" />
          <xsd:element name="Name" type="xsd:string" />
          <xsd:element name="Country" type="tns:Country" />
          <xsd:element name="Latitude" type="xsd:float">
            <xsd:annotation>
              <xsd:documentation>In degree</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Longitude" type="xsd:float">
            <xsd:annotation>
              <xsd:documentation>In degree</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="GMTOffset" type="xsd:float" minOccurs="0" />
          <xsd:element name="Runway" type="tns:Runway" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Country">
        <xsd:sequence>
          <xsd:element name="Code" type="xsd:string" />
          <xsd:element name="Name" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Runway">
        <xsd:sequence>
          <xsd:element name="LengthFeet" type="xsd:float" minOccurs="0" />
          <xsd:element name="ElevationFeet" type="xsd:float" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="RateType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="Percent" />
          <xsd:enumeration value="Amount" />
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:simpleType name="DirectionType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="Arrival" />
          <xsd:enumeration value="Departure" />
          <xsd:enumeration value="Both" />
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="DrivingLicenseType">
        <xsd:sequence>
          <xsd:element name="Number" type="xsd:string" />
          <xsd:element name="Category" type="xsd:string" minOccurs="0" />
          <xsd:element name="Issue" type="tns:IssueType" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="IssueType">
        <xsd:sequence>
          <xsd:element name="Date" type="xsd:string" />
          <xsd:element name="Place" type="xsd:string" minOccurs="0" />
          <xsd:element name="Country" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="NightRates">
        <xsd:sequence>
          <xsd:element name="NightRate" type="tns:NightRate" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="NightRate">
        <xsd:sequence>
          <xsd:element name="FromTime" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Format: HH:MM:SS</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ToTime" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Format: HH:MM:SS</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Rate" type="xsd:float" />
          <xsd:element name="RateType" type="tns:RateType" />
          <xsd:element name="DirectionType" type="tns:DirectionType" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="NightRateCalc">
        <xsd:sequence>
          <xsd:element name="ArrivalPickupDateTime" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Date time to pick up from the airport. Format: YYYY-MM-DDTHH:MM:SS</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="DepatrurePickupDateTime" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Date time to pick up from accommodation. Format: YYYY-MMDDTHH:MM:SS</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="NightRateCharge" type="xsd:float">
            <xsd:annotation>
              <xsd:documentation>Assumed price calculated for time range from ArrivalPickupDateTime to DeparturePickupDateTime</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="OperatorSpecificHotelPrefs">
        <xsd:sequence>
          <xsd:element name="OperSpecificHotelPref" type="tns:OperatorSpecificHotelPref" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="OperatorSpecificTransferPrefs">
        <xsd:sequence>
          <xsd:element name="OperSpecificTransferPref" type="tns:OperatorSpecificTransferPref" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="OperatorSpecificHotelPref">
        <xsd:sequence>
          <xsd:element name="OperatorCode" type="xsd:string" minOccurs="0" />
          <xsd:element name="CurrencyCode" type="xsd:string" minOccurs="0" />
          <xsd:element name="LeadPassengerDomicile" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>ISO-code of the country of main residence of the lead passenger</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="OperatorSpecificTransferPref">
        <xsd:sequence>
          <xsd:element name="OperatorCode" type="xsd:string" minOccurs="0" />
          <xsd:element name="CurrencyCode" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <!-- SEARCH SIMILAR PRODUCTS -->
      <xsd:complexType name="AbstractSearchSimilarProductRequest" abstract="true">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SearchSimilarFlightRequest">
        <xsd:complexContent>
          <xsd:extension base="tns:AbstractSearchSimilarProductRequest">
            <xsd:sequence>
              <xsd:element name="ProductId" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>Applicable only for TD2WS. This value is id of product from Interactive.</xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element name="FindMatchingProductOnly" type="xsd:boolean" minOccurs="0" />
              <xsd:element name="Portion" type="tns:Portion" minOccurs="0" />
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="SearchSimilarHotelRequest">
        <xsd:complexContent>
          <xsd:extension base="tns:AbstractSearchSimilarProductRequest">
            <xsd:sequence>
              <xsd:element name="ProductId" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>Applicable only for TD2WS. This value is id of product from Interactive.</xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element name="FindMatchingProductOnly" type="xsd:boolean" minOccurs="0" />
              <xsd:element name="Portion" type="tns:Portion" minOccurs="0" />
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="SearchSimilarTransferRequest">
        <xsd:complexContent>
          <xsd:extension base="tns:AbstractSearchSimilarProductRequest">
            <xsd:sequence>
              <xsd:element name="ProductId" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>Applicable only for TD2WS. This value is id of product from Interactive.</xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element name="FindMatchingProductOnly" type="xsd:boolean" minOccurs="0" />
              <xsd:element name="Portion" type="tns:Portion" minOccurs="0" />
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="SearchSimilarCarRequest">
        <xsd:complexContent>
          <xsd:extension base="tns:AbstractSearchSimilarProductRequest">
            <xsd:sequence>
              <xsd:element name="ProductId" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>Applicable only for TD2WS. This value is id of product from Interactive.</xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element name="FindMatchingProductOnly" type="xsd:boolean" minOccurs="0" />
              <xsd:element name="Portion" type="tns:Portion" minOccurs="0" />
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="SearchSimilarParkingRequest">
        <xsd:complexContent>
          <xsd:extension base="tns:AbstractSearchSimilarProductRequest">
            <xsd:sequence>
              <xsd:element name="ProductId" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>Applicable only for TD2WS. This value is id of product from Interactive.</xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element name="FindMatchingProductOnly" type="xsd:boolean" minOccurs="0" />
              <xsd:element name="Portion" type="tns:Portion" minOccurs="0" />
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="SearchSimilarInsuranceQuoteRequest">
        <xsd:complexContent>
          <xsd:extension base="tns:AbstractSearchSimilarProductRequest">
            <xsd:sequence>
              <xsd:element name="ProductId" type="xsd:long">
                <xsd:annotation>
                  <xsd:documentation>Applicable only for TD2WS. This value is id of product from Interactive.</xsd:documentation>
                </xsd:annotation>
              </xsd:element>
              <xsd:element name="FindMatchingProductOnly" type="xsd:boolean" minOccurs="0" />
              <xsd:element name="Portion" type="tns:Portion" minOccurs="0" />
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="CloneBookCodeRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="BookCodes" type="tns:BookCodes" minOccurs="0" />
          <xsd:element name="NumberOfClones" type="xsd:int" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CloneBookCodeResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>present if login is ok</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="BookCodeClones" type="tns:BookCodeClones" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="BookCodeClones">
        <xsd:sequence>
          <xsd:element name="BookCodes" type="tns:BookCodes" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="GetBookCodesLifetimeRequest">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" />
          <xsd:element name="BookCodes" type="tns:BookCodes" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="GetBookCodesLifetimeResponse">
        <xsd:sequence>
          <xsd:element name="SessionId" type="xsd:string" minOccurs="0" />
          <xsd:element name="Errors" type="tns:Errors" minOccurs="0" />
          <xsd:element name="Warnings" type="tns:Warnings" minOccurs="0" />
          <xsd:element name="BookCodesLifetime" type="tns:BookCodesLifetime" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="BookCodesLifetime">
        <xsd:sequence>
          <xsd:element name="BookCodeLifetime" type="tns:BookCodeLifetime" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="BookCodeLifetime">
        <xsd:sequence>
          <xsd:element name="BookCode" type="xsd:string" />
          <xsd:element name="BookCodeStatus" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>This element will contain one of following strings: "Alive" if the book code is live or "NotFound" if the book code is wrong or expired.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Lifetime" type="tns:IntWrapper" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Remaining BookCode lifetime in minutes</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ExtraHotelInfo">
        <xsd:sequence>
          <xsd:element name="HotelLocation" type="tns:HotelLocation" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CancellationFee">
        <xsd:sequence>
          <xsd:element name="Amount" type="xsd:float" />
          <xsd:element name="FromDateTime" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Format: YYYY-MM-DDTHH:MM:SS</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ToDateTime" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Format: YYYY-MM-DDTHH:MM:SS</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="AmendmentFee">
        <xsd:sequence>
          <xsd:element name="AmendmentType" type="tns:AmendmentType" />
          <xsd:element name="Amount" type="xsd:float" />
          <xsd:element name="FromDateTime" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Format: YYYY-MM-DDTHH:MM:SS</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ToDateTime" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Format: YYYY-MM-DDTHH:MM:SS</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CancellationFees">
        <xsd:sequence>
          <xsd:element name="CancellationFee" type="tns:CancellationFee" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="AmendmentFees">
        <xsd:sequence>
          <xsd:element name="AmendmentFee" type="tns:AmendmentFee" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="AmendmentType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="PassengeNameAmendment" />
          <xsd:enumeration value="AgencyReferenceAmendment" />
          <xsd:enumeration value="StartDateAmendment" />
          <xsd:enumeration value="EndDateAmendment" />
          <xsd:enumeration value="HotelCommentsAmendment" />
          <xsd:enumeration value="ArrivalJourneyAmendment" />
          <xsd:enumeration value="DepartureJourneyAmendment" />
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="FlightInfoOriginDestination">
        <xsd:sequence>
          <xsd:element name="DepartureAirport" type="xsd:string" />
          <xsd:element name="ArrivalAirport" type="xsd:string" />
          <xsd:element name="DepartureDateTime" type="xsd:string" minOccurs="0" />
          <xsd:element name="ArrivalDateTime" type="xsd:string" minOccurs="0" />
          <xsd:element name="FlightNumber" type="xsd:string" minOccurs="0" />
          <xsd:element name="ResBookDesigCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>Booking class</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="OperatingAirline" type="xsd:string" minOccurs="0" />
          <xsd:element name="ServiceClass" type="xsd:string" minOccurs="0" />
          <xsd:element name="FlightCode" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>VDWS based</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FlightInfoOriginDestinations">
        <xsd:sequence>
          <xsd:element name="OriginDestination" type="tns:FlightInfoOriginDestination" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ItineraryType">
        <xsd:sequence>
          <xsd:element name="OperatorCode" type="xsd:string" />
          <xsd:element name="OriginDestinations" type="tns:FlightInfoOriginDestinations" />
          <xsd:element name="FlightDuration" type="tns:IntWrapper" minOccurs="0" />
          <xsd:element name="ReturnSupplements" type="tns:BoolWrapper" minOccurs="0" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="NotProcessed">
        <xsd:sequence>
          <xsd:element name="Reason" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CreditCardFee">
        <xsd:sequence>
          <xsd:element name="CreditCardType" type="xsd:string" />
          <xsd:element name="Price" type="xsd:float" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CreditCardFees">
        <xsd:sequence>
          <xsd:element name="CreditCardFee" type="tns:CreditCardFee" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
    </xsd:schema>
  </types>
  <message name="StartSessionRequest">
    <part name="request" element="bbs:StartSessionRequest" />
  </message>
  <message name="StartSessionResponse">
    <part name="response" element="bbs:StartSessionResponse" />
  </message>
  <message name="EndSessionRequest">
    <part name="request" element="bbs:EndSessionRequest" />
  </message>
  <message name="EndSessionResponse">
    <part name="response" element="bbs:EndSessionResponse" />
  </message>
  <message name="FlightAvailabilityRequest">
    <part name="request" element="bbs:FlightAvailabilityRequest" />
  </message>
  <message name="FlightAvailabilityResponse">
    <part name="response" element="bbs:FlightAvailabilityResponse" />
  </message>
  <message name="NextFlightSeatsAvlPortionRequest">
    <part name="request" element="bbs:NextFlightSeatsAvlPortionRequest" />
  </message>
  <message name="NextFlightPortionRequest">
    <part name="request" element="bbs:NextFlightPortionRequest" />
  </message>
  <message name="FlightReservationRequest">
    <part name="request" element="bbs:FlightReservationRequest" />
  </message>
  <message name="FlightReservationResponse">
    <part name="response" element="bbs:FlightReservationResponse" />
  </message>
  <message name="FlightInfoRequest">
    <part name="request" element="bbs:FlightInfoRequest" />
  </message>
  <message name="FlightInfoResponse">
    <part name="response" element="bbs:FlightInfoResponse" />
  </message>
  <message name="HotelAvailabilityRequest">
    <part name="request" element="bbs:HotelAvailabilityRequest" />
  </message>
  <message name="HotelAvailabilityResponse">
    <part name="response" element="bbs:HotelAvailabilityResponse" />
  </message>
  <message name="NextHotelPortionRequest">
    <part name="request" element="bbs:NextHotelPortionRequest" />
  </message>
  <message name="HotelReservationRequest">
    <part name="request" element="bbs:HotelReservationRequest" />
  </message>
  <message name="HotelReservationResponse">
    <part name="response" element="bbs:HotelReservationResponse" />
  </message>
  <message name="ConfirmationRequest">
    <part name="request" element="bbs:ConfirmationRequest" />
  </message>
  <message name="ConfirmationResponse">
    <part name="response" element="bbs:ConfirmationResponse" />
  </message>
  <message name="BookingStatusRequest">
    <part name="request" element="bbs:BookingStatusRequest" />
  </message>
  <message name="BookingStatusResponse">
    <part name="response" element="bbs:BookingStatusResponse" />
  </message>
  <message name="CancellationRequest">
    <part name="request" element="bbs:CancellationRequest" />
  </message>
  <message name="CancellationResponse">
    <part name="response" element="bbs:CancellationResponse" />
  </message>
  <message name="HotelInfoRequest">
    <part name="request" element="bbs:HotelInfoRequest" />
  </message>
  <message name="HotelInfoResponse">
    <part name="response" element="bbs:HotelInfoResponse" />
  </message>
  <message name="CardClearanceRequest">
    <part name="request" element="bbs:CardClearanceRequest" />
  </message>
  <message name="CardClearanceResponse">
    <part name="response" element="bbs:CardClearanceResponse" />
  </message>
  <message name="ClearanceConfirmationRequest">
    <part name="request" element="bbs:ClearanceConfirmationRequest" />
  </message>
  <message name="ClearanceConfirmationResponse">
    <part name="response" element="bbs:ClearanceConfirmationResponse" />
  </message>
  <message name="InsuranceQuoteRequest">
    <part name="request" element="bbs:InsuranceQuoteRequest" />
  </message>
  <message name="InsuranceQuoteResponse">
    <part name="response" element="bbs:InsuranceQuoteResponse" />
  </message>
  <message name="InsuranceReservationRequest">
    <part name="request" element="bbs:InsuranceReservationRequest" />
  </message>
  <message name="InsuranceReservationResponse">
    <part name="response" element="bbs:InsuranceReservationResponse" />
  </message>
  <message name="NextInsurancePortionRequest">
    <part name="response" element="bbs:NextInsurancePortionRequest" />
  </message>
  <message name="CarAvailabilityRequest">
    <part name="request" element="bbs:CarAvailabilityRequest" />
  </message>
  <message name="CarAvailabilityResponse">
    <part name="response" element="bbs:CarAvailabilityResponse" />
  </message>
  <message name="NextCarPortionRequest">
    <part name="response" element="bbs:NextCarPortionRequest" />
  </message>
  <message name="CarReservationRequest">
    <part name="request" element="bbs:CarReservationRequest" />
  </message>
  <message name="CarReservationResponse">
    <part name="response" element="bbs:CarReservationResponse" />
  </message>
  <message name="TransferAvailabilityRequest">
    <part name="request" element="bbs:TransferAvailabilityRequest" />
  </message>
  <message name="TransferAvailabilityResponse">
    <part name="response" element="bbs:TransferAvailabilityResponse" />
  </message>
  <message name="NextTransferPortionRequest">
    <part name="response" element="bbs:NextTransferPortionRequest" />
  </message>
  <message name="TransferReservationRequest">
    <part name="request" element="bbs:TransferReservationRequest" />
  </message>
  <message name="TransferReservationResponse">
    <part name="response" element="bbs:TransferReservationResponse" />
  </message>
  <message name="TourAvailabilityRequest">
    <part name="request" element="bbs:TourAvailabilityRequest" />
  </message>
  <message name="TourAvailabilityResponse">
    <part name="response" element="bbs:TourAvailabilityResponse" />
  </message>
  <message name="TourReservationRequest">
    <part name="request" element="bbs:TourReservationRequest" />
  </message>
  <message name="NextTourPortionRequest">
    <part name="request" element="bbs:NextTourPortionRequest" />
  </message>
  <message name="TourReservationResponse">
    <part name="response" element="bbs:TourReservationResponse" />
  </message>
  <message name="RailAvailabilityRequest">
    <part name="request" element="bbs:RailAvailabilityRequest" />
  </message>
  <message name="RailAvailabilityResponse">
    <part name="response" element="bbs:RailAvailabilityResponse" />
  </message>
  <message name="NextRailPortionRequest">
    <part name="request" element="bbs:NextRailPortionRequest" />
  </message>
  <message name="RailReservationRequest">
    <part name="request" element="bbs:RailReservationRequest" />
  </message>
  <message name="RailReservationResponse">
    <part name="response" element="bbs:RailReservationResponse" />
  </message>
  <message name="FerryTimetableRequest">
    <part name="request" element="bbs:FerryTimetableRequest" />
  </message>
  <message name="FerryTimetableResponse">
    <part name="response" element="bbs:FerryTimetableResponse" />
  </message>
  <message name="NextFerryPortionRequest">
    <part name="request" element="bbs:NextFerryPortionRequest" />
  </message>
  <message name="FerryAccommodationRequest">
    <part name="request" element="bbs:FerryAccommodationRequest" />
  </message>
  <message name="FerryAccommodationResponse">
    <part name="response" element="bbs:FerryAccommodationResponse" />
  </message>
  <message name="FerryReservationRequest">
    <part name="request" element="bbs:FerryReservationRequest" />
  </message>
  <message name="FerryReservationResponse">
    <part name="response" element="bbs:FerryReservationResponse" />
  </message>
  <message name="OtherProductAvailabilityRequest">
    <part name="request" element="bbs:OtherProductAvailabilityRequest" />
  </message>
  <message name="OtherProductAvailabilityResponse">
    <part name="response" element="bbs:OtherProductAvailabilityResponse" />
  </message>
  <message name="NextOtherProductPortionRequest">
    <part name="request" element="bbs:NextOtherProductPortionRequest" />
  </message>
  <message name="OtherProductInfoRequest">
    <part name="request" element="bbs:OtherProductInfoRequest" />
  </message>
  <message name="OtherProductInfoResponse">
    <part name="response" element="bbs:OtherProductInfoResponse" />
  </message>
  <message name="OtherProductReservationRequest">
    <part name="request" element="bbs:OtherProductReservationRequest" />
  </message>
  <message name="OtherProductReservationResponse">
    <part name="response" element="bbs:OtherProductReservationResponse" />
  </message>
  <message name="ReloadConfigurationRequest">
    <part name="request" element="bbs:ReloadConfigurationRequest" />
  </message>
  <message name="ReloadConfigurationResponse">
    <part name="response" element="bbs:ReloadConfigurationResponse" />
  </message>
  <message name="CreditRequest">
    <part name="request" element="bbs:CreditRequest" />
  </message>
  <message name="CreditResponse">
    <part name="response" element="bbs:CreditResponse" />
  </message>
  <message name="AddSessionInfoRequest">
    <part name="request" element="bbs:AddSessionInfoRequest" />
  </message>
  <message name="AddSessionInfoResponse">
    <part name="response" element="bbs:AddSessionInfoResponse" />
  </message>
  <message name="DirectDebitRequest">
    <part name="request" element="bbs:DirectDebitRequest" />
  </message>
  <message name="DirectDebitResponse">
    <part name="response" element="bbs:DirectDebitResponse" />
  </message>
  <message name="SupplementListRequest">
    <part name="request" element="bbs:SupplementListRequest" />
  </message>
  <message name="SupplementListResponse">
    <part name="response" element="bbs:SupplementListResponse" />
  </message>
  <message name="CommissionRequest">
    <part name="request" element="bbs:CommissionRequest" />
  </message>
  <message name="CommissionResponse">
    <part name="response" element="bbs:CommissionResponse" />
  </message>
  <message name="ParkingAvailabilityRequest">
    <part name="request" element="bbs:ParkingAvailabilityRequest" />
  </message>
  <message name="ParkingAvailabilityResponse">
    <part name="response" element="bbs:ParkingAvailabilityResponse" />
  </message>
  <message name="NextParkingPortionRequest">
    <part name="request" element="bbs:NextParkingPortionRequest" />
  </message>
  <message name="ParkingReservationRequest">
    <part name="request" element="bbs:ParkingReservationRequest" />
  </message>
  <message name="ParkingReservationResponse">
    <part name="response" element="bbs:ParkingReservationResponse" />
  </message>
  <message name="ParkingInfoRequest">
    <part name="request" element="bbs:ParkingInfoRequest" />
  </message>
  <message name="ParkingInfoResponse">
    <part name="response" element="bbs:ParkingInfoResponse" />
  </message>
  <message name="FlightTicketRequest">
    <part name="request" element="bbs:FlightTicketRequest" />
  </message>
  <message name="FlightTicketResponse">
    <part name="response" element="bbs:FlightTicketResponse" />
  </message>
  <message name="FlightFaresListRequest">
    <part name="request" element="bbs:FlightFaresListRequest" />
  </message>
  <message name="FlightFaresListResponse">
    <part name="response" element="bbs:FlightFaresListResponse" />
  </message>
  <message name="FlightSeatsAvailabilityRequest">
    <part name="request" element="bbs:FlightSeatsAvailabilityRequest" />
  </message>
  <message name="FlightSeatsAvailabilityResponse">
    <part name="response" element="bbs:FlightSeatsAvailabilityResponse" />
  </message>
  <message name="RailInfoRequest">
    <part name="request" element="bbs:RailInfoRequest" />
  </message>
  <message name="RailInfoResponse">
    <part name="request" element="bbs:RailInfoResponse" />
  </message>
  <message name="FlightDurationRequest">
    <part name="request" element="bbs:FlightDurationRequest" />
  </message>
  <message name="FlightDurationResponse">
    <part name="request" element="bbs:FlightDurationResponse" />
  </message>
  <message name="GetBBCategoriesRequest">
    <part name="request" element="bbs:GetBBCategoriesRequest" />
  </message>
  <message name="GetBBCategoriesResponse">
    <part name="request" element="bbs:GetBBCategoriesResponse" />
  </message>
  <message name="GetBBCategoryDataRequest">
    <part name="request" element="bbs:GetBBCategoryDataRequest" />
  </message>
  <message name="GetBBCategoryDataResponse">
    <part name="response" element="bbs:GetBBCategoryDataResponse" />
  </message>
  <message name="NextBBCategoryDataPortionRequest">
    <part name="request" element="bbs:NextBBCategoryDataPortionRequest" />
  </message>
  <message name="ValidateSessionRequest">
    <part name="request" element="bbs:ValidateSessionRequest" />
  </message>
  <message name="ValidateSessionResponse">
    <part name="response" element="bbs:ValidateSessionResponse" />
  </message>
  <message name="ClearReservationRequest">
    <part name="request" element="bbs:ClearReservationRequest" />
  </message>
  <message name="ClearReservationResponse">
    <part name="response" element="bbs:ClearReservationResponse" />
  </message>
  <message name="EnrollmentCheckRequest">
    <part name="request" element="bbs:EnrollmentCheckRequest" />
  </message>
  <message name="EnrollmentCheckResponse">
    <part name="response" element="bbs:EnrollmentCheckResponse" />
  </message>
  <message name="AuthCheckRequest">
    <part name="request" element="bbs:AuthCheckRequest" />
  </message>
  <message name="AuthCheckResponse">
    <part name="response" element="bbs:AuthCheckResponse" />
  </message>
  <message name="AsyncAuthCheckStatusRequest">
    <part name="request" element="bbs:AsyncAuthCheckStatusRequest" />
  </message>
  <message name="AsyncAuthCheckStatusResponse">
    <part name="response" element="bbs:AsyncAuthCheckStatusResponse" />
  </message>
  <message name="GetCarriersRequest">
    <part name="request" element="bbs:GetCarriersRequest" />
  </message>
  <message name="GetCarriersResponse">
    <part name="request" element="bbs:GetCarriersResponse" />
  </message>
  <message name="GetCurrenciesRequest">
    <part name="request" element="bbs:GetCurrenciesRequest" />
  </message>
  <message name="GetCurrenciesResponse">
    <part name="request" element="bbs:GetCurrenciesResponse" />
  </message>
  <message name="GetAirportsRequest">
    <part name="request" element="bbs:GetAirportsRequest" />
  </message>
  <message name="GetAirportsResponse">
    <part name="request" element="bbs:GetAirportsResponse" />
  </message>
  <message name="SearchSimilarFlightRequest">
    <part name="request" element="bbs:SearchSimilarFlightRequest" />
  </message>
  <message name="SearchSimilarHotelRequest">
    <part name="request" element="bbs:SearchSimilarHotelRequest" />
  </message>
  <message name="SearchSimilarTransferRequest">
    <part name="request" element="bbs:SearchSimilarTransferRequest" />
  </message>
  <message name="SearchSimilarCarRequest">
    <part name="request" element="bbs:SearchSimilarCarRequest" />
  </message>
  <message name="SearchSimilarParkingRequest">
    <part name="request" element="bbs:SearchSimilarParkingRequest" />
  </message>
  <message name="SearchSimilarInsuranceQuoteRequest">
    <part name="request" element="bbs:SearchSimilarInsuranceQuoteRequest" />
  </message>
  <message name="CloneBookCodeRequest">
    <part name="request" element="bbs:CloneBookCodeRequest" />
  </message>
  <message name="CloneBookCodeResponse">
    <part name="request" element="bbs:CloneBookCodeResponse" />
  </message>
  <message name="GetBookCodesLifetimeRequest">
    <part name="request" element="bbs:GetBookCodesLifetimeRequest" />
  </message>
  <message name="GetBookCodesLifetimeResponse">
    <part name="request" element="bbs:GetBookCodesLifetimeResponse" />
  </message>
  <portType name="BlackBoxPortType">
    <operation name="StartSession">
      <input message="bb:StartSessionRequest" />
      <output message="bb:StartSessionResponse" />
    </operation>
    <operation name="EndSession">
      <input message="bb:EndSessionRequest" />
      <output message="bb:EndSessionResponse" />
    </operation>
    <operation name="FindAvailableFlights">
      <input message="bb:FlightAvailabilityRequest" />
      <output message="bb:FlightAvailabilityResponse" />
    </operation>
    <operation name="NextFlightSeatsAvlPortion">
      <input message="bb:NextFlightSeatsAvlPortionRequest" />
      <output message="bb:FlightSeatsAvailabilityResponse" />
    </operation>
    <operation name="NextFlightPortion">
      <input message="bb:NextFlightPortionRequest" />
      <output message="bb:FlightAvailabilityResponse" />
    </operation>
    <operation name="ReserveFlight">
      <input message="bb:FlightReservationRequest" />
      <output message="bb:FlightReservationResponse" />
    </operation>
    <operation name="GetFlightInfo">
      <input message="bb:FlightInfoRequest" />
      <output message="bb:FlightInfoResponse" />
    </operation>
    <operation name="FindAvailableHotels">
      <input message="bb:HotelAvailabilityRequest" />
      <output message="bb:HotelAvailabilityResponse" />
    </operation>
    <operation name="NextHotelPortion">
      <input message="bb:NextHotelPortionRequest" />
      <output message="bb:HotelAvailabilityResponse" />
    </operation>
    <operation name="ReserveHotel">
      <input message="bb:HotelReservationRequest" />
      <output message="bb:HotelReservationResponse" />
    </operation>
    <operation name="ConfirmReservation">
      <input message="bb:ConfirmationRequest" />
      <output message="bb:ConfirmationResponse" />
    </operation>
    <operation name="GetBookingStatus">
      <input message="bb:BookingStatusRequest" />
      <output message="bb:BookingStatusResponse" />
    </operation>
    <operation name="CancelBooking">
      <input message="bb:CancellationRequest" />
      <output message="bb:CancellationResponse" />
    </operation>
    <operation name="GetHotelInfo">
      <input message="bb:HotelInfoRequest" />
      <output message="bb:HotelInfoResponse" />
    </operation>
    <operation name="ClearCard">
      <input message="bb:CardClearanceRequest" />
      <output message="bb:CardClearanceResponse" />
    </operation>
    <operation name="ConfirmClearance">
      <input message="bb:ClearanceConfirmationRequest" />
      <output message="bb:ClearanceConfirmationResponse" />
    </operation>
    <operation name="GetInsuranceQuotes">
      <input message="bb:InsuranceQuoteRequest" />
      <output message="bb:InsuranceQuoteResponse" />
    </operation>
    <operation name="NextInsurancePortion">
      <input message="bb:NextInsurancePortionRequest" />
      <output message="bb:InsuranceQuoteResponse" />
    </operation>
    <operation name="ReserveInsurance">
      <input message="bb:InsuranceReservationRequest" />
      <output message="bb:InsuranceReservationResponse" />
    </operation>
    <operation name="FindAvailableCars">
      <input message="bb:CarAvailabilityRequest" />
      <output message="bb:CarAvailabilityResponse" />
    </operation>
    <operation name="NextCarPortion">
      <input message="bb:NextCarPortionRequest" />
      <output message="bb:CarAvailabilityResponse" />
    </operation>
    <operation name="ReserveCar">
      <input message="bb:CarReservationRequest" />
      <output message="bb:CarReservationResponse" />
    </operation>
    <operation name="FindAvailableTransfers">
      <input message="bb:TransferAvailabilityRequest" />
      <output message="bb:TransferAvailabilityResponse" />
    </operation>
    <operation name="NextTransferPortion">
      <input message="bb:NextTransferPortionRequest" />
      <output message="bb:TransferAvailabilityResponse" />
    </operation>
    <operation name="ReserveTransfer">
      <input message="bb:TransferReservationRequest" />
      <output message="bb:TransferReservationResponse" />
    </operation>
    <operation name="FindAvailableTours">
      <input message="bb:TourAvailabilityRequest" />
      <output message="bb:TourAvailabilityResponse" />
    </operation>
    <operation name="NextTourPortion">
      <input message="bb:NextTourPortionRequest" />
      <output message="bb:TourAvailabilityResponse" />
    </operation>
    <operation name="ReserveTour">
      <input message="bb:TourReservationRequest" />
      <output message="bb:TourReservationResponse" />
    </operation>
    <operation name="FindAvailableRails">
      <input message="bb:RailAvailabilityRequest" />
      <output message="bb:RailAvailabilityResponse" />
    </operation>
    <operation name="NextRailPortion">
      <input message="bb:NextRailPortionRequest" />
      <output message="bb:RailAvailabilityResponse" />
    </operation>
    <operation name="GetRailInfo">
      <input message="bb:RailInfoRequest" />
      <output message="bb:RailInfoResponse" />
    </operation>
    <operation name="ReserveRail">
      <input message="bb:RailReservationRequest" />
      <output message="bb:RailReservationResponse" />
    </operation>
    <operation name="GetFerryTimetable">
      <input message="bb:FerryTimetableRequest" />
      <output message="bb:FerryTimetableResponse" />
    </operation>
    <operation name="FindFerryAccommodation">
      <input message="bb:FerryAccommodationRequest" />
      <output message="bb:FerryAccommodationResponse" />
    </operation>
    <operation name="NextFerryPortion">
      <input message="bb:NextFerryPortionRequest" />
      <output message="bb:FerryTimetableResponse" />
    </operation>
    <operation name="ReserveFerry">
      <input message="bb:FerryReservationRequest" />
      <output message="bb:FerryReservationResponse" />
    </operation>
    <operation name="FindAvailableOtherProducts">
      <input message="bb:OtherProductAvailabilityRequest" />
      <output message="bb:OtherProductAvailabilityResponse" />
    </operation>
    <operation name="NextOtherProductPortion">
      <input message="bb:NextOtherProductPortionRequest" />
      <output message="bb:OtherProductAvailabilityResponse" />
    </operation>
    <operation name="GetOtherProductInfo">
      <input message="bb:OtherProductInfoRequest" />
      <output message="bb:OtherProductInfoResponse" />
    </operation>
    <operation name="ReserveOtherProduct">
      <input message="bb:OtherProductReservationRequest" />
      <output message="bb:OtherProductReservationResponse" />
    </operation>
    <operation name="ReloadConfiguration">
      <input message="bb:ReloadConfigurationRequest" />
      <output message="bb:ReloadConfigurationResponse" />
    </operation>
    <operation name="GetCreditInfo">
      <input message="bb:CreditRequest" />
      <output message="bb:CreditResponse" />
    </operation>
    <operation name="AddSessionInfo">
      <input message="bb:AddSessionInfoRequest" />
      <output message="bb:AddSessionInfoResponse" />
    </operation>
    <operation name="ProcessDirectDebit">
      <input message="bb:DirectDebitRequest" />
      <output message="bb:DirectDebitResponse" />
    </operation>
    <operation name="GetSupplementList">
      <input message="bb:SupplementListRequest" />
      <output message="bb:SupplementListResponse" />
    </operation>
    <operation name="GetCommissionInfo">
      <input message="bb:CommissionRequest" />
      <output message="bb:CommissionResponse" />
    </operation>
    <operation name="FindAvailableParkings">
      <input message="bb:ParkingAvailabilityRequest" />
      <output message="bb:ParkingAvailabilityResponse" />
    </operation>
    <operation name="NextParkingPortion">
      <input message="bb:NextParkingPortionRequest" />
      <output message="bb:ParkingAvailabilityResponse" />
    </operation>
    <operation name="ReserveParking">
      <input message="bb:ParkingReservationRequest" />
      <output message="bb:ParkingReservationResponse" />
    </operation>
    <operation name="GetParkingInfo">
      <input message="bb:ParkingInfoRequest" />
      <output message="bb:ParkingInfoResponse" />
    </operation>
    <operation name="FlightTicket">
      <input message="bb:FlightTicketRequest" />
      <output message="bb:FlightTicketResponse" />
    </operation>
    <operation name="FlightFaresList">
      <input message="bb:FlightFaresListRequest" />
      <output message="bb:FlightFaresListResponse" />
    </operation>
    <operation name="FlightSeatsAvailability">
      <input message="bb:FlightSeatsAvailabilityRequest" />
      <output message="bb:FlightSeatsAvailabilityResponse" />
    </operation>
    <operation name="FlightDuration">
      <input message="bb:FlightDurationRequest" />
      <output message="bb:FlightDurationResponse" />
    </operation>
    <operation name="GetBBCategories">
      <input message="bb:GetBBCategoriesRequest" />
      <output message="bb:GetBBCategoriesResponse" />
    </operation>
    <operation name="GetBBCategoryData">
      <input message="bb:GetBBCategoryDataRequest" />
      <output message="bb:GetBBCategoryDataResponse" />
    </operation>
    <operation name="NextBBCategoryDataPortion">
      <input message="bb:NextBBCategoryDataPortionRequest" />
      <output message="bb:GetBBCategoryDataResponse" />
    </operation>
    <operation name="ValidateSession">
      <input message="bb:ValidateSessionRequest" />
      <output message="bb:ValidateSessionResponse" />
    </operation>
    <operation name="ClearReservation">
      <input message="bb:ClearReservationRequest" />
      <output message="bb:ClearReservationResponse" />
    </operation>
    <operation name="EnrollmentCheck">
      <input message="bb:EnrollmentCheckRequest" />
      <output message="bb:EnrollmentCheckResponse" />
    </operation>
    <operation name="AuthCheck">
      <input message="bb:AuthCheckRequest" />
      <output message="bb:AuthCheckResponse" />
    </operation>
    <operation name="AsyncAuthCheckStatus">
      <input message="bb:AsyncAuthCheckStatusRequest" />
      <output message="bb:AsyncAuthCheckStatusResponse" />
    </operation>
    <operation name="GetCarriers">
      <input message="bb:GetCarriersRequest" />
      <output message="bb:GetCarriersResponse" />
    </operation>
    <operation name="GetCurrencies">
      <input message="bb:GetCurrenciesRequest" />
      <output message="bb:GetCurrenciesResponse" />
    </operation>
    <operation name="GetAirports">
      <input message="bb:GetAirportsRequest" />
      <output message="bb:GetAirportsResponse" />
    </operation>
    <operation name="SearchSimilarFlights">
      <input message="bb:SearchSimilarFlightRequest" />
      <output message="bb:FlightAvailabilityResponse" />
    </operation>
    <operation name="SearchSimilarHotels">
      <input message="bb:SearchSimilarHotelRequest" />
      <output message="bb:HotelAvailabilityResponse" />
    </operation>
    <operation name="SearchSimilarTransfers">
      <input message="bb:SearchSimilarTransferRequest" />
      <output message="bb:TransferAvailabilityResponse" />
    </operation>
    <operation name="SearchSimilarCars">
      <input message="bb:SearchSimilarCarRequest" />
      <output message="bb:CarAvailabilityResponse" />
    </operation>
    <operation name="SearchSimilarParkings">
      <input message="bb:SearchSimilarParkingRequest" />
      <output message="bb:ParkingAvailabilityResponse" />
    </operation>
    <operation name="SearchSimilarInsuranceQuotes">
      <input message="bb:SearchSimilarInsuranceQuoteRequest" />
      <output message="bb:InsuranceQuoteResponse" />
    </operation>
    <operation name="CloneBookCode">
      <input message="bb:CloneBookCodeRequest" />
      <output message="bb:CloneBookCodeResponse" />
    </operation>
    <operation name="GetBookCodesLifetime">
      <input message="bb:GetBookCodesLifetimeRequest" />
      <output message="bb:GetBookCodesLifetimeResponse" />
    </operation>
  </portType>
  <binding name="BlackBoxBinding" type="bb:BlackBoxPortType">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http" />
    <operation name="StartSession">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/StartSession" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="EndSession">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/EndSession" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="FindAvailableFlights">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/FindAvailableFlights" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="NextFlightSeatsAvlPortion">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/NextFlightSeatsAvlPortion" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="NextFlightPortion">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/NextFlightPortion" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="ReserveFlight">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/ReserveFlight" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="GetFlightInfo">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/GetFlightInfo" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="FindAvailableHotels">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/FindAvailableHotels" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="NextHotelPortion">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/NextHotelPortion" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="ReserveHotel">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/ReserveHotel" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="ConfirmReservation">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/ConfirmReservation" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="GetBookingStatus">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/GetBookingStatus" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="CancelBooking">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/CancelBooking" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="GetHotelInfo">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/GetHotelInfo" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="ClearCard">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/ClearCard" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="ConfirmClearance">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/ConfirmClearance" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="GetInsuranceQuotes">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/GetInsuranceQuotes" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="NextInsurancePortion">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/NextInsurancePortion" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="ReserveInsurance">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/ReserveInsurance" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="FindAvailableCars">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/FindAvailableCars" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="NextCarPortion">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/NextCarPortion" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="ReserveCar">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/ReserveCar" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="FindAvailableTransfers">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/FindAvailableTransfers" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="NextTransferPortion">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/NextTransferPortion" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="ReserveTransfer">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/ReserveTransfer" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="FindAvailableTours">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/FindAvailableTours" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="NextTourPortion">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/NextTourPortion" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="ReserveTour">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/ReserveTour" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="FindAvailableRails">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/FindAvailableRails" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="NextRailPortion">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/NextRailPortion" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="GetRailInfo">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/GetRailInfo" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="ReserveRail">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/ReserveRail" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="GetFerryTimetable">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/GetFerryTimetable" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="NextFerryPortion">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/NextFerryPortion" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="FindFerryAccommodation">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/FindFerryAccommodation" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="ReserveFerry">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/ReserveFerry" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="FindAvailableOtherProducts">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/FindAvailableOtherProducts" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="NextOtherProductPortion">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/NextOtherProductPortion" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="GetOtherProductInfo">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/GetOtherProductInfo" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="ReserveOtherProduct">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/ReserveOtherProduct" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="ReloadConfiguration">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/ReloadConfiguration" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="GetCreditInfo">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/GetCreditInfo" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="AddSessionInfo">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/AddSessionInfo" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="ProcessDirectDebit">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/ProcessDirectDebit" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="GetSupplementList">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/GetSupplementList" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="GetCommissionInfo">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/GetCommissionInfo" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="FindAvailableParkings">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/FindAvailableParkings" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="NextParkingPortion">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/NextParkingPortion" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="ReserveParking">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/ReserveParking" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="GetParkingInfo">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/GetParkingInfo" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="FlightTicket">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/FlightTicket" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="FlightFaresList">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/FlightFaresList" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="FlightSeatsAvailability">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/FlightSeatsAvailability" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="FlightDuration">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/FlightDuration" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="GetBBCategories">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/GetBBCategories" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="GetBBCategoryData">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/GetBBCategoryData" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="NextBBCategoryDataPortion">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/NextBBCategoryDataPortion" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="ValidateSession">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/ValidateSession" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="ClearReservation">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/ClearReservation" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="EnrollmentCheck">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/EnrollmentCheck" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="AuthCheck">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/AuthCheck" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="AsyncAuthCheckStatus">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/AsyncAuthCheckStatus" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="GetCarriers">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/GetCarriers" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="GetCurrencies">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/GetCurrencies" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="GetAirports">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/GetAirports" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="SearchSimilarFlights">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/SearchSimilarFlights" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="SearchSimilarHotels">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/SearchSimilarHotels" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="SearchSimilarTransfers">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/SearchSimilarTransfers" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="SearchSimilarCars">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/SearchSimilarCars" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="SearchSimilarParkings">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/SearchSimilarParkings" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="SearchSimilarInsuranceQuotes">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/SearchSimilarInsurances" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="CloneBookCode">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/CloneBookCode" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
    <operation name="GetBookCodesLifetime">
      <soap:operation soapAction="http://topdog.uk.net/BlackBox/GetBookCodesLifetime" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
    </operation>
  </binding>
  <service name="BlackBox">
    <port name="BlackBoxPort" binding="bb:BlackBoxBinding">
      <soap:address location="http://81.144.197.83:80/blackbox2/blackbox" />
    </port>
  </service>
</definitions>